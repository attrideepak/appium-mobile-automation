"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

const commands = {};

function toOrigin(element) {
  return element ? _appiumSupport.util.wrapElement(_appiumSupport.util.unwrapElement(element)) : undefined;
}

function toPoint(x, y) {
  return _lodash.default.isFinite(x) && _lodash.default.isFinite(y) ? {
    x,
    y
  } : undefined;
}

function toRect(left, top, width, height) {
  if ([left, top, width, height].some(v => !_lodash.default.isFinite(v))) {
    return undefined;
  }

  return {
    left,
    top,
    width,
    height
  };
}

commands.mobileLongClickGesture = async function mobileLongClickGesture(opts = {}) {
  const {
    elementId,
    x,
    y,
    duration
  } = opts;
  return await this.uiautomator2.jwproxy.command('/appium/gestures/long_click', 'POST', {
    origin: toOrigin(elementId),
    offset: toPoint(x, y),
    duration
  });
};

commands.mobileDragGesture = async function mobileDragGesture(opts = {}) {
  const {
    elementId,
    startX,
    startY,
    endX,
    endY,
    speed
  } = opts;
  return await this.uiautomator2.jwproxy.command('/appium/gestures/drag', 'POST', {
    origin: toOrigin(elementId),
    start: toPoint(startX, startY),
    end: toPoint(endX, endY),
    speed
  });
};

commands.mobileFlingGesture = async function mobileFlingGesture(opts = {}) {
  const {
    elementId,
    left,
    top,
    width,
    height,
    direction,
    speed
  } = opts;
  return await this.uiautomator2.jwproxy.command('/appium/gestures/fling', 'POST', {
    origin: toOrigin(elementId),
    area: toRect(left, top, width, height),
    direction,
    speed
  });
};

commands.mobilePinchCloseGesture = async function mobilePinchCloseGesture(opts = {}) {
  const {
    elementId,
    left,
    top,
    width,
    height,
    percent,
    speed
  } = opts;
  return await this.uiautomator2.jwproxy.command('/appium/gestures/pinch_close', 'POST', {
    origin: toOrigin(elementId),
    area: toRect(left, top, width, height),
    percent,
    speed
  });
};

commands.mobilePinchOpenGesture = async function mobilePinchOpenGesture(opts = {}) {
  const {
    elementId,
    left,
    top,
    width,
    height,
    percent,
    speed
  } = opts;
  return await this.uiautomator2.jwproxy.command('/appium/gestures/pinch_open', 'POST', {
    origin: toOrigin(elementId),
    area: toRect(left, top, width, height),
    percent,
    speed
  });
};

commands.mobileSwipeGesture = async function mobileSwipeGesture(opts = {}) {
  const {
    elementId,
    left,
    top,
    width,
    height,
    direction,
    percent,
    speed
  } = opts;
  return await this.uiautomator2.jwproxy.command('/appium/gestures/swipe', 'POST', {
    origin: toOrigin(elementId),
    area: toRect(left, top, width, height),
    direction,
    percent,
    speed
  });
};

commands.mobileScrollGesture = async function mobileScrollGesture(opts = {}) {
  const {
    elementId,
    left,
    top,
    width,
    height,
    direction,
    percent,
    speed
  } = opts;
  return await this.uiautomator2.jwproxy.command('/appium/gestures/scroll', 'POST', {
    origin: toOrigin(elementId),
    area: toRect(left, top, width, height),
    direction,
    percent,
    speed
  });
};

commands.mobileScrollBackTo = async function (opts = {}) {
  const {
    elementId,
    elementToId
  } = opts;

  if (!elementId || !elementToId) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError(`Both elementId and elementToId arguments must be provided`);
  }

  return await this.uiautomator2.jwproxy.command(`/appium/element/${_appiumSupport.util.unwrapElement(elementId)}/scroll_to/${_appiumSupport.util.unwrapElement(elementToId)}`, 'POST', {});
};

commands.mobileScroll = async function (opts = {}) {
  const {
    element,
    strategy,
    selector,
    maxSwipes
  } = opts;

  if (!strategy || !selector) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError(`Both strategy and selector arguments must be provided`);
  }

  return await this.uiautomator2.jwproxy.command('/touch/scroll', 'POST', {
    params: {
      origin: toOrigin(element),
      strategy,
      selector,
      maxSwipes
    }
  });
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
