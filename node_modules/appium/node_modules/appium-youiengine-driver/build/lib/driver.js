"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YouiEngineDriver = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _desiredCaps = require("./desired-caps");

var _logger = _interopRequireDefault(require("./logger"));

var _commands = _interopRequireDefault(require("./commands"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncbox = require("asyncbox");

var _appiumUiautomator2Driver = _interopRequireDefault(require("appium-uiautomator2-driver"));

var _appiumXcuitestDriver = _interopRequireDefault(require("appium-xcuitest-driver"));

var _appiumMacDriver = _interopRequireDefault(require("appium-mac-driver"));

var _bluesky = _interopRequireDefault(require("./bluesky"));

var _tvos = _interopRequireDefault(require("./tvos"));

var _tvossimulator = _interopRequireDefault(require("./tvossimulator"));

var _yimac = _interopRequireDefault(require("./yimac"));

const TO_PROXY_COMMON = ['background', 'closeApp', 'getLog', 'getLogTypes', 'getOrientation', 'getStrings', 'installApp', 'launchApp', 'lock', 'removeApp', 'setOrientation'];
const TO_PROXY_IOS_ONLY = ['mobileShake'];
const TO_PROXY_ANDROID_ONLY = ['getNetworkConnection', 'isAppInstalled', 'isLocked', 'longPressKeyCode', 'pressKeyCode', 'setNetworkConnection', 'toggleLocationServices', 'unlock'];
const TO_PROXY_IOS = TO_PROXY_IOS_ONLY.concat(TO_PROXY_COMMON);
const TO_PROXY_ANDROID = TO_PROXY_ANDROID_ONLY.concat(TO_PROXY_COMMON);
const TO_PROXY_MAC = TO_PROXY_COMMON;
const MAX_RETRY_COUNT = 3;
const SOCKET_TIMEOUT = 10000;

class YouiEngineDriver extends _appiumBaseDriver.BaseDriver {
  resetYouiEngine() {
    this.ready = false;
    this.socket = null;
    this.locatorStrategies = ['id', 'name', 'class name', 'accessibility id'];
    this.proxydriver = null;
    this.proxyAllowList = '';
    this.device = null;
  }

  constructor(opts, shouldValidateCaps) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.desiredCapConstraints;
    this.settings = new _appiumBaseDriver.DeviceSettings({
      'TimeDilation': 1,
      'SourceTreeFilter': ''
    }, this.onSettingsUpdate.bind(this));
    this.resetYouiEngine();
  }

  validateLocatorStrategy(strategy) {
    super.validateLocatorStrategy(strategy, false);
  }

  async createSession(caps) {
    try {
      let [sessionId] = await super.createSession(caps);

      if (caps.platformName !== null) {
        let appPlatform = caps.platformName.toLowerCase();

        switch (appPlatform) {
          case 'ios':
          case 'tvos':
            await this.startXCUITestSession(caps);
            break;

          case 'android':
            await this.startAndroidSession(caps);
            break;

          case 'mac':
            await this.startMacSession(caps);
            break;

          case 'yimac':
            this.device = new _yimac.default();
            await this.device.startSession(caps);
            break;

          case 'bluesky':
            this.device = new _bluesky.default();
            await this.device.startSession(caps);
            break;

          case 'yitvos':
            {
              let shell = require('shelljs');

              if (shell.exec(`instruments -s devices | grep '${caps.udid}'`).includes('(Simulator)')) {
                this.device = new _tvossimulator.default();
              } else {
                this.device = new _tvos.default();
              }

              await this.device.startSession(caps, this);
              break;
            }

          case 'noproxy':
          case 'connecttoapp':
            break;

          default:
            _logger.default.errorAndThrow(`Unsupported platformName: ${caps.platformName}`);

        }
      }

      await this.connectSocket();

      if (caps.fullSourceTree === true) {} else {
        _logger.default.debug('Setting SourceTreeFilter to displayed elements only');

        await this.updateSettings({
          SourceTreeFilter: "[@isDisplayed='true']"
        });
      }

      return [sessionId, this.opts];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }

  async onSettingsUpdate(key, value) {
    if (key === 'TimeDilation') {
      await this.setTimeDilation(value);
    } else if (key === 'SourceTreeFilter') {
      await this.setSourceTreeFilter(value);
    }
  }

  async stop() {
    this.ready = false;
  }

  async deleteSession() {
    _logger.default.debug('Deleting YouiEngine session');

    if (this.caps.platformName !== null) {
      let appPlatform = this.caps.platformName.toLowerCase();

      if (['yimac', 'yitvos', 'bluesky'].includes(appPlatform)) {
        if (this.device) {
          this.device.endSession();
        }
      }
    }

    if (this.proxydriver !== null) {
      await this.proxydriver.deleteSession();
    }

    this.socket.end();
    this.socket.destroy();
    await super.deleteSession();
    await this.stop();
  }

  driverShouldDoProxyCmd(command) {
    if (!this.proxydriver) {
      return false;
    }

    for (let allowedCommand of this.proxyAllowList) {
      if (allowedCommand === command) {
        return true;
      }
    }

    return false;
  }

  async executeCommand(cmd, ...args) {
    if (cmd === 'receiveAsyncResponse') {
      _logger.default.debug(`Executing YouiEngineDriver response '${cmd}'`);

      return await this.receiveAsyncResponse(...args);
    } else if (this.ready) {
      if (this.driverShouldDoProxyCmd(cmd)) {
        _logger.default.debug(`Executing proxied WebDriver command '${cmd}'`);

        this.clearNewCommandTimeout();
        let result = this.proxydriver.executeCommand(cmd, ...args);
        this.startNewCommandTimeout(cmd);
        return result;
      } else {
        _logger.default.debug(`Executing YouiEngine WebDriver command '${cmd}'`);

        return await super.executeCommand(cmd, ...args);
      }
    } else {
      _logger.default.debug(`Command Error '${cmd}'`);

      throw new _appiumBaseDriver.errors.NoSuchDriverError(`Driver is not ready, cannot execute ${cmd}.`);
    }
  }

  validateDesiredCaps(caps) {
    let res = super.validateDesiredCaps(caps);

    if (!res) {
      return res;
    }

    if (!caps.youiEngineAppAddress) {
      let msg = 'The desired capabilities must include youiEngineAppAddress';

      _logger.default.errorAndThrow(msg);
    }

    if (caps.platformName.toLowerCase() !== 'connecttoapp' && caps.platformName.toLowerCase() !== 'noproxy') {
      if (!caps.app) {
        let msg = 'The desired capabilities must include app';

        _logger.default.errorAndThrow(msg);
      }

      const fs = require('fs');

      const path = require('path');

      if (!fs.existsSync(caps.app)) {
        let absolutepath = path.resolve(caps.app);
        let msg = 'The app could not be found in following location: ' + absolutepath;

        _logger.default.errorAndThrow(msg);
      }

      if (caps.deviceName.toLowerCase() === 'android') {
        if (!caps.avd) {
          let msg = 'The desired capabilities must include avd';

          _logger.default.errorAndThrow(msg);
        }
      }
    }

    return true;
  }

  async setupNewXCUITestDriver(caps) {
    let args = {
      javascriptEnabled: true
    };
    let driver = new _appiumXcuitestDriver.default(args);

    let capsCopy = _lodash.default.cloneDeep(caps);

    capsCopy.newCommandTimeout = 0;
    await driver.createSession(capsCopy);
    return driver;
  }

  async startXCUITestSession(caps) {
    _logger.default.info('Starting an IOS proxy session');

    this.proxyAllowList = TO_PROXY_IOS;
    this.proxydriver = await this.setupNewXCUITestDriver(caps);
  }

  async setupNewAndroidDriver(caps) {
    let androidArgs = { ...this.opts,
      javascriptEnabled: true
    };
    let androiddriver = new _appiumUiautomator2Driver.default(androidArgs);
    this.setSecurityOptions(androiddriver);

    let capsCopy = _lodash.default.cloneDeep(caps);

    capsCopy.newCommandTimeout = 0;
    await androiddriver.createSession(capsCopy);
    return androiddriver;
  }

  async startAndroidSession(caps) {
    _logger.default.info('Starting an Android proxy session');

    this.proxyAllowList = TO_PROXY_ANDROID;
    this.proxydriver = await this.setupNewAndroidDriver(caps);
  }

  async setupNewMacDriver(caps) {
    let macArgs = {
      javascriptEnabled: true
    };
    let macdriver = new _appiumMacDriver.default(macArgs);

    let capsCopy = _lodash.default.cloneDeep(caps);

    capsCopy.newCommandTimeout = 0;
    await macdriver.createSession(capsCopy);
    return macdriver;
  }

  async startMacSession(caps) {
    _logger.default.info('Starting a Mac proxy session');

    this.proxyAllowList = TO_PROXY_MAC;
    this.proxydriver = await this.setupNewMacDriver(caps);
  }

  setSecurityOptions(driver) {
    if (this.relaxedSecurityEnabled) {
      driver.relaxedSecurityEnabled = this.relaxedSecurityEnabled;
    }

    if (this.denyInsecure) {
      driver.denyInsecure = this.denyInsecure;
    }

    if (this.allowInsecure) {
      driver.allowInsecure = this.allowInsecure;
    }
  }

  async connectSocket() {
    let retryCount = 0;
    let connected = false;
    let errno = 'EOK';

    while (retryCount < MAX_RETRY_COUNT && !connected) {
      _logger.default.info('Attempt #' + (retryCount + 1));

      let connectedPromise = new _bluebird.default(resolve => {
        let net = require('net');

        let HOST = this.opts.youiEngineAppAddress;
        let PORT;

        if (this.caps.youiEngineAppPort) {
          PORT = this.caps.youiEngineAppPort;
        } else if (this.caps.platformName.toLowerCase() === 'yips4') {
          PORT = 40123;
        } else {
          PORT = 12345;
        }

        {
          _logger.default.info('Connecting to WebDriver: ' + HOST + ':' + PORT);
        }
        this.socket = new net.Socket();
        this.socket.setTimeout(SOCKET_TIMEOUT);
        this.socket.setKeepAlive(true, 1000);
        let socketClient = this.socket;

        let removeListenerHandler = function () {
          socketClient.removeListener('timeout', timeoutHandler);
          socketClient.removeListener('close', closeHandler);
          socketClient.removeListener('end', endHandler);
          socketClient.removeListener('error', errorHandler);
        };

        let errorHandler = function (ex) {
          _logger.default.error(ex);

          _logger.default.error('Check that WebDriver is enabled in application, if a device ensure the proper IP address is used.');

          removeListenerHandler();
          socketClient.destroy();
          errno = ex.errno;
          resolve(false);
        };

        this.socket.on('error', errorHandler);

        let closeHandler = function () {
          _logger.default.info('Connection closed');

          removeListenerHandler();
          socketClient.destroy();
          resolve(false);
        };

        this.socket.on('close', closeHandler);

        let timeoutHandler = function () {
          _logger.default.error('Connection timed out');

          removeListenerHandler();
          socketClient.destroy();
          resolve(false);
        };

        this.socket.on('timeout', timeoutHandler);
        this.socket.connect(PORT, HOST, function () {
          _logger.default.error('Connection established');

          removeListenerHandler();
          resolve(true);
        });

        let endHandler = function () {
          _logger.default.info('Connection ended');

          removeListenerHandler();
          socketClient.destroy();
          resolve(false);
        };

        this.socket.on('end', endHandler);
      });
      retryCount++;
      connected = await connectedPromise;

      if (!connected && errno === 'ECONNREFUSED') {
        _logger.default.debug('Connection refused, sleeping...');

        await (0, _asyncbox.sleep)(2000);
        errno = 'EOK';
      }

      if (!connected && retryCount === MAX_RETRY_COUNT - 1) {
        _logger.default.errorAndThrow('Failed to connect ' + MAX_RETRY_COUNT + ' times. Aborting.');
      }
    }

    retryCount = 0;
    this.ready = connected;
  }

  async executeSocketCommand(cmd) {
    if (!this.socket.writable) {
      _logger.default.info('Socket is not writable. Trying to reconnect.');

      await this.connectSocket();
    }

    let retryCount = 0;

    while (retryCount < MAX_RETRY_COUNT) {
      this.socket.setTimeout(SOCKET_TIMEOUT);
      let cmdPromise = new _bluebird.default(resolve => {
        _logger.default.debug('COMMAND: ' + cmd);

        let totaldata = [];
        let endMarker = new Buffer.from('youiend');
        let socketClient = this.socket;

        let removeListenerHandler = function () {
          socketClient.removeListener('data', dataHandler);
          socketClient.removeListener('timeout', timeoutHandler);
          socketClient.removeListener('error', errorHandler);
        };

        let timeoutHandler = function () {
          _logger.default.info('Timeout in execute command.');

          removeListenerHandler();
          resolve(false);
        };

        let errorHandler = function () {
          _logger.default.info('On error');

          removeListenerHandler();
          resolve(false);
        };

        let dataHandler = function (data) {
          if (data.length >= endMarker.length) {
            let dataend = new Buffer.alloc(endMarker.length);
            let startIndex = data.length - endMarker.length;
            data.copy(dataend, 0, startIndex, startIndex + endMarker.length);

            if (dataend.equals(endMarker)) {
              let lastData = data.slice(0, startIndex);
              totaldata.push(lastData);
              removeListenerHandler();
              resolve(Buffer.concat(totaldata));
            } else {
              totaldata.push(data);
            }
          }
        };

        socketClient.write(cmd + '\n', 'UTF8', () => {
          socketClient.on('data', dataHandler);
          socketClient.on('timeout', timeoutHandler);
          socketClient.on('error', errorHandler);
        });
      });
      let res = await cmdPromise;

      if (res === false) {
        retryCount++;

        _logger.default.info('Socket failed. Retrying: ' + retryCount);

        continue;
      } else {
        return res;
      }
    }

    throw new Error('ExecuteSocketCommand failed.');
  }

}

exports.YouiEngineDriver = YouiEngineDriver;

for (let [cmd, fn] of _lodash.default.toPairs(_commands.default)) {
  YouiEngineDriver.prototype[cmd] = fn;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOlsiVE9fUFJPWFlfQ09NTU9OIiwiVE9fUFJPWFlfSU9TX09OTFkiLCJUT19QUk9YWV9BTkRST0lEX09OTFkiLCJUT19QUk9YWV9JT1MiLCJjb25jYXQiLCJUT19QUk9YWV9BTkRST0lEIiwiVE9fUFJPWFlfTUFDIiwiTUFYX1JFVFJZX0NPVU5UIiwiU09DS0VUX1RJTUVPVVQiLCJZb3VpRW5naW5lRHJpdmVyIiwiQmFzZURyaXZlciIsInJlc2V0WW91aUVuZ2luZSIsInJlYWR5Iiwic29ja2V0IiwibG9jYXRvclN0cmF0ZWdpZXMiLCJwcm94eWRyaXZlciIsInByb3h5QWxsb3dMaXN0IiwiZGV2aWNlIiwiY29uc3RydWN0b3IiLCJvcHRzIiwic2hvdWxkVmFsaWRhdGVDYXBzIiwiZGVzaXJlZENhcENvbnN0cmFpbnRzIiwic2V0dGluZ3MiLCJEZXZpY2VTZXR0aW5ncyIsIm9uU2V0dGluZ3NVcGRhdGUiLCJiaW5kIiwidmFsaWRhdGVMb2NhdG9yU3RyYXRlZ3kiLCJzdHJhdGVneSIsImNyZWF0ZVNlc3Npb24iLCJjYXBzIiwic2Vzc2lvbklkIiwicGxhdGZvcm1OYW1lIiwiYXBwUGxhdGZvcm0iLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0WENVSVRlc3RTZXNzaW9uIiwic3RhcnRBbmRyb2lkU2Vzc2lvbiIsInN0YXJ0TWFjU2Vzc2lvbiIsIllpTWFjIiwic3RhcnRTZXNzaW9uIiwiQmx1ZVNreSIsInNoZWxsIiwicmVxdWlyZSIsImV4ZWMiLCJ1ZGlkIiwiaW5jbHVkZXMiLCJUdk9zU2ltdWxhdG9yIiwiVHZPcyIsImxvZ2dlciIsImVycm9yQW5kVGhyb3ciLCJjb25uZWN0U29ja2V0IiwiZnVsbFNvdXJjZVRyZWUiLCJkZWJ1ZyIsInVwZGF0ZVNldHRpbmdzIiwiU291cmNlVHJlZUZpbHRlciIsImUiLCJkZWxldGVTZXNzaW9uIiwia2V5IiwidmFsdWUiLCJzZXRUaW1lRGlsYXRpb24iLCJzZXRTb3VyY2VUcmVlRmlsdGVyIiwic3RvcCIsImVuZFNlc3Npb24iLCJlbmQiLCJkZXN0cm95IiwiZHJpdmVyU2hvdWxkRG9Qcm94eUNtZCIsImNvbW1hbmQiLCJhbGxvd2VkQ29tbWFuZCIsImV4ZWN1dGVDb21tYW5kIiwiY21kIiwiYXJncyIsInJlY2VpdmVBc3luY1Jlc3BvbnNlIiwiY2xlYXJOZXdDb21tYW5kVGltZW91dCIsInJlc3VsdCIsInN0YXJ0TmV3Q29tbWFuZFRpbWVvdXQiLCJlcnJvcnMiLCJOb1N1Y2hEcml2ZXJFcnJvciIsInZhbGlkYXRlRGVzaXJlZENhcHMiLCJyZXMiLCJ5b3VpRW5naW5lQXBwQWRkcmVzcyIsIm1zZyIsImFwcCIsImZzIiwicGF0aCIsImV4aXN0c1N5bmMiLCJhYnNvbHV0ZXBhdGgiLCJyZXNvbHZlIiwiZGV2aWNlTmFtZSIsImF2ZCIsInNldHVwTmV3WENVSVRlc3REcml2ZXIiLCJqYXZhc2NyaXB0RW5hYmxlZCIsImRyaXZlciIsIlhDVUlUZXN0RHJpdmVyIiwiY2Fwc0NvcHkiLCJfIiwiY2xvbmVEZWVwIiwibmV3Q29tbWFuZFRpbWVvdXQiLCJpbmZvIiwic2V0dXBOZXdBbmRyb2lkRHJpdmVyIiwiYW5kcm9pZEFyZ3MiLCJhbmRyb2lkZHJpdmVyIiwiQW5kcm9pZERyaXZlciIsInNldFNlY3VyaXR5T3B0aW9ucyIsInNldHVwTmV3TWFjRHJpdmVyIiwibWFjQXJncyIsIm1hY2RyaXZlciIsIk1hY0RyaXZlciIsInJlbGF4ZWRTZWN1cml0eUVuYWJsZWQiLCJkZW55SW5zZWN1cmUiLCJhbGxvd0luc2VjdXJlIiwicmV0cnlDb3VudCIsImNvbm5lY3RlZCIsImVycm5vIiwiY29ubmVjdGVkUHJvbWlzZSIsIkIiLCJuZXQiLCJIT1NUIiwiUE9SVCIsInlvdWlFbmdpbmVBcHBQb3J0IiwiU29ja2V0Iiwic2V0VGltZW91dCIsInNldEtlZXBBbGl2ZSIsInNvY2tldENsaWVudCIsInJlbW92ZUxpc3RlbmVySGFuZGxlciIsInJlbW92ZUxpc3RlbmVyIiwidGltZW91dEhhbmRsZXIiLCJjbG9zZUhhbmRsZXIiLCJlbmRIYW5kbGVyIiwiZXJyb3JIYW5kbGVyIiwiZXgiLCJlcnJvciIsIm9uIiwiY29ubmVjdCIsImV4ZWN1dGVTb2NrZXRDb21tYW5kIiwid3JpdGFibGUiLCJjbWRQcm9taXNlIiwidG90YWxkYXRhIiwiZW5kTWFya2VyIiwiQnVmZmVyIiwiZnJvbSIsImRhdGFIYW5kbGVyIiwiZGF0YSIsImxlbmd0aCIsImRhdGFlbmQiLCJhbGxvYyIsInN0YXJ0SW5kZXgiLCJjb3B5IiwiZXF1YWxzIiwibGFzdERhdGEiLCJzbGljZSIsInB1c2giLCJ3cml0ZSIsIkVycm9yIiwiZm4iLCJ0b1BhaXJzIiwiY29tbWFuZHMiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBTUEsTUFBTUEsZUFBZSxHQUFHLENBQ3RCLFlBRHNCLEVBRXRCLFVBRnNCLEVBR3RCLFFBSHNCLEVBSXRCLGFBSnNCLEVBS3RCLGdCQUxzQixFQU10QixZQU5zQixFQU90QixZQVBzQixFQVF0QixXQVJzQixFQVN0QixNQVRzQixFQVV0QixXQVZzQixFQVd0QixnQkFYc0IsQ0FBeEI7QUFjQSxNQUFNQyxpQkFBaUIsR0FBRyxDQUN4QixhQUR3QixDQUExQjtBQUlBLE1BQU1DLHFCQUFxQixHQUFHLENBQzVCLHNCQUQ0QixFQUU1QixnQkFGNEIsRUFHNUIsVUFINEIsRUFJNUIsa0JBSjRCLEVBSzVCLGNBTDRCLEVBTTVCLHNCQU40QixFQU81Qix3QkFQNEIsRUFRNUIsUUFSNEIsQ0FBOUI7QUFXQSxNQUFNQyxZQUFZLEdBQUdGLGlCQUFpQixDQUFDRyxNQUFsQixDQUF5QkosZUFBekIsQ0FBckI7QUFDQSxNQUFNSyxnQkFBZ0IsR0FBR0gscUJBQXFCLENBQUNFLE1BQXRCLENBQTZCSixlQUE3QixDQUF6QjtBQUNBLE1BQU1NLFlBQVksR0FBR04sZUFB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LEtBQWIsQ0FBbUJsRixHQUFHLEdBQUcsSUFBekIsRUFBK0IsTUFBL0IsRUFBdUMsTUFBTTtBQUMzQ3FELFVBQUFBLFlBQVksQ0FBQ1MsRUFBYixDQUFnQixNQUFoQixFQUF3QlMsV0FBeEI7QUFDQWxCLFVBQUFBLFlBQVksQ0FBQ1MsRUFBYixDQUFnQixTQUFoQixFQUEyQk4sY0FBM0I7QUFDQUgsVUFBQUEsWUFBWSxDQUFDUyxFQUFiLENBQWdCLE9BQWhCLEVBQXlCSCxZQUF6QjtBQUNELFNBSkQ7QUFLRCxPQXJEZ0IsQ0FBakI7QUFzREEsVUFBSWxELEdBQUcsR0FBRyxNQUFNeUQsVUFBaEI7O0FBQ0EsVUFBSXpELEdBQUcsS0FBSyxLQUFaLEVBQW1CO0FBQ2pCZ0MsUUFBQUEsVUFBVTs7QUFDVjlELHdCQUFPaUQsSUFBUCxDQUFZLDhCQUE4QmEsVUFBMUM7O0FBQ0E7QUFDRCxPQUpELE1BSU87QUFDTCxlQUFPaEMsR0FBUDtBQUNEO0FBQ0Y7O0FBQ0QsVUFBTSxJQUFJMEUsS0FBSixDQUFVLDhCQUFWLENBQU47QUFDRDs7QUFsY3VDOzs7O0FBcWMxQyxLQUFLLElBQUksQ0FBQ25GLEdBQUQsRUFBTW9GLEVBQU4sQ0FBVCxJQUFzQjNELGdCQUFFNEQsT0FBRixDQUFVQyxpQkFBVixDQUF0QixFQUEyQztBQUN6Q2pKLEVBQUFBLGdCQUFnQixDQUFDa0osU0FBakIsQ0FBMkJ2RixHQUEzQixJQUFrQ29GLEVBQWxDO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRHJpdmVyLCBEZXZpY2VTZXR0aW5ncywgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCB7IGRlc2lyZWRDYXBDb25zdHJhaW50cyB9IGZyb20gJy4vZGVzaXJlZC1jYXBzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IGNvbW1hbmRzIGZyb20gJy4vY29tbWFuZHMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSAnYXN5bmNib3gnO1xuXG4vLyBmb3IgcHJveGllc1xuaW1wb3J0IEFuZHJvaWREcml2ZXIgZnJvbSAnYXBwaXVtLXVpYXV0b21hdG9yMi1kcml2ZXInO1xuaW1wb3J0IFhDVUlUZXN0RHJpdmVyIGZyb20gJ2FwcGl1bS14Y3VpdGVzdC1kcml2ZXInO1xuaW1wb3J0IE1hY0RyaXZlciBmcm9tICdhcHBpdW0tbWFjLWRyaXZlcic7XG5pbXBvcnQgQmx1ZVNreSBmcm9tICcuL2JsdWVza3knO1xuaW1wb3J0IFR2T3MgZnJvbSAnLi90dm9zJztcbmltcG9ydCBUdk9zU2ltdWxhdG9yIGZyb20gJy4vdHZvc3NpbXVsYXRvcic7XG5pbXBvcnQgWWlNYWMgZnJvbSAnLi95aW1hYyc7XG5cblxuLy8gQWRkIGNvbW1hbmRzIGZyb20gdGhlIGZvbGxvd2luZyBsb2NhdGlvbiB0aGF0IHNob3VsZCBiZSBtYXBwZWQgdG8gZXhpc3RpbmcgZHJpdmVyczpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBpdW0vYXBwaXVtLWJhc2UtZHJpdmVyL2Jsb2IvbWFzdGVyL2xpYi9tanNvbndwL3JvdXRlcy5qc1xuXG5jb25zdCBUT19QUk9YWV9DT01NT04gPSBbXG4gICdiYWNrZ3JvdW5kJyxcbiAgJ2Nsb3NlQXBwJyxcbiAgJ2dldExvZycsXG4gICdnZXRMb2dUeXBlcycsXG4gICdnZXRPcmllbnRhdGlvbicsXG4gICdnZXRTdHJpbmdzJyxcbiAgJ2luc3RhbGxBcHAnLFxuICAnbGF1bmNoQXBwJyxcbiAgJ2xvY2snLFxuICAncmVtb3ZlQXBwJyxcbiAgJ3NldE9yaWVudGF0aW9uJyxcbl07XG5cbmNvbnN0IFRPX1BST1hZX0lPU19PTkxZID0gW1xuICAnbW9iaWxlU2hha2UnLFxuXTtcblxuY29uc3QgVE9fUFJPWFlfQU5EUk9JRF9PTkxZID0gW1xuICAnZ2V0TmV0d29ya0Nvbm5lY3Rpb24nLFxuICAnaXNBcHBJbnN0YWxsZWQnLFxuICAnaXNMb2NrZWQnLFxuICAnbG9uZ1ByZXNzS2V5Q29kZScsXG4gICdwcmVzc0tleUNvZGUnLFxuICAnc2V0TmV0d29ya0Nvbm5lY3Rpb24nLFxuICAndG9nZ2xlTG9jYXRpb25TZXJ2aWNlcycsXG4gICd1bmxvY2snLFxuXTtcblxuY29uc3QgVE9fUFJPWFlfSU9TID0gVE9fUFJPWFlfSU9TX09OTFkuY29uY2F0KFRPX1BST1hZX0NPTU1PTik7XG5jb25zdCBUT19QUk9YWV9BTkRST0lEID0gVE9fUFJPWFlfQU5EUk9JRF9PTkxZLmNvbmNhdChUT19QUk9YWV9DT01NT04pO1xuY29uc3QgVE9fUFJPWFlfTUFDID0gVE9fUFJPWFlfQ09NTU9OO1xuXG5jb25zdCBNQVhfUkVUUllfQ09VTlQgPSAzO1xuY29uc3QgU09DS0VUX1RJTUVPVVQgPSAxMDAwMDtcblxuY2xhc3MgWW91aUVuZ2luZURyaXZlciBleHRlbmRzIEJhc2VEcml2ZXIge1xuICByZXNldFlvdWlFbmdpbmUgKCkge1xuXG4gICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICAgIHRoaXMuc29ja2V0ID0gbnVsbDtcbiAgICB0aGlzLmxvY2F0b3JTdHJhdGVnaWVzID0gWydpZCcsICduYW1lJywgJ2NsYXNzIG5hbWUnLCAnYWNjZXNzaWJpbGl0eSBpZCddO1xuICAgIHRoaXMucHJveHlkcml2ZXIgPSBudWxsO1xuICAgIHRoaXMucHJveHlBbGxvd0xpc3QgPSAnJztcbiAgICB0aGlzLmRldmljZSA9IG51bGw7XG4gIH1cblxuICBjb25zdHJ1Y3RvciAob3B0cywgc2hvdWxkVmFsaWRhdGVDYXBzKSB7XG4gICAgc3VwZXIob3B0cywgc2hvdWxkVmFsaWRhdGVDYXBzKTtcblxuICAgIHRoaXMuZGVzaXJlZENhcENvbnN0cmFpbnRzID0gZGVzaXJlZENhcENvbnN0cmFpbnRzO1xuICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgRGV2aWNlU2V0dGluZ3MoeydUaW1lRGlsYXRpb24nOiAxLCAnU291cmNlVHJlZUZpbHRlcic6ICcnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNldHRpbmdzVXBkYXRlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucmVzZXRZb3VpRW5naW5lKCk7XG5cbiAgfVxuXG4gIHZhbGlkYXRlTG9jYXRvclN0cmF0ZWd5IChzdHJhdGVneSkge1xuICAgIHN1cGVyLnZhbGlkYXRlTG9jYXRvclN0cmF0ZWd5KHN0cmF0ZWd5LCBmYWxzZSk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVTZXNzaW9uIChjYXBzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBbc2Vzc2lvbklkXSA9IGF3YWl0IHN1cGVyLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG5cbiAgICAgIC8vIHNldHVwIHByb3hpZXMgLSBpZiBwbGF0Zm9ybU5hbWUgaXMgbm90IGVtcHR5LCBtYWtlIGl0IGxlc3MgY2FzZSBzZW5zaXRpdmVcbiAgICAgIGlmIChjYXBzLnBsYXRmb3JtTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICBsZXQgYXBwUGxhdGZvcm0gPSBjYXBzLnBsYXRmb3JtTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBzd2l0Y2ggKGFwcFBsYXRmb3JtKSB7XG4gICAgICAgICAgY2FzZSAnaW9zJzpcbiAgICAgICAgICBjYXNlICd0dm9zJzpcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RhcnRYQ1VJVGVzdFNlc3Npb24oY2Fwcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdhbmRyb2lkJzpcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RhcnRBbmRyb2lkU2Vzc2lvbihjYXBzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ21hYyc6XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN0YXJ0TWFjU2Vzc2lvbihjYXBzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3lpbWFjJzpcbiAgICAgICAgICAgIHRoaXMuZGV2aWNlID0gbmV3IFlpTWFjKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRldmljZS5zdGFydFNlc3Npb24oY2Fwcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdibHVlc2t5JzpcbiAgICAgICAgICAgIHRoaXMuZGV2aWNlID0gbmV3IEJsdWVTa3koKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZGV2aWNlLnN0YXJ0U2Vzc2lvbihjYXBzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3lpdHZvcyc6IHtcbiAgICAgICAgICAgIGxldCBzaGVsbCA9IHJlcXVpcmUoJ3NoZWxsanMnKTtcbiAgICAgICAgICAgIGlmIChzaGVsbC5leGVjKGBpbnN0cnVtZW50cyAtcyBkZXZpY2VzIHwgZ3JlcCAnJHtjYXBzLnVkaWR9J2ApLmluY2x1ZGVzKCcoU2ltdWxhdG9yKScpKSB7XG4gICAgICAgICAgICAgIHRoaXMuZGV2aWNlID0gbmV3IFR2T3NTaW11bGF0b3IoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuZGV2aWNlID0gbmV3IFR2T3MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZGV2aWNlLnN0YXJ0U2Vzc2lvbihjYXBzLCB0aGlzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICdub3Byb3h5JzpcbiAgICAgICAgICBjYXNlICdjb25uZWN0dG9hcHAnOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KGBVbnN1cHBvcnRlZCBwbGF0Zm9ybU5hbWU6ICR7Y2Fwcy5wbGF0Zm9ybU5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMuY29ubmVjdFNvY2tldCgpO1xuXG4gICAgICBpZiAoY2Fwcy5mdWxsU291cmNlVHJlZSA9PT0gdHJ1ZSkge1xuICAgICAgICAvL0RvIG5vdCBzZXQgZmlsdGVyXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ1NldHRpbmcgU291cmNlVHJlZUZpbHRlciB0byBkaXNwbGF5ZWQgZWxlbWVudHMgb25seScpO1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVNldHRpbmdzKHtTb3VyY2VUcmVlRmlsdGVyOiBcIltAaXNEaXNwbGF5ZWQ9J3RydWUnXVwifSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbc2Vzc2lvbklkLCB0aGlzLm9wdHNdO1xuXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXdhaXQgdGhpcy5kZWxldGVTZXNzaW9uKCk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG9uU2V0dGluZ3NVcGRhdGUgKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ID09PSAnVGltZURpbGF0aW9uJykge1xuICAgICAgYXdhaXQgdGhpcy5zZXRUaW1lRGlsYXRpb24odmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnU291cmNlVHJlZUZpbHRlcicpIHtcbiAgICAgIGF3YWl0IHRoaXMuc2V0U291cmNlVHJlZUZpbHRlcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc3RvcCAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHRoaXMucmVhZHkgPSBmYWxzZTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVNlc3Npb24gKCkge1xuICAgIGxvZ2dlci5kZWJ1ZygnRGVsZXRpbmcgWW91aUVuZ2luZSBzZXNzaW9uJyk7XG5cbiAgICBpZiAodGhpcy5jYXBzLnBsYXRmb3JtTmFtZSAhPT0gbnVsbCkge1xuICAgICAgbGV0IGFwcFBsYXRmb3JtID0gdGhpcy5jYXBzLnBsYXRmb3JtTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBpZiAoWyd5aW1hYycsICd5aXR2b3MnLCAnYmx1ZXNreSddLmluY2x1ZGVzKGFwcFBsYXRmb3JtKSkge1xuICAgICAgICBpZiAodGhpcy5kZXZpY2UpIHtcbiAgICAgICAgICB0aGlzLmRldmljZS5lbmRTZXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm94eWRyaXZlciAhPT0gbnVsbCkge1xuICAgICAgYXdhaXQgdGhpcy5wcm94eWRyaXZlci5kZWxldGVTZXNzaW9uKCk7XG4gICAgfVxuICAgIHRoaXMuc29ja2V0LmVuZCgpO1xuICAgIHRoaXMuc29ja2V0LmRlc3Ryb3koKTtcbiAgICBhd2FpdCBzdXBlci5kZWxldGVTZXNzaW9uKCk7XG4gICAgYXdhaXQgdGhpcy5zdG9wKCk7XG4gIH1cblxuICBkcml2ZXJTaG91bGREb1Byb3h5Q21kIChjb21tYW5kKSB7XG4gICAgaWYgKCF0aGlzLnByb3h5ZHJpdmVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gb25seSBhbGxvdyB3aGl0ZSBsaXN0ZWQgY29tbWFuZHNcbiAgICBmb3IgKGxldCBhbGxvd2VkQ29tbWFuZCBvZiB0aGlzLnByb3h5QWxsb3dMaXN0KSB7XG4gICAgICBpZiAoYWxsb3dlZENvbW1hbmQgPT09IGNvbW1hbmQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGVDb21tYW5kIChjbWQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoY21kID09PSAncmVjZWl2ZUFzeW5jUmVzcG9uc2UnKSB7XG4gICAgICBsb2dnZXIuZGVidWcoYEV4ZWN1dGluZyBZb3VpRW5naW5lRHJpdmVyIHJlc3BvbnNlICcke2NtZH0nYCk7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZWNlaXZlQXN5bmNSZXNwb25zZSguLi5hcmdzKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucmVhZHkpIHtcblxuICAgICAgaWYgKHRoaXMuZHJpdmVyU2hvdWxkRG9Qcm94eUNtZChjbWQpKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgRXhlY3V0aW5nIHByb3hpZWQgV2ViRHJpdmVyIGNvbW1hbmQgJyR7Y21kfSdgKTtcblxuICAgICAgICAvLyBUaGVyZSBhcmUgMiBDb21tYW5kVGltZW91dCAoWW91aUVuZ2luZURyaXZlciBhbmQgcHJveHkpXG4gICAgICAgIC8vIE9ubHkgWW91aUVuZ2luZURyaXZlciBDb21tYW5kVGltZW91dCBpcyB1c2VkOyBQcm94eSBpcyBkaXNhYmxlZFxuICAgICAgICAvLyBBbGwgcHJveHkgY29tbWFuZHMgbmVlZHMgdG8gcmVzZXQgdGhlIFlvdWlFbmdpbmVEcml2ZXIgQ29tbWFuZFRpbWVvdXRcbiAgICAgICAgLy8gSGVyZSB3ZSBtYW51YWxseSByZXNldCB0aGUgWW91aUVuZ2luZURyaXZlciBDb21tYW5kVGltZW91dCBmb3IgY29tbWFuZHMgdGhhdCBnb2UgdG8gcHJveHkuXG4gICAgICAgIHRoaXMuY2xlYXJOZXdDb21tYW5kVGltZW91dCgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5wcm94eWRyaXZlci5leGVjdXRlQ29tbWFuZChjbWQsIC4uLmFyZ3MpO1xuICAgICAgICB0aGlzLnN0YXJ0TmV3Q29tbWFuZFRpbWVvdXQoY21kKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgRXhlY3V0aW5nIFlvdWlFbmdpbmUgV2ViRHJpdmVyIGNvbW1hbmQgJyR7Y21kfSdgKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKGNtZCwgLi4uYXJncyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhgQ29tbWFuZCBFcnJvciAnJHtjbWR9J2ApO1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob1N1Y2hEcml2ZXJFcnJvcihgRHJpdmVyIGlzIG5vdCByZWFkeSwgY2Fubm90IGV4ZWN1dGUgJHtjbWR9LmApO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlRGVzaXJlZENhcHMgKGNhcHMpIHtcbiAgICAvLyBjaGVjayB3aXRoIHRoZSBiYXNlIGNsYXNzLCBhbmQgcmV0dXJuIGlmIGl0IGZhaWxzXG4gICAgbGV0IHJlcyA9IHN1cGVyLnZhbGlkYXRlRGVzaXJlZENhcHMoY2Fwcyk7XG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIGNhcGFiaWxpdGllcyBoYXMgeW91aUVuZ2luZUFwcEFkZHJlc3NcbiAgICBpZiAoIWNhcHMueW91aUVuZ2luZUFwcEFkZHJlc3MpIHtcbiAgICAgIGxldCBtc2cgPSAnVGhlIGRlc2lyZWQgY2FwYWJpbGl0aWVzIG11c3QgaW5jbHVkZSB5b3VpRW5naW5lQXBwQWRkcmVzcyc7XG4gICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhtc2cpO1xuICAgIH1cblxuICAgIC8vIEFwcCBpcyBiZWluZyBsYXVuY2hlZFxuICAgIGlmIChjYXBzLnBsYXRmb3JtTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnY29ubmVjdHRvYXBwJyAmJiBjYXBzLnBsYXRmb3JtTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnbm9wcm94eScpIHtcblxuICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIGNhcGFiaWxpdGllcyBoYXMgYXBwXG4gICAgICBpZiAoIWNhcHMuYXBwKSB7XG4gICAgICAgIGxldCBtc2cgPSAnVGhlIGRlc2lyZWQgY2FwYWJpbGl0aWVzIG11c3QgaW5jbHVkZSBhcHAnO1xuICAgICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhtc2cpO1xuICAgICAgfVxuICAgICAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuICAgICAgY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbiAgICAgIGlmICghZnMuZXhpc3RzU3luYyhjYXBzLmFwcCkpIHtcbiAgICAgICAgbGV0IGFic29sdXRlcGF0aCA9IHBhdGgucmVzb2x2ZShjYXBzLmFwcCk7XG4gICAgICAgIGxldCBtc2cgPSAnVGhlIGFwcCBjb3VsZCBub3QgYmUgZm91bmQgaW4gZm9sbG93aW5nIGxvY2F0aW9uOiAnICsgYWJzb2x1dGVwYXRoO1xuICAgICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhtc2cpO1xuICAgICAgfVxuXG4gICAgICAvL0FuZHJvaWQgZW11bGF0b3Igd2l0aCBwcm94eVxuICAgICAgaWYgKGNhcHMuZGV2aWNlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYW5kcm9pZCcpIHtcbiAgICAgICAgaWYgKCFjYXBzLmF2ZCkge1xuICAgICAgICAgIGxldCBtc2cgPSAnVGhlIGRlc2lyZWQgY2FwYWJpbGl0aWVzIG11c3QgaW5jbHVkZSBhdmQnO1xuICAgICAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KG1zZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaW5hbGx5LCByZXR1cm4gdHJ1ZSBzaW5jZSB0aGUgc3VwZXJjbGFzcyBjaGVjayBwYXNzZWQsIGFzIGRpZCB0aGlzXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBzZXR1cE5ld1hDVUlUZXN0RHJpdmVyIChjYXBzKSB7XG4gICAgbGV0IGFyZ3MgPSB7XG4gICAgICBqYXZhc2NyaXB0RW5hYmxlZDogdHJ1ZSxcbiAgICB9O1xuXG4gICAgbGV0IGRyaXZlciA9IG5ldyBYQ1VJVGVzdERyaXZlcihhcmdzKTtcblxuICAgIGxldCBjYXBzQ29weSA9IF8uY2xvbmVEZWVwKGNhcHMpO1xuICAgIC8vIERpc2FibGluZyB0aGUgcHJveHkgQ29tbWFuZFRpbWVvdXQgaW4gdGhlIGlPUyBkcml2ZXIgc2luY2Ugd2UgYXJlIG5vdyBoYW5kbGluZyBpdCBpbiB0aGUgWW91aUVuZ2luZSBEcml2ZXJcbiAgICBjYXBzQ29weS5uZXdDb21tYW5kVGltZW91dCA9IDA7XG4gICAgYXdhaXQgZHJpdmVyLmNyZWF0ZVNlc3Npb24oY2Fwc0NvcHkpO1xuXG4gICAgcmV0dXJuIGRyaXZlcjtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0WENVSVRlc3RTZXNzaW9uIChjYXBzKSB7XG4gICAgbG9nZ2VyLmluZm8oJ1N0YXJ0aW5nIGFuIElPUyBwcm94eSBzZXNzaW9uJyk7XG4gICAgdGhpcy5wcm94eUFsbG93TGlzdCA9IFRPX1BST1hZX0lPUztcblxuICAgIHRoaXMucHJveHlkcml2ZXIgPSBhd2FpdCB0aGlzLnNldHVwTmV3WENVSVRlc3REcml2ZXIoY2Fwcyk7XG4gIH1cblxuICBhc3luYyBzZXR1cE5ld0FuZHJvaWREcml2ZXIgKGNhcHMpIHtcbiAgICBsZXQgYW5kcm9pZEFyZ3MgPSB7XG4gICAgICAuLi50aGlzLm9wdHMsXG4gICAgICBqYXZhc2NyaXB0RW5hYmxlZDogdHJ1ZSxcbiAgICB9O1xuICAgIGxldCBhbmRyb2lkZHJpdmVyID0gbmV3IEFuZHJvaWREcml2ZXIoYW5kcm9pZEFyZ3MpO1xuICAgIHRoaXMuc2V0U2VjdXJpdHlPcHRpb25zKGFuZHJvaWRkcml2ZXIpO1xuXG4gICAgbGV0IGNhcHNDb3B5ID0gXy5jbG9uZURlZXAoY2Fwcyk7XG4gICAgLy8gRGlzYWJsaW5nIHRoZSBwcm94eSBDb21tYW5kVGltZW91dCBpbiB0aGUgQW5kcm9pZCBkcml2ZXIgc2luY2Ugd2UgYXJlIG5vdyBoYW5kbGluZyBpdCBpbiB0aGUgWW91aUVuZ2luZSBEcml2ZXJcbiAgICBjYXBzQ29weS5uZXdDb21tYW5kVGltZW91dCA9IDA7XG5cbiAgICBhd2FpdCBhbmRyb2lkZHJpdmVyLmNyZWF0ZVNlc3Npb24oY2Fwc0NvcHkpO1xuXG4gICAgcmV0dXJuIGFuZHJvaWRkcml2ZXI7XG4gIH1cblxuICBhc3luYyBzdGFydEFuZHJvaWRTZXNzaW9uIChjYXBzKSB7XG4gICAgbG9nZ2VyLmluZm8oJ1N0YXJ0aW5nIGFuIEFuZHJvaWQgcHJveHkgc2Vzc2lvbicpO1xuICAgIHRoaXMucHJveHlBbGxvd0xpc3QgPSBUT19QUk9YWV9BTkRST0lEO1xuXG4gICAgdGhpcy5wcm94eWRyaXZlciA9IGF3YWl0IHRoaXMuc2V0dXBOZXdBbmRyb2lkRHJpdmVyKGNhcHMpO1xuICB9XG5cbiAgYXN5bmMgc2V0dXBOZXdNYWNEcml2ZXIgKGNhcHMpIHtcbiAgICBsZXQgbWFjQXJncyA9IHtcbiAgICAgIGphdmFzY3JpcHRFbmFibGVkOiB0cnVlXG4gICAgfTtcbiAgICBsZXQgbWFjZHJpdmVyID0gbmV3IE1hY0RyaXZlcihtYWNBcmdzKTtcbiAgICBsZXQgY2Fwc0NvcHkgPSBfLmNsb25lRGVlcChjYXBzKTtcbiAgICAvLyBEaXNhYmxpbmcgdGhlIHByb3h5IENvbW1hbmRUaW1lb3V0IGluIHRoZSBwcm94aWVkIGRyaXZlciBzaW5jZSB3ZSBhcmUgbm93IGhhbmRsaW5nIGl0IGluIHRoZSBZb3VpRW5naW5lIERyaXZlclxuICAgIGNhcHNDb3B5Lm5ld0NvbW1hbmRUaW1lb3V0ID0gMDtcblxuICAgIGF3YWl0IG1hY2RyaXZlci5jcmVhdGVTZXNzaW9uKGNhcHNDb3B5KTtcblxuICAgIHJldHVybiBtYWNkcml2ZXI7XG4gIH1cblxuICBhc3luYyBzdGFydE1hY1Nlc3Npb24gKGNhcHMpIHtcbiAgICBsb2dnZXIuaW5mbygnU3RhcnRpbmcgYSBNYWMgcHJveHkgc2Vzc2lvbicpO1xuICAgIHRoaXMucHJveHlBbGxvd0xpc3QgPSBUT19QUk9YWV9NQUM7XG5cbiAgICB0aGlzLnByb3h5ZHJpdmVyID0gYXdhaXQgdGhpcy5zZXR1cE5ld01hY0RyaXZlcihjYXBzKTtcbiAgfVxuXG4gIHNldFNlY3VyaXR5T3B0aW9ucyAoZHJpdmVyKSB7XG4gICAgaWYgKHRoaXMucmVsYXhlZFNlY3VyaXR5RW5hYmxlZCkge1xuICAgICAgZHJpdmVyLnJlbGF4ZWRTZWN1cml0eUVuYWJsZWQgPSB0aGlzLnJlbGF4ZWRTZWN1cml0eUVuYWJsZWQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGVueUluc2VjdXJlKSB7XG4gICAgICBkcml2ZXIuZGVueUluc2VjdXJlID0gdGhpcy5kZW55SW5zZWN1cmU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWxsb3dJbnNlY3VyZSkge1xuICAgICAgZHJpdmVyLmFsbG93SW5zZWN1cmUgPSB0aGlzLmFsbG93SW5zZWN1cmU7XG4gICAgfVxuICB9XG5cbiAgLy8gU09DS0VUU1xuICBhc3luYyBjb25uZWN0U29ja2V0ICgpIHtcbiAgICBsZXQgcmV0cnlDb3VudCA9IDA7XG4gICAgbGV0IGNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIGxldCBlcnJubyA9ICdFT0snO1xuICAgIHdoaWxlIChyZXRyeUNvdW50IDwgTUFYX1JFVFJZX0NPVU5UICYmICFjb25uZWN0ZWQpIHtcbiAgICAgIGxvZ2dlci5pbmZvKCdBdHRlbXB0ICMnICsgKHJldHJ5Q291bnQgKyAxKSk7XG5cbiAgICAgIGxldCBjb25uZWN0ZWRQcm9taXNlID0gbmV3IEIoKHJlc29sdmUpID0+IHtcbiAgICAgICAgbGV0IG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuXG4gICAgICAgIGxldCBIT1NUID0gdGhpcy5vcHRzLnlvdWlFbmdpbmVBcHBBZGRyZXNzO1xuICAgICAgICBsZXQgUE9SVDtcblxuICAgICAgICBpZiAodGhpcy5jYXBzLnlvdWlFbmdpbmVBcHBQb3J0KSB7XG4gICAgICAgICAgUE9SVCA9IHRoaXMuY2Fwcy55b3VpRW5naW5lQXBwUG9ydDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNhcHMucGxhdGZvcm1OYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd5aXBzNCcpIHtcbiAgICAgICAgICBQT1JUID0gNDAxMjM7IC8vZGVmYXVsdCBwb3J0IGZvciBQUzRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBQT1JUID0gMTIzNDU7IC8vZGVmYXVsdCBwb3J0XG4gICAgICAgIH1cbiAgICAgICAge2xvZ2dlci5pbmZvKCdDb25uZWN0aW5nIHRvIFdlYkRyaXZlcjogJyArIEhPU1QgKyAnOicgKyBQT1JUKTt9XG5cbiAgICAgICAgdGhpcy5zb2NrZXQgPSBuZXcgbmV0LlNvY2tldCgpO1xuICAgICAgICB0aGlzLnNvY2tldC5zZXRUaW1lb3V0KFNPQ0tFVF9USU1FT1VUKTtcbiAgICAgICAgdGhpcy5zb2NrZXQuc2V0S2VlcEFsaXZlKHRydWUsIDEwMDApO1xuXG4gICAgICAgIGxldCBzb2NrZXRDbGllbnQgPSB0aGlzLnNvY2tldDtcblxuICAgICAgICBsZXQgcmVtb3ZlTGlzdGVuZXJIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNvY2tldENsaWVudC5yZW1vdmVMaXN0ZW5lcigndGltZW91dCcsIHRpbWVvdXRIYW5kbGVyKTtcbiAgICAgICAgICBzb2NrZXRDbGllbnQucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xvc2VIYW5kbGVyKTtcbiAgICAgICAgICBzb2NrZXRDbGllbnQucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGVuZEhhbmRsZXIpO1xuICAgICAgICAgIHNvY2tldENsaWVudC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEFkZCBhbiAnZXJyb3InIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBjbGllbnQgc29ja2V0XG4gICAgICAgIGxldCBlcnJvckhhbmRsZXIgPSBmdW5jdGlvbiAoZXgpIHtcbiAgICAgICAgICBsb2dnZXIuZXJyb3IoZXgpO1xuICAgICAgICAgIGxvZ2dlci5lcnJvcignQ2hlY2sgdGhhdCBXZWJEcml2ZXIgaXMgZW5hYmxlZCBpbiBhcHBsaWNhdGlvbiwgaWYgYSBkZXZpY2UgZW5zdXJlIHRoZSBwcm9wZXIgSVAgYWRkcmVzcyBpcyB1c2VkLicpO1xuICAgICAgICAgIHJlbW92ZUxpc3RlbmVySGFuZGxlcigpO1xuICAgICAgICAgIHNvY2tldENsaWVudC5kZXN0cm95KCk7XG4gICAgICAgICAgZXJybm8gPSBleC5lcnJubztcbiAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zb2NrZXQub24gKCdlcnJvcicsIGVycm9ySGFuZGxlcik7XG4gICAgICAgIC8vIEFkZCBhICdjbG9zZScgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGNsaWVudCBzb2NrZXRcbiAgICAgICAgbGV0IGNsb3NlSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsb2dnZXIuaW5mbygnQ29ubmVjdGlvbiBjbG9zZWQnKTtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lckhhbmRsZXIoKTtcbiAgICAgICAgICBzb2NrZXRDbGllbnQuZGVzdHJveSgpO1xuICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNvY2tldC5vbiAoJ2Nsb3NlJywgY2xvc2VIYW5kbGVyKTtcbiAgICAgICAgLy8gQWRkIGEgJ3RpbWVvdXQnIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBjbGllbnQgc29ja2V0XG4gICAgICAgIGxldCB0aW1lb3V0SGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsb2dnZXIuZXJyb3IoJ0Nvbm5lY3Rpb24gdGltZWQgb3V0Jyk7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXJIYW5kbGVyKCk7XG4gICAgICAgICAgc29ja2V0Q2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zb2NrZXQub24gKCd0aW1lb3V0JywgdGltZW91dEhhbmRsZXIpO1xuICAgICAgICB0aGlzLnNvY2tldC5jb25uZWN0IChQT1JULCBIT1NULCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKCdDb25uZWN0aW9uIGVzdGFibGlzaGVkJyk7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXJIYW5kbGVyKCk7XG4gICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBlbmRIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxvZ2dlci5pbmZvKCdDb25uZWN0aW9uIGVuZGVkJyk7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXJIYW5kbGVyKCk7XG4gICAgICAgICAgc29ja2V0Q2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zb2NrZXQub24oJ2VuZCcsIGVuZEhhbmRsZXIpO1xuICAgICAgfSk7XG4gICAgICByZXRyeUNvdW50Kys7XG4gICAgICBjb25uZWN0ZWQgPSBhd2FpdCBjb25uZWN0ZWRQcm9taXNlO1xuXG4gICAgICBpZiAoIWNvbm5lY3RlZCAmJiBlcnJubyA9PT0gJ0VDT05OUkVGVVNFRCcpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdDb25uZWN0aW9uIHJlZnVzZWQsIHNsZWVwaW5nLi4uJyk7XG4gICAgICAgIGF3YWl0IHNsZWVwKDIwMDApO1xuICAgICAgICBlcnJubyA9ICdFT0snO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNvbm5lY3RlZCAmJiByZXRyeUNvdW50ID09PSAoTUFYX1JFVFJZX0NPVU5UIC0gMSkpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yQW5kVGhyb3coJ0ZhaWxlZCB0byBjb25uZWN0ICcgKyBNQVhfUkVUUllfQ09VTlQgKyAnIHRpbWVzLiBBYm9ydGluZy4nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0cnlDb3VudCA9IDA7XG4gICAgdGhpcy5yZWFkeSA9IGNvbm5lY3RlZDtcbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGVTb2NrZXRDb21tYW5kIChjbWQpIHtcblxuICAgIGlmICghdGhpcy5zb2NrZXQud3JpdGFibGUpIHtcbiAgICAgIGxvZ2dlci5pbmZvKCdTb2NrZXQgaXMgbm90IHdyaXRhYmxlLiBUcnlpbmcgdG8gcmVjb25uZWN0LicpO1xuICAgICAgYXdhaXQgdGhpcy5jb25uZWN0U29ja2V0KCk7XG4gICAgfVxuXG4gICAgbGV0IHJldHJ5Q291bnQgPSAwO1xuICAgIHdoaWxlIChyZXRyeUNvdW50IDwgTUFYX1JFVFJZX0NPVU5UKSB7XG4gICAgICB0aGlzLnNvY2tldC5zZXRUaW1lb3V0KFNPQ0tFVF9USU1FT1VUKTtcblxuICAgICAgbGV0IGNtZFByb21pc2UgPSBuZXcgQigocmVzb2x2ZSkgPT4ge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ0NPTU1BTkQ6ICcgKyBjbWQpO1xuXG4gICAgICAgIGxldCB0b3RhbGRhdGEgPSBbXTtcbiAgICAgICAgbGV0IGVuZE1hcmtlciA9IG5ldyBCdWZmZXIuZnJvbSgneW91aWVuZCcpO1xuICAgICAgICBsZXQgc29ja2V0Q2xpZW50ID0gdGhpcy5zb2NrZXQ7XG5cbiAgICAgICAgbGV0IHJlbW92ZUxpc3RlbmVySGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzb2NrZXRDbGllbnQucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBkYXRhSGFuZGxlcik7XG4gICAgICAgICAgc29ja2V0Q2xpZW50LnJlbW92ZUxpc3RlbmVyKCd0aW1lb3V0JywgdGltZW91dEhhbmRsZXIpO1xuICAgICAgICAgIHNvY2tldENsaWVudC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCB0aW1lb3V0SGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsb2dnZXIuaW5mbygnVGltZW91dCBpbiBleGVjdXRlIGNvbW1hbmQuJyk7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXJIYW5kbGVyKCk7XG4gICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGVycm9ySGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsb2dnZXIuaW5mbygnT24gZXJyb3InKTtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lckhhbmRsZXIoKTtcbiAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZGF0YUhhbmRsZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIHRoaXMgaW5jbHVkZXMgYW4gZW5kIG1hcmtlclxuICAgICAgICAgIC8vIGdldCBsYXN0IGZldyB2YWx1ZXMgb2YgYnVmZmVyXG4gICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID49IGVuZE1hcmtlci5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBkYXRhZW5kID0gbmV3IEJ1ZmZlci5hbGxvYyhlbmRNYXJrZXIubGVuZ3RoKTtcbiAgICAgICAgICAgIGxldCBzdGFydEluZGV4ID0gZGF0YS5sZW5ndGggLSBlbmRNYXJrZXIubGVuZ3RoO1xuICAgICAgICAgICAgZGF0YS5jb3B5KGRhdGFlbmQsIDAsIHN0YXJ0SW5kZXgsIHN0YXJ0SW5kZXggKyBlbmRNYXJrZXIubGVuZ3RoKTtcbiAgICAgICAgICAgIGlmIChkYXRhZW5kLmVxdWFscyhlbmRNYXJrZXIpKSB7XG4gICAgICAgICAgICAgIC8vIHJlbW92ZSBkYXRhIGVuZFxuICAgICAgICAgICAgICBsZXQgbGFzdERhdGEgPSBkYXRhLnNsaWNlKDAsIHN0YXJ0SW5kZXgpO1xuICAgICAgICAgICAgICB0b3RhbGRhdGEucHVzaChsYXN0RGF0YSk7XG5cbiAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXJIYW5kbGVyKCk7XG5cbiAgICAgICAgICAgICAgLy8gcmVzb2x2ZVxuICAgICAgICAgICAgICByZXNvbHZlKEJ1ZmZlci5jb25jYXQodG90YWxkYXRhKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0b3RhbGRhdGEucHVzaChkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc29ja2V0Q2xpZW50LndyaXRlKGNtZCArICdcXG4nLCAnVVRGOCcsICgpID0+IHtcbiAgICAgICAgICBzb2NrZXRDbGllbnQub24oJ2RhdGEnLCBkYXRhSGFuZGxlcik7XG4gICAgICAgICAgc29ja2V0Q2xpZW50Lm9uKCd0aW1lb3V0JywgdGltZW91dEhhbmRsZXIpO1xuICAgICAgICAgIHNvY2tldENsaWVudC5vbignZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgbGV0IHJlcyA9IGF3YWl0IGNtZFByb21pc2U7XG4gICAgICBpZiAocmVzID09PSBmYWxzZSkge1xuICAgICAgICByZXRyeUNvdW50Kys7XG4gICAgICAgIGxvZ2dlci5pbmZvKCdTb2NrZXQgZmFpbGVkLiBSZXRyeWluZzogJyArIHJldHJ5Q291bnQpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignRXhlY3V0ZVNvY2tldENvbW1hbmQgZmFpbGVkLicpO1xuICB9XG59XG5cbmZvciAobGV0IFtjbWQsIGZuXSBvZiBfLnRvUGFpcnMoY29tbWFuZHMpKSB7XG4gIFlvdWlFbmdpbmVEcml2ZXIucHJvdG90eXBlW2NtZF0gPSBmbjtcbn1cbmV4cG9ydCB7IFlvdWlFbmdpbmVEcml2ZXIgfTtcbiJdLCJmaWxlIjoibGliL2RyaXZlci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
