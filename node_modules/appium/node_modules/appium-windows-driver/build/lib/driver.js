"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WindowsDriver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _winappdriver = require("./winappdriver");

var _logger = _interopRequireDefault(require("./logger"));

var _desiredCaps = require("./desired-caps");

var _index = _interopRequireDefault(require("./commands/index"));

var _constants = require("constants");

const NO_PROXY = [['GET', new RegExp('^/session/[^/]+/appium/(?!app/)[^/]+')], ['POST', new RegExp('^/session/[^/]+/appium/(?!app/)[^/]+')], ['POST', new RegExp('^/session/[^/]+/element/[^/]+/elements?$')], ['POST', new RegExp('^/session/[^/]+/elements?$')], ['POST', new RegExp('^/session/[^/]+/execute')], ['POST', new RegExp('^/session/[^/]+/execute/sync')]];

class WindowsDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.desiredCapConstraints;
    this.locatorStrategies = ['xpath', 'id', 'name', 'class name', 'accessibility id'];
    this.resetState();

    for (const [cmd, fn] of _lodash.default.toPairs(_index.default)) {
      WindowsDriver.prototype[cmd] = fn;
    }
  }

  resetState() {
    this.jwpProxyAvoid = NO_PROXY;
    this.isProxyActive = false;
    this.winAppDriver = null;
    this._screenRecorder = null;
  }

  async createSession(...args) {
    if (!_appiumSupport.system.isWindows()) {
      throw new Error('WinAppDriver tests only run on Windows');
    }

    try {
      const [sessionId, caps] = await super.createSession(...args);

      if (caps.prerun) {
        _logger.default.info('Executing prerun PowerShell script');

        if (!_lodash.default.isString(caps.prerun.command) && !_lodash.default.isString(caps.prerun.script)) {
          throw new Error(`'prerun' capability value must either contain ` + `'script' or 'command' entry of string type`);
        }

        this.ensureFeatureEnabled(_constants.POWER_SHELL_FEATURE);
        const output = await this.execPowerShell(caps.prerun);

        if (output) {
          _logger.default.info(`Prerun script output: ${output}`);
        }
      }

      await this.startWinAppDriverSession();
      return [sessionId, caps];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }

  async startWinAppDriverSession() {
    this.winAppDriver = new _winappdriver.WinAppDriver({
      port: this.opts.systemPort
    });
    await this.winAppDriver.start(this.caps);
    this.proxyReqRes = this.winAppDriver.proxy.proxyReqRes.bind(this.winAppDriver.proxy);
    this.isProxyActive = true;
  }

  async deleteSession() {
    var _this$_screenRecorder, _this$winAppDriver;

    _logger.default.debug('Deleting WinAppDriver session');

    await ((_this$_screenRecorder = this._screenRecorder) === null || _this$_screenRecorder === void 0 ? void 0 : _this$_screenRecorder.stop(true));
    await ((_this$winAppDriver = this.winAppDriver) === null || _this$winAppDriver === void 0 ? void 0 : _this$winAppDriver.stop());

    if (this.opts.postrun) {
      if (!_lodash.default.isString(this.opts.postrun.command) && !_lodash.default.isString(this.opts.postrun.script)) {
        _logger.default.error(`'postrun' capability value must either contain ` + `'script' or 'command' entry of string type`);
      } else {
        _logger.default.info('Executing postrun PowerShell script');

        try {
          this.ensureFeatureEnabled(_constants.POWER_SHELL_FEATURE);
          const output = await this.execPowerShell(this.opts.postrun);

          if (output) {
            _logger.default.info(`Postrun script output: ${output}`);
          }
        } catch (e) {
          _logger.default.error(e.message);
        }
      }
    }

    this.resetState();
    await super.deleteSession();
  }

  proxyActive() {
    return this.isProxyActive;
  }

  canProxy() {
    return true;
  }

  getProxyAvoidList() {
    return this.jwpProxyAvoid;
  }

}

exports.WindowsDriver = WindowsDriver;
var _default = WindowsDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOlsiTk9fUFJPWFkiLCJSZWdFeHAiLCJXaW5kb3dzRHJpdmVyIiwiQmFzZURyaXZlciIsImNvbnN0cnVjdG9yIiwib3B0cyIsInNob3VsZFZhbGlkYXRlQ2FwcyIsImRlc2lyZWRDYXBDb25zdHJhaW50cyIsImxvY2F0b3JTdHJhdGVnaWVzIiwicmVzZXRTdGF0ZSIsImNtZCIsImZuIiwiXyIsInRvUGFpcnMiLCJjb21tYW5kcyIsInByb3RvdHlwZSIsImp3cFByb3h5QXZvaWQiLCJpc1Byb3h5QWN0aXZlIiwid2luQXBwRHJpdmVyIiwiX3NjcmVlblJlY29yZGVyIiwiY3JlYXRlU2Vzc2lvbiIsImFyZ3MiLCJzeXN0ZW0iLCJpc1dpbmRvd3MiLCJFcnJvciIsInNlc3Npb25JZCIsImNhcHMiLCJwcmVydW4iLCJsb2ciLCJpbmZvIiwiaXNTdHJpbmciLCJjb21tYW5kIiwic2NyaXB0IiwiZW5zdXJlRmVhdHVyZUVuYWJsZWQiLCJQT1dFUl9TSEVMTF9GRUFUVVJFIiwib3V0cHV0IiwiZXhlY1Bvd2VyU2hlbGwiLCJzdGFydFdpbkFwcERyaXZlclNlc3Npb24iLCJlIiwiZGVsZXRlU2Vzc2lvbiIsIldpbkFwcERyaXZlciIsInBvcnQiLCJzeXN0ZW1Qb3J0Iiwic3RhcnQiLCJwcm94eVJlcVJlcyIsInByb3h5IiwiYmluZCIsImRlYnVnIiwic3RvcCIsInBvc3RydW4iLCJlcnJvciIsIm1lc3NhZ2UiLCJwcm94eUFjdGl2ZSIsImNhblByb3h5IiwiZ2V0UHJveHlBdm9pZExpc3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsUUFBUSxHQUFHLENBQ2YsQ0FBQyxLQUFELEVBQVEsSUFBSUMsTUFBSixDQUFXLHNDQUFYLENBQVIsQ0FEZSxFQUVmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyxzQ0FBWCxD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OztBQUVEYSxFQUFBQSxXQUFXLEdBQUk7QUFDYixXQUFPLEtBQUtuQyxhQUFaO0FBQ0Q7O0FBRURvQyxFQUFBQSxRQUFRLEdBQUk7QUFFVixXQUFPLElBQVA7QUFDRDs7QUFFREMsRUFBQUEsaUJBQWlCLEdBQWlCO0FBQ2hDLFdBQU8sS0FBS3RDLGFBQVo7QUFDRDs7QUF0R29DOzs7ZUEwR3hCZCxhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEJhc2VEcml2ZXIgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgc3lzdGVtIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHsgV2luQXBwRHJpdmVyIH0gZnJvbSAnLi93aW5hcHBkcml2ZXInO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBkZXNpcmVkQ2FwQ29uc3RyYWludHMgfSBmcm9tICcuL2Rlc2lyZWQtY2Fwcyc7XG5pbXBvcnQgY29tbWFuZHMgZnJvbSAnLi9jb21tYW5kcy9pbmRleCc7XG5pbXBvcnQgeyBQT1dFUl9TSEVMTF9GRUFUVVJFIH0gZnJvbSAnY29uc3RhbnRzJztcblxuY29uc3QgTk9fUFJPWFkgPSBbXG4gIFsnR0VUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2FwcGl1bS8oPyFhcHAvKVteL10rJyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvYXBwaXVtLyg/IWFwcC8pW14vXSsnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9lbGVtZW50L1teL10rL2VsZW1lbnRzPyQnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9lbGVtZW50cz8kJyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvZXhlY3V0ZScpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2V4ZWN1dGUvc3luYycpXSxcbl07XG5cbi8vIEFwcGl1bSBpbnN0YW50aWF0ZXMgdGhpcyBjbGFzc1xuY2xhc3MgV2luZG93c0RyaXZlciBleHRlbmRzIEJhc2VEcml2ZXIge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9LCBzaG91bGRWYWxpZGF0ZUNhcHMgPSB0cnVlKSB7XG4gICAgc3VwZXIob3B0cywgc2hvdWxkVmFsaWRhdGVDYXBzKTtcbiAgICB0aGlzLmRlc2lyZWRDYXBDb25zdHJhaW50cyA9IGRlc2lyZWRDYXBDb25zdHJhaW50cztcbiAgICB0aGlzLmxvY2F0b3JTdHJhdGVnaWVzID0gW1xuICAgICAgJ3hwYXRoJyxcbiAgICAgICdpZCcsXG4gICAgICAnbmFtZScsXG4gICAgICAnY2xhc3MgbmFtZScsXG4gICAgICAnYWNjZXNzaWJpbGl0eSBpZCcsXG4gICAgXTtcbiAgICB0aGlzLnJlc2V0U3RhdGUoKTtcblxuICAgIGZvciAoY29uc3QgW2NtZCwgZm5dIG9mIF8udG9QYWlycyhjb21tYW5kcykpIHtcbiAgICAgIFdpbmRvd3NEcml2ZXIucHJvdG90eXBlW2NtZF0gPSBmbjtcbiAgICB9XG4gIH1cblxuICByZXNldFN0YXRlICgpIHtcbiAgICB0aGlzLmp3cFByb3h5QXZvaWQgPSBOT19QUk9YWTtcbiAgICB0aGlzLmlzUHJveHlBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLndpbkFwcERyaXZlciA9IG51bGw7XG4gICAgdGhpcy5fc2NyZWVuUmVjb3JkZXIgPSBudWxsO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlU2Vzc2lvbiAoLi4uYXJncykge1xuICAgIGlmICghc3lzdGVtLmlzV2luZG93cygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpbkFwcERyaXZlciB0ZXN0cyBvbmx5IHJ1biBvbiBXaW5kb3dzJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IFtzZXNzaW9uSWQsIGNhcHNdID0gYXdhaXQgc3VwZXIuY3JlYXRlU2Vzc2lvbiguLi5hcmdzKTtcbiAgICAgIGlmIChjYXBzLnByZXJ1bikge1xuICAgICAgICBsb2cuaW5mbygnRXhlY3V0aW5nIHByZXJ1biBQb3dlclNoZWxsIHNjcmlwdCcpO1xuICAgICAgICBpZiAoIV8uaXNTdHJpbmcoY2Fwcy5wcmVydW4uY29tbWFuZCkgJiYgIV8uaXNTdHJpbmcoY2Fwcy5wcmVydW4uc2NyaXB0KSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJ3ByZXJ1bicgY2FwYWJpbGl0eSB2YWx1ZSBtdXN0IGVpdGhlciBjb250YWluIGAgK1xuICAgICAgICAgICAgYCdzY3JpcHQnIG9yICdjb21tYW5kJyBlbnRyeSBvZiBzdHJpbmcgdHlwZWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW5zdXJlRmVhdHVyZUVuYWJsZWQoUE9XRVJfU0hFTExfRkVBVFVSRSk7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuZXhlY1Bvd2VyU2hlbGwoY2Fwcy5wcmVydW4pO1xuICAgICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgICAgbG9nLmluZm8oYFByZXJ1biBzY3JpcHQgb3V0cHV0OiAke291dHB1dH1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy5zdGFydFdpbkFwcERyaXZlclNlc3Npb24oKTtcbiAgICAgIHJldHVybiBbc2Vzc2lvbklkLCBjYXBzXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhd2FpdCB0aGlzLmRlbGV0ZVNlc3Npb24oKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc3RhcnRXaW5BcHBEcml2ZXJTZXNzaW9uICgpIHtcbiAgICB0aGlzLndpbkFwcERyaXZlciA9IG5ldyBXaW5BcHBEcml2ZXIoe1xuICAgICAgcG9ydDogdGhpcy5vcHRzLnN5c3RlbVBvcnQsXG4gICAgfSk7XG4gICAgYXdhaXQgdGhpcy53aW5BcHBEcml2ZXIuc3RhcnQodGhpcy5jYXBzKTtcbiAgICB0aGlzLnByb3h5UmVxUmVzID0gdGhpcy53aW5BcHBEcml2ZXIucHJveHkucHJveHlSZXFSZXMuYmluZCh0aGlzLndpbkFwcERyaXZlci5wcm94eSk7XG4gICAgLy8gbm93IHRoYXQgZXZlcnl0aGluZyBoYXMgc3RhcnRlZCBzdWNjZXNzZnVsbHksIHR1cm4gb24gcHJveHlpbmcgc28gYWxsXG4gICAgLy8gc3Vic2VxdWVudCBzZXNzaW9uIHJlcXVlc3RzIGdvIHN0cmFpZ2h0IHRvL2Zyb20gV2luQXBwRHJpdmVyXG4gICAgdGhpcy5pc1Byb3h5QWN0aXZlID0gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVNlc3Npb24gKCkge1xuICAgIGxvZy5kZWJ1ZygnRGVsZXRpbmcgV2luQXBwRHJpdmVyIHNlc3Npb24nKTtcbiAgICBhd2FpdCB0aGlzLl9zY3JlZW5SZWNvcmRlcj8uc3RvcCh0cnVlKTtcbiAgICBhd2FpdCB0aGlzLndpbkFwcERyaXZlcj8uc3RvcCgpO1xuXG4gICAgaWYgKHRoaXMub3B0cy5wb3N0cnVuKSB7XG4gICAgICBpZiAoIV8uaXNTdHJpbmcodGhpcy5vcHRzLnBvc3RydW4uY29tbWFuZCkgJiYgIV8uaXNTdHJpbmcodGhpcy5vcHRzLnBvc3RydW4uc2NyaXB0KSkge1xuICAgICAgICBsb2cuZXJyb3IoYCdwb3N0cnVuJyBjYXBhYmlsaXR5IHZhbHVlIG11c3QgZWl0aGVyIGNvbnRhaW4gYCArXG4gICAgICAgICAgYCdzY3JpcHQnIG9yICdjb21tYW5kJyBlbnRyeSBvZiBzdHJpbmcgdHlwZWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmluZm8oJ0V4ZWN1dGluZyBwb3N0cnVuIFBvd2VyU2hlbGwgc2NyaXB0Jyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5lbnN1cmVGZWF0dXJlRW5hYmxlZChQT1dFUl9TSEVMTF9GRUFUVVJFKTtcbiAgICAgICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCB0aGlzLmV4ZWNQb3dlclNoZWxsKHRoaXMub3B0cy5wb3N0cnVuKTtcbiAgICAgICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgICAgICBsb2cuaW5mbyhgUG9zdHJ1biBzY3JpcHQgb3V0cHV0OiAke291dHB1dH1gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBsb2cuZXJyb3IoZS5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucmVzZXRTdGF0ZSgpO1xuXG4gICAgYXdhaXQgc3VwZXIuZGVsZXRlU2Vzc2lvbigpO1xuICB9XG5cbiAgcHJveHlBY3RpdmUgKCkge1xuICAgIHJldHVybiB0aGlzLmlzUHJveHlBY3RpdmU7XG4gIH1cblxuICBjYW5Qcm94eSAoKSB7XG4gICAgLy8gd2UgY2FuIGFsd2F5cyBwcm94eSB0byB0aGUgV2luQXBwRHJpdmVyIHNlcnZlclxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0UHJveHlBdm9pZExpc3QgKC8qc2Vzc2lvbklkKi8pIHtcbiAgICByZXR1cm4gdGhpcy5qd3BQcm94eUF2b2lkO1xuICB9XG59XG5cbmV4cG9ydCB7IFdpbmRvd3NEcml2ZXIgfTtcbmV4cG9ydCBkZWZhdWx0IFdpbmRvd3NEcml2ZXI7XG4iXSwiZmlsZSI6ImxpYi9kcml2ZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
