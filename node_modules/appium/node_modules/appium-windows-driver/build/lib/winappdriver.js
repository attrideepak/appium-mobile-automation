"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WinAppDriver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("./logger"));

var _teen_process = require("teen_process");

var _installer = require("./installer");

var _asyncbox = require("asyncbox");

var _child_process = require("child_process");

var _appiumSupport = require("appium-support");

var _portscanner = require("portscanner");

const DEFAULT_BASE = '/wd/hub';
const DEFAULT_HOST = '127.0.0.1';
const WAD_PORT_RANGE = [4724, 4824];
const STARTUP_TIMEOUT_MS = 10000;
const DEFAULT_CREATE_SESSION_TIMEOUT_MS = 20000;

const PORT_ALLOCATION_GUARD = _appiumSupport.util.getLockFileGuard(_path.default.resolve(_os.default.tmpdir(), 'wad_port_guard'), {
  timeout: 5,
  tryRecovery: true
});

class WADProxy extends _appiumBaseDriver.JWProxy {
  async proxyCommand(url, method, body = null) {
    if (this.didProcessExit) {
      throw new _appiumBaseDriver.errors.InvalidContextError(`'${method} ${url}' cannot be proxied to WinAppDriver server because ` + 'its process is not running (probably crashed). Check the Appium log for more details');
    }

    return await super.proxyCommand(url, method, body);
  }

}

class WADProcess {
  constructor(opts = {}) {
    this.base = opts.base;
    this.port = opts.port;
    this.proc = null;
  }

  get isRunning() {
    var _this$proc;

    return !!((_this$proc = this.proc) === null || _this$proc === void 0 ? void 0 : _this$proc.isRunning);
  }

  async start() {
    if (this.isRunning) {
      return;
    }

    if (!this.port) {
      await PORT_ALLOCATION_GUARD(async () => {
        const [startPort, endPort] = WAD_PORT_RANGE;

        try {
          this.port = await (0, _portscanner.findAPortNotInUse)(startPort, endPort);
        } catch (e) {
          _logger.default.errorAndThrow(`Could not find any free port in range ${startPort}..${endPort}. ` + `Please check your system firewall settings or set 'systemPort' capability ` + `to the desired port number`);
        }
      });
    }

    const args = [`${this.port}${this.base}`];
    this.proc = new _teen_process.SubProcess(_installer.WAD_INSTALL_PATH, args, {
      encoding: 'ucs2'
    });
    this.proc.on('output', (stdout, stderr) => {
      const line = _lodash.default.trim(stderr || stdout);

      if (line) {
        _logger.default.debug(line);
      }
    });
    this.proc.on('exit', (code, signal) => {
      _logger.default.info(`WinAppDriver exited with code ${code}, signal ${signal}`);
    });

    _logger.default.info(`Spawning '${_installer.WAD_INSTALL_PATH}' with args: ${JSON.stringify(args)}`);

    await this.proc.start(0);
  }

  async stop() {
    if (this.isRunning) {
      try {
        await this.proc.stop();
      } catch (e) {
        _logger.default.warn(`WinAppDriver process with PID ${this.proc.pid} cannot be stopped. ` + `Original error: ${e.message}`);
      }
    }
  }

}

const RUNNING_PROCESS_IDS = [];
process.once('exit', () => {
  for (const pid of RUNNING_PROCESS_IDS) {
    const command = `taskkill.exe /PID ${pid}`;

    try {
      (0, _child_process.execSync)(command);
    } catch (e) {
      _logger.default.warn(`WinAppDriver process with PID ${pid} cannot be cleaned up. ` + `Original error: ${e.message}`);
    }
  }
});

class WinAppDriver {
  constructor(opts = {}) {
    this.proxyPort = opts.port;
    this.process = null;
    this.proxy = null;
  }

  async start(caps) {
    if (!(await (0, _installer.isWADInstalled)())) {
      throw new Error(`WinAppDriver binary could not be found at the expected path ` + `'${_installer.WAD_INSTALL_PATH}'. Make sure it is installed`);
    }

    if (!(await (0, _installer.isWADChecksumOk)())) {
      _logger.default.warn('WinAppDriver exists, but the checksum did not match. Was it replaced manually?');
    }

    this.process = new WADProcess({
      base: DEFAULT_BASE,
      port: this.proxyPort
    });
    await this.process.start();
    this.proxy = new WADProxy({
      server: DEFAULT_HOST,
      port: this.process.port
    });
    this.proxy.didProcessExit = false;
    this.process.proc.on('exit', () => {
      this.proxy.didProcessExit = true;
    });

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        try {
          await this.proxy.command('/status', 'GET');
          return true;
        } catch (err) {
          if (this.proxy.didProcessExit) {
            throw new Error(err.message);
          }

          return false;
        }
      }, {
        waitMs: STARTUP_TIMEOUT_MS,
        intervalMs: 1000
      });
    } catch (e) {
      if (/Condition unmet/.test(e.message)) {
        throw new Error(`WinAppDriver server is not listening within ${STARTUP_TIMEOUT_MS}ms timeout. ` + `Make sure it could be started manually`);
      }

      throw e;
    }

    const pid = this.process.proc.pid;
    RUNNING_PROCESS_IDS.push(pid);
    this.process.proc.on('exit', () => void _lodash.default.pull(RUNNING_PROCESS_IDS, pid));
    await this._startSession(caps);
  }

  async _startSession(desiredCapabilities) {
    const {
      createSessionTimeout = DEFAULT_CREATE_SESSION_TIMEOUT_MS
    } = desiredCapabilities;

    _logger.default.debug(`Starting WinAppDriver session. Will timeout in '${createSessionTimeout}' ms.`);

    let retryIteration = 0;
    let lastError;

    const condFn = async () => {
      lastError = null;
      retryIteration++;

      try {
        await this.proxy.command('/session', 'POST', {
          desiredCapabilities
        });
        return true;
      } catch (error) {
        lastError = error;

        _logger.default.warn(`Could not start WinAppDriver session error = '${error.message}', attempt = '${retryIteration}' from '${this.createSessionRetry}'`);

        return false;
      }
    };

    try {
      await (0, _asyncbox.waitForCondition)(condFn, {
        waitMs: createSessionTimeout,
        intervalMs: 500
      });
    } catch (timeoutError) {
      _logger.default.debug(`timeoutError was ${timeoutError.message}`);

      if (lastError) {
        throw lastError;
      }

      throw new Error(`Could not start WinAppDriver session within ${createSessionTimeout} ms.`);
    }
  }

  async stop() {
    var _this$process, _this$proxy;

    if (!((_this$process = this.process) === null || _this$process === void 0 ? void 0 : _this$process.isRunning)) {
      return;
    }

    if ((_this$proxy = this.proxy) === null || _this$proxy === void 0 ? void 0 : _this$proxy.sessionId) {
      _logger.default.debug('Deleting WinAppDriver server session');

      try {
        var _this$proxy2;

        await this.proxy.command(`/session/${(_this$proxy2 = this.proxy) === null || _this$proxy2 === void 0 ? void 0 : _this$proxy2.sessionId}`, 'DELETE');
      } catch (err) {
        _logger.default.warn(`Did not get confirmation WinAppDriver deleteSession worked; ` + `Error was: ${err.message}`);
      }
    }

    await this.process.stop();
  }

  async sendCommand(url, method, body) {
    return await this.proxy.command(url, method, body);
  }

}

exports.WinAppDriver = WinAppDriver;
var _default = WinAppDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
