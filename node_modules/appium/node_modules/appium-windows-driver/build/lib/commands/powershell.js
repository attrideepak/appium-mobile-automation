"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _appiumBaseDriver = require("appium-base-driver");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _path = _interopRequireDefault(require("path"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _constants = require("../constants");

const EXECUTION_POLICY = {
  REMOTE_SIGNED: 'RemoteSigned',
  UNDEFINED: 'Undefined',
  RESTRICTED: 'Restricted'
};
const POWER_SHELL = 'powershell.exe';
const POWER_SHELL_SCRIPT_PATTERN = /^powerShell$/;
const commands = {};
exports.commands = commands;

commands.execute = async function execute(script, args) {
  if (POWER_SHELL_SCRIPT_PATTERN.test(script)) {
    this.ensureFeatureEnabled(_constants.POWER_SHELL_FEATURE);
    return await this.execPowerShell(script, _lodash.default.isArray(args) ? _lodash.default.first(args) : args);
  }

  throw new _appiumBaseDriver.errors.NotImplementedError();
};

commands.execPowerShell = async function execPowerShell(opts = {}) {
  const {
    script,
    command
  } = opts;

  if (!script && !command) {
    _logger.default.errorAndThrow('Power Shell script/command must not be empty');
  }

  if (/\n/.test(command)) {
    _logger.default.errorAndThrow('Power Shell commands cannot contain line breaks');
  }

  const shouldRunScript = !command && !!script;
  let tmpRoot;
  let userExecutionPolicy;

  try {
    let tmpScriptPath;

    if (shouldRunScript) {
      tmpRoot = await _appiumSupport.tempDir.openDir();
      tmpScriptPath = _path.default.resolve(tmpRoot, 'appium_script.ps1');
      await _appiumSupport.fs.writeFile(tmpScriptPath, script, 'utf8');
    }

    const psArgs = [];

    if (command) {
      psArgs.push('-command', command);
    } else {
      const {
        stdout
      } = await (0, _teen_process.exec)(POWER_SHELL, ['-command', 'Get-ExecutionPolicy -Scope CurrentUser']);
      userExecutionPolicy = _lodash.default.trim(stdout);

      if ([EXECUTION_POLICY.RESTRICTED, EXECUTION_POLICY.UNDEFINED].includes(userExecutionPolicy)) {
        _logger.default.debug(`Temporarily changing Power Shell execution policy to ${EXECUTION_POLICY.REMOTE_SIGNED} ` + 'to run the given script');

        await (0, _teen_process.exec)(POWER_SHELL, ['-command', `Set-ExecutionPolicy -Execution-Policy ${EXECUTION_POLICY.REMOTE_SIGNED} -Scope CurrentUser`]);
      } else {
        userExecutionPolicy = null;
      }

      psArgs.push('-file', tmpScriptPath);
    }

    _logger.default.info(`Running Power Shell with arguments: ${psArgs}`);

    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(POWER_SHELL, psArgs);
      return stdout;
    } catch (e) {
      throw new Error(e.stderr || e.message);
    }
  } finally {
    await _bluebird.default.all([(async () => {
      if (userExecutionPolicy) {
        await (0, _teen_process.exec)(POWER_SHELL, ['-command', `Set-ExecutionPolicy -Execution-Policy ${userExecutionPolicy} -Scope CurrentUser`]);
      }
    })(), (async () => {
      if (tmpRoot) {
        await _appiumSupport.fs.rimraf(tmpRoot);
      }
    })()]);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
