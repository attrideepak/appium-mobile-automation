"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-8"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

var _utils = require("./utils.js");

var _defaultsUtils = require("./defaults-utils");

const SIMULATOR_SHUTDOWN_TIMEOUT = 15 * 1000;
const startupLock = new _asyncLock.default();
const preferencesPlistGuard = new _asyncLock.default();
const ENROLLMENT_NOTIFICATION_RECEIVER = 'com.apple.BiometricKit.enrollmentChanged';

class SimulatorXcode9 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
  }

  async run(opts = {}) {
    opts = _lodash.default.cloneDeep(opts);

    _lodash.default.defaultsDeep(opts, {
      devicePreferences: {},
      isHeadless: false,
      startupTimeout: this.startupTimeout
    });

    if (opts.scaleFactor) {
      opts.devicePreferences.SimulatorWindowLastScale = parseFloat(opts.scaleFactor);
    }

    const commonPreferences = {
      RotateWindowWhenSignaledByGuest: true
    };

    if (_lodash.default.isBoolean(opts.connectHardwareKeyboard) || _lodash.default.isNil(opts.connectHardwareKeyboard)) {
      var _opts$connectHardware, _opts$connectHardware2;

      opts.devicePreferences.ConnectHardwareKeyboard = (_opts$connectHardware = opts.connectHardwareKeyboard) !== null && _opts$connectHardware !== void 0 ? _opts$connectHardware : false;
      commonPreferences.ConnectHardwareKeyboard = (_opts$connectHardware2 = opts.connectHardwareKeyboard) !== null && _opts$connectHardware2 !== void 0 ? _opts$connectHardware2 : false;
    }

    if (_lodash.default.isBoolean(opts.tracePointer)) {
      commonPreferences.ShowSingleTouches = opts.tracePointer;
      commonPreferences.ShowPinches = opts.tracePointer;
      commonPreferences.ShowPinchPivotPoint = opts.tracePointer;
      commonPreferences.HighlightEdgeGestures = opts.tracePointer;
    }

    switch (_lodash.default.lowerCase(opts.pasteboardAutomaticSync)) {
      case 'on':
        commonPreferences.PasteboardAutomaticSync = true;
        break;

      case 'off':
        commonPreferences.PasteboardAutomaticSync = false;
        break;

      case 'system':
        break;

      default:
        _logger.default.info(`['on', 'off' or 'system'] are available as the pasteboard automatic sync option. Defaulting to 'off'`);

        commonPreferences.PasteboardAutomaticSync = false;
    }

    await this.updatePreferences(opts.devicePreferences, commonPreferences);
    const timer = new _appiumSupport.timing.Timer().start();
    const shouldWaitForBoot = await startupLock.acquire(this.uiClientBundleId, async () => {
      const isServerRunning = await this.isRunning();
      const uiClientPid = await this.getUIClientPid();

      if (opts.isHeadless) {
        if (isServerRunning && !uiClientPid) {
          _logger.default.info(`Simulator with UDID '${this.udid}' is already booted in headless mode.`);

          return false;
        }

        if (await this.killUIClient({
          pid: uiClientPid
        })) {
          _logger.default.info(`Detected the Simulator UI client was running and killed it. Verifying the current Simulator state`);
        }

        try {
          await (0, _asyncbox.waitForCondition)(async () => await this.isShutdown(), {
            waitMs: 5000,
            intervalMs: 100
          });
        } catch (e) {
          if (!(await this.isRunning())) {
            throw new Error(`Simulator with UDID '${this.udid}' cannot be transitioned to headless mode`);
          }

          return false;
        }

        _logger.default.info(`Booting Simulator with UDID '${this.udid}' in headless mode. ` + `All UI-related capabilities are going to be ignored`);

        await this.boot();
      } else {
        if (isServerRunning && uiClientPid) {
          _logger.default.info(`Both Simulator with UDID '${this.udid}' and the UI client are currently running`);

          return false;
        }

        if (isServerRunning) {
          _logger.default.info(`Simulator '${this.udid}' is booted while its UI is not visible. ` + `Trying to restart it with the Simulator window visible`);

          await this.shutdown({
            timeout: SIMULATOR_SHUTDOWN_TIMEOUT
          });
        }

        await this.launchWindow(uiClientPid, opts);
      }

      return true;
    });

    if (shouldWaitForBoot) {
      await this.waitForBoot(opts.startupTimeout);

      _logger.default.info(`Simulator with UDID ${this.udid} booted in ${timer.getDuration().asSeconds.toFixed(3)}s`);
    }
  }

  async launchWindow(isUiClientRunning, opts = {}) {
    await this.boot();

    if (!isUiClientRunning) {
      await this.startUIClient(opts);
    }
  }

  async boot() {
    if (await this.isRunning()) {
      _logger.default.info(`Simulator '${this.udid}' is already running`);

      return;
    }

    _logger.default.info(`Booting Simulator with UDID '${this.udid}'...`);

    try {
      await (0, _asyncbox.retryInterval)(3, 2000, async () => {
        try {
          await this.simctl.bootDevice();
        } catch (e) {
          if (!_lodash.default.includes(e.stderr, 'Unable to boot device in current state: Booted')) {
            throw e;
          }

          _logger.default.debug(`Simulator with UDID '${this.udid}' is already in Booted state`);
        }
      });
    } catch (err) {
      _logger.default.warn(err.stderr || err.message);
    }
  }

  verifyDevicePreferences(prefs = {}) {
    if (_lodash.default.isEmpty(prefs)) {
      return;
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowLastScale)) {
      if (!_lodash.default.isNumber(prefs.SimulatorWindowLastScale) || prefs.SimulatorWindowLastScale <= 0) {
        _logger.default.errorAndThrow(`SimulatorWindowLastScale is expected to be a positive float value. ` + `'${prefs.SimulatorWindowLastScale}' is assigned instead.`);
      }
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowCenter)) {
      const verificationPattern = /{-?\d+(\.\d+)?,-?\d+(\.\d+)?}/;

      if (!_lodash.default.isString(prefs.SimulatorWindowCenter) || !verificationPattern.test(prefs.SimulatorWindowCenter)) {
        _logger.default.errorAndThrow(`SimulatorWindowCenter is expected to match "{floatXPosition,floatYPosition}" format (without spaces). ` + `'${prefs.SimulatorWindowCenter}' is assigned instead.`);
      }
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowOrientation)) {
      const acceptableValues = ['Portrait', 'LandscapeLeft', 'PortraitUpsideDown', 'LandscapeRight'];

      if (acceptableValues.indexOf(prefs.SimulatorWindowOrientation) === -1) {
        _logger.default.errorAndThrow(`SimulatorWindowOrientation is expected to be one of ${acceptableValues}. ` + `'${prefs.SimulatorWindowOrientation}' is assigned instead.`);
      }
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowRotationAngle)) {
      if (!_lodash.default.isNumber(prefs.SimulatorWindowRotationAngle)) {
        _logger.default.errorAndThrow(`SimulatorWindowRotationAngle is expected to be a valid number. ` + `'${prefs.SimulatorWindowRotationAngle}' is assigned instead.`);
      }
    }
  }

  async updatePreferences(devicePrefs = {}, commonPrefs = {}) {
    if (!_lodash.default.isEmpty(devicePrefs)) {
      _logger.default.debug(`Setting preferences of ${this.udid} Simulator to ${JSON.stringify(devicePrefs)}`);
    }

    if (!_lodash.default.isEmpty(commonPrefs)) {
      _logger.default.debug(`Setting common Simulator preferences to ${JSON.stringify(commonPrefs)}`);
    }

    const homeFolderPath = process.env.HOME;

    if (!homeFolderPath) {
      _logger.default.warn(`Cannot get the path to HOME folder from the process environment. ` + `Ignoring Simulator preferences update.`);

      return false;
    }

    this.verifyDevicePreferences(devicePrefs);

    const plistPath = _path.default.resolve(homeFolderPath, 'Library', 'Preferences', 'com.apple.iphonesimulator.plist');

    return await preferencesPlistGuard.acquire(SimulatorXcode9.name, async () => {
      const defaults = new _defaultsUtils.NSUserDefaults(plistPath);

      const prefsToUpdate = _lodash.default.clone(commonPrefs);

      try {
        if (!_lodash.default.isEmpty(devicePrefs)) {
          let existingDevicePrefs;
          const udidKey = this.udid.toUpperCase();

          if (await _appiumSupport.fs.exists(plistPath)) {
            const currentPlistContent = await defaults.asJson();

            if (_lodash.default.isPlainObject(currentPlistContent.DevicePreferences) && _lodash.default.isPlainObject(currentPlistContent.DevicePreferences[udidKey])) {
              existingDevicePrefs = currentPlistContent.DevicePreferences[udidKey];
            }
          }

          Object.assign(prefsToUpdate, {
            DevicePreferences: {
              [udidKey]: Object.assign({}, existingDevicePrefs || {}, devicePrefs)
            }
          });
        }

        await defaults.update(prefsToUpdate);

        _logger.default.debug(`Updated ${this.udid} Simulator preferences at '${plistPath}' with ` + JSON.stringify(prefsToUpdate));

        return true;
      } catch (e) {
        _logger.default.warn(`Cannot update ${this.udid} Simulator preferences at '${plistPath}'. ` + `Try to delete the file manually in order to reset it. Original error: ${e.message}`);

        return false;
      }
    });
  }

  async clean() {
    _logger.default.info(`Cleaning simulator ${this.udid}`);

    await this.simctl.eraseDevice(10000);
  }

  async _activateWindow() {
    let selfName;
    let selfSdk;
    let bootedDevicesCount = 0;

    for (const [sdk, deviceArr] of _lodash.default.toPairs(await this.simctl.getDevices())) {
      for (const {
        state,
        udid,
        name
      } of deviceArr) {
        if (state === 'Booted') {
          bootedDevicesCount++;
        }

        if (!selfName && udid === this.udid) {
          selfSdk = sdk;
          selfName = name;
        }
      }
    }

    if (bootedDevicesCount < 2) {
      return await super._activateWindow();
    }

    return `
      tell application "System Events"
        tell process "Simulator"
          set frontmost to false
          set frontmost to true
          click (menu item 1 where (its name contains "${selfName} " and its name contains "${selfSdk}")) of menu 1 of menu bar item "Window" of menu bar 1
        end tell
      end tell
    `;
  }

  async isBiometricEnrolled() {
    const {
      stdout
    } = await this.simctl.spawnProcess(['notifyutil', '-g', ENROLLMENT_NOTIFICATION_RECEIVER]);
    const match = new RegExp(`${_lodash.default.escapeRegExp(ENROLLMENT_NOTIFICATION_RECEIVER)}\\s+([01])`).exec(stdout);

    if (!match) {
      throw new Error(`Cannot parse biometric enrollment state from '${stdout}'`);
    }

    _logger.default.info(`Current biometric enrolled state for ${this.udid} Simulator: ${match[1]}`);

    return match[1] === '1';
  }

  async enrollBiometric(isEnabled = true) {
    _logger.default.debug(`Setting biometric enrolled state for ${this.udid} Simulator to '${isEnabled ? 'enabled' : 'disabled'}'`);

    await this.simctl.spawnProcess(['notifyutil', '-s', ENROLLMENT_NOTIFICATION_RECEIVER, isEnabled ? '1' : '0']);
    await this.simctl.spawnProcess(['notifyutil', '-p', ENROLLMENT_NOTIFICATION_RECEIVER]);

    if ((await this.isBiometricEnrolled()) !== isEnabled) {
      throw new Error(`Cannot set biometric enrolled state for ${this.udid} Simulator to '${isEnabled ? 'enabled' : 'disabled'}'`);
    }
  }

  async sendBiometricMatch(shouldMatch = true, biometricName = 'touchId') {
    const domainComponent = (0, _utils.toBiometricDomainComponent)(biometricName);
    const domain = `com.apple.BiometricKit_Sim.${domainComponent}.${shouldMatch ? '' : 'no'}match`;
    await this.simctl.spawnProcess(['notifyutil', '-p', domain]);

    _logger.default.info(`Sent notification ${domain} to ${shouldMatch ? 'match' : 'not match'} ${biometricName} biometric ` + `for ${this.udid} Simulator`);
  }

  async getLaunchDaemonsRoot() {
    const devRoot = await (0, _utils.getDeveloperRoot)();
    return _path.default.resolve(devRoot, 'Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/LaunchDaemons');
  }

}

var _default = SimulatorXcode9;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IteGNvZGUtOS5qcyJdLCJuYW1lcyI6WyJTSU1VTEFUT1JfU0hVVERPV05fVElNRU9VVCIsInN0YXJ0dXBMb2NrIiwiQXN5bmNMb2NrIiwicHJlZmVyZW5jZXNQbGlzdEd1YXJkIiwiRU5ST0xMTUVOVF9OT1RJRklDQVRJT05fUkVDRUlWRVIiLCJTaW11bGF0b3JYY29kZTkiLCJTaW11bGF0b3JYY29kZTgiLCJjb25zdHJ1Y3RvciIsInVkaWQiLCJ4Y29kZVZlcnNpb24iLCJydW4iLCJvcHRzIiwiXyIsImNsb25lRGVlcCIsImRlZmF1bHRzRGVlcCIsImRldmljZVByZWZlcmVuY2VzIiwiaXNIZWFkbGVzcyIsInN0YXJ0dXBUaW1lb3V0Iiwic2NhbGVGYWN0b3IiLCJTaW11bGF0b3JXaW5kb3dMYXN0U2NhbGUiLCJwYXJzZUZsb2F0IiwiY29tbW9uUHJlZmVyZW5jZXMiLCJSb3RhdGVXaW5kb3dXaGVuU2lnbmFsZWRCeUd1ZXN0IiwiaXNCb29sZWFuIiwiY29ubmVjdEhhcmR3YXJlS2V5Ym9hcmQiLCJpc05pbCIsIkNvbm5lY3RIYXJkd2FyZUtleWJvYXJkIiwidHJhY2VQb2ludGVyIiwiU2hvd1NpbmdsZVRvdWNoZXMiLCJTaG93UGluY2hlcyIsIlNob3dQaW5jaFBpdm90UG9pbnQiLCJIaWdobGlnaHRFZGdlR2VzdHVyZXMiLCJsb3dlckNhc2UiLCJwYXN0ZWJvYXJkQXV0b21hdGljU3luYyIsIlBhc3RlYm9hcmRBdXRvbWF0aWNTeW5jIiwibG9nIiwiaW5mbyIsInVwZGF0ZVByZWZlcmVuY2VzIiwidGltZXIiLCJ0aW1pbmciLCJUaW1lciIsInN0YXJ0Iiwic2hvdWxkV2FpdEZvckJvb3QiLCJhY3F1aXJlIiwidWlDbGllbnRCdW5kbGVJZCIsImlzU2VydmVyUnVubmluZyIsImlzUnVubmluZyIsInVpQ2xpZW50UGlkIiwiZ2V0VUlDbGllbnRQaWQiLCJraWxsVUlDbGllbnQiLCJwaWQiLCJpc1NodXRkb3duIiwid2FpdE1zIiwiaW50ZXJ2YWxNcyIsImUiLCJFcnJvciIsImJvb3QiLCJzaHV0ZG93biIsInRpbWVvdXQiLCJsYXVuY2hXaW5kb3ciLCJ3YWl0Rm9yQm9vdCIsImdldER1cmF0aW9uIiwiYXNTZWNvbmRzIiwidG9GaXhlZCIsImlzVWlDbGllbnRSdW5uaW5nIiwic3RhcnRVSUNsaWVudCIsInNpbWN0bCIsImJvb3REZXZpY2UiLCJpbmNsdWRlcyIsInN0ZGVyciIsImRlYnVnIiwiZXJyIiwid2FybiIsIm1lc3NhZ2UiLCJ2ZXJpZnlEZXZpY2VQcmVmZXJlbmNlcyIsInByZWZzIiwiaXNFbXB0eSIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJlcnJvckFuZFRocm93IiwiU2ltdWxhdG9yV2luZG93Q2VudGVyIiwidmVyaWZpY2F0aW9uUGF0dGVybiIsImlzU3RyaW5nIiwidGVzdCIsIlNpbXVsYXRvcldpbmRvd09yaWVudGF0aW9uIiwiYWNjZXB0YWJsZVZhbHVlcyIsImluZGV4T2YiLCJTaW11bGF0b3JXaW5kb3dSb3RhdGlvbkFuZ2xlIiwiZGV2aWNlUHJlZnMiLCJjb21tb25QcmVmcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJob21lRm9sZGVyUGF0aCIsInByb2Nlc3MiLCJlbnYiLCJIT01FIiwicGxpc3RQYXRoIiwicGF0aCIsInJlc29sdmUiLCJuYW1lIiwiZGVmYXVsdHMiLCJOU1VzZXJEZWZhdWx0cyIsInByZWZzVG9VcGRhdGUiLCJjbG9uZSIsImV4aXN0aW5nRGV2aWNlUHJlZnMiLCJ1ZGlkS2V5IiwidG9VcHBlckNhc2UiLCJmcyIsImV4aXN0cyIsImN1cnJlbnRQbGlzdENvbnRlbnQiLCJhc0pzb24iLCJpc1BsYWluT2JqZWN0IiwiRGV2aWNlUHJlZmVyZW5jZXMiLCJPYmplY3QiLCJhc3NpZ24iLCJ1cGRhdGUiLCJjbGVhbiIsImVyYXNlRGV2aWNlIiwiX2FjdGl2YXRlV2luZG93Iiwic2VsZk5hbWUiLCJzZWxmU2RrIiwiYm9vdGVkRGV2aWNlc0NvdW50Iiwic2RrIiwiZGV2aWNlQXJyIiwidG9QYWlycyIsImdldERldmljZXMiLCJzdGF0ZSIsImlzQmlvbWV0cmljRW5yb2xsZWQiLCJzdGRvdXQiLCJzcGF3blByb2Nlc3MiLCJtYXRjaCIsIlJlZ0V4cCIsImVzY2FwZVJlZ0V4cCIsImV4ZWMiLCJlbnJvbGxCaW9tZXRyaWMiLCJpc0VuYWJsZWQiLCJzZW5kQmlvbWV0cmljTWF0Y2giLCJzaG91bGRNYXRjaCIsImJpb21ldHJpY05hbWUiLCJkb21haW5Db21wb25lbnQiLCJkb21haW4iLCJnZXRMYXVuY2hEYWVtb25zUm9vdCIsImRldlJvb3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsMEJBQTBCLEdBQUcsS0FBSyxJQUF4QztBQUNBLE1BQU1DLFdBQVcsR0FBRyxJQUFJQyxrQkFBSixFQUFwQjtBQUNBLE1BQU1DLHFCQUFxQixHQUFHLElBQUlELGtCQUFKLEVBQTlCO0FBQ0EsTUFBTUUsZ0NBQWdDLEdBQUcsMENBQXpDOztBQUVBLE1BQU1DLGVBQU4sU0FBOEJDLHVCQUE5QixDQUE4QztBQUM1Q0MsRUFBQUEsV0FBVyxDQUFFQyxJQUFGLEVBQVFDLFlBQVIsRUFBc0I7QUFDL0IsVUFBTUQsSUFBTixFQUFZQyxZQUFaO0FBQ0Q7O0FBc0RELFFBQU1DLEdBQU4sQ0FBV0MsSUFBSSxHQUFHLEVBQWxCLEVBQXNCO0FBQ3BCQSxJQUFBQSxJQUFJLEdBQUdDLGdCQUFFQyxTQUFGLENBQVlGLElBQVosQ0FBUDs7QUFDQUMsb0JBQUVFLFlBQUYsQ0FBZUgsSUFBZixFQUFxQjtBQUNuQkksTUFBQUEsaUJBQWlCLEVBQUUsRUFEQTtBQUVuQkMsTUFBQUEsVUFBVSxFQUFFLEtBRk87QUFHbkJDLE1BQUFBLGNBQWMsRUFBRSxLQUFLQTtBQUhGLEtBQXJCOztBQU1BLFFBQUlOLElBQUksQ0FBQ08sV0FBVCxFQUFzQjtBQUNwQlAsTUFBQUEsSUFBSSxDQUFDSSxpQkFBTCxDQUF1Qkksd0JBQXZCLEdB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WStELFlBQVosQ0FBeUIsQ0FDN0IsWUFENkIsRUFFN0IsSUFGNkIsRUFFdkJXLE1BRnVCLENBQXpCLENBQU47O0FBSUF6RyxvQkFBSUMsSUFBSixDQUFVLHFCQUFvQndHLE1BQU8sT0FBTUgsV0FBVyxHQUFHLE9BQUgsR0FBYSxXQUFZLElBQUdDLGFBQWMsYUFBdkYsR0FDTixPQUFNLEtBQUtsSSxJQUFLLFlBRG5CO0FBRUQ7O0FBS0QsUUFBTXFJLG9CQUFOLEdBQThCO0FBQzVCLFVBQU1DLE9BQU8sR0FBRyxNQUFNLDhCQUF0QjtBQUNBLFdBQU83QyxjQUFLQyxPQUFMLENBQWE0QyxPQUFiLEVBQ0wsMEpBREssQ0FBUDtBQUVEOztBQTlZMkM7O2VBa1ovQnpJLGUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2ltdWxhdG9yWGNvZGU4IGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZnMsIHRpbWluZyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBBc3luY0xvY2sgZnJvbSAnYXN5bmMtbG9jayc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IHdhaXRGb3JDb25kaXRpb24sIHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgeyB0b0Jpb21ldHJpY0RvbWFpbkNvbXBvbmVudCwgZ2V0RGV2ZWxvcGVyUm9vdCB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgTlNVc2VyRGVmYXVsdHMgfSBmcm9tICcuL2RlZmF1bHRzLXV0aWxzJztcblxuY29uc3QgU0lNVUxBVE9SX1NIVVRET1dOX1RJTUVPVVQgPSAxNSAqIDEwMDA7XG5jb25zdCBzdGFydHVwTG9jayA9IG5ldyBBc3luY0xvY2soKTtcbmNvbnN0IHByZWZlcmVuY2VzUGxpc3RHdWFyZCA9IG5ldyBBc3luY0xvY2soKTtcbmNvbnN0IEVOUk9MTE1FTlRfTk9USUZJQ0FUSU9OX1JFQ0VJVkVSID0gJ2NvbS5hcHBsZS5CaW9tZXRyaWNLaXQuZW5yb2xsbWVudENoYW5nZWQnO1xuXG5jbGFzcyBTaW11bGF0b3JYY29kZTkgZXh0ZW5kcyBTaW11bGF0b3JYY29kZTgge1xuICBjb25zdHJ1Y3RvciAodWRpZCwgeGNvZGVWZXJzaW9uKSB7XG4gICAgc3VwZXIodWRpZCwgeGNvZGVWZXJzaW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBEZXZpY2VQcmVmZXJlbmNlc1xuICAgKiBAcHJvcGVydHkgez9udW1iZXJ9IFNpbXVsYXRvckV4dGVybmFsRGlzcGxheSAtIFRCRC4gRXhhbXBsZSB2YWx1ZTogMi4xMTRcbiAgICogQHByb3BlcnR5IHs/c3RyaW5nfSBDaHJvbWVUaW50IC0gVEJELiBFeGFtcGxlIHZhbHVlOiAnJ1xuICAgKiBAcHJvcGVydHkgez9udW1iZXJ9IFNpbXVsYXRvcldpbmRvd0xhc3RTY2FsZSAtIFNjYWxlIHZhbHVlIGZvciB0aGUgcGFydGljdWxhciBTaW11bGF0b3Igd2luZG93LlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuMCBtZWFucyAxMDAlIHNjYWxlLlxuICAgKiBAcHJvcGVydHkgez9zdHJpbmd9IFNpbXVsYXRvcldpbmRvd09yaWVudGF0aW9uIC0gU2ltdWxhdG9yIHdpbmRvdyBvcmllbnRhdGlvbi4gUG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQb3J0cmFpdCcsICdMYW5kc2NhcGVMZWZ0JywgJ1BvcnRyYWl0VXBzaWRlRG93bicgYW5kICdMYW5kc2NhcGVSaWdodCcuXG4gICAqIEBwcm9wZXJ0eSB7P251bWJlcn0gU2ltdWxhdG9yV2luZG93Um90YXRpb25BbmdsZSAtIFdpbmRvdyByb3RhdGlvbiBhbmdsZS4gVGhpcyB2YWx1ZSBpcyBleHBlY3RlZCB0byBiZSBpbiBzeW5jXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggX1NpbXVsYXRvcldpbmRvd09yaWVudGF0aW9uXy4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzIGFyZTpcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCwgOTAsIDE4MCBhbmQgMjcwLlxuICAgKiBAcHJvcGVydHkgez9zdHJpbmd9IFNpbXVsYXRvcldpbmRvd0NlbnRlciAtIFRoZSBjb29yZGluYXRlcyBvZiBTaW11bGF0b3IncyB3aW5kb3cgY2VudGVyIGluIHBpeGVscyxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgZXhhbXBsZSAney0xMjk0LjUsIDc3NS41fScuXG4gICAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IENvbm5lY3RIYXJkd2FyZUtleWJvYXJkIC0gRXF1YWxzIHRvIDEgaWYgaGFyZHdhcmUga2V5Ym9hcmQgc2hvdWxkIGJlIGNvbm5lY3RlZC5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPdGhlcndpc2UgMC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IENvbW1vblByZWZlcmVuY2VzXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gQ29ubmVjdEhhcmR3YXJlS2V5Ym9hcmQgLSBXaGV0aGVyIHRvIGNvbm5lY3QgaGFyZHdhcmUga2V5Ym9hcmRcbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFJ1bk9wdGlvbnNcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHNjYWxlRmFjdG9yOiBBbnkgcG9zaXRpdmUgZmxvYXQgdmFsdWUuIDEuMCBtZWFucyAxOjEgc2NhbGUuXG4gICAqIERlZmluZXMgdGhlIHdpbmRvdyBzY2FsZSB2YWx1ZSBmb3IgdGhlIFVJIGNsaWVudCB3aW5kb3cgZm9yIHRoZSBjdXJyZW50IFNpbXVsYXRvci5cbiAgICogRXF1YWxzIHRvIGBudWxsYCBieSBkZWZhdWx0LCB3aGljaCBrZWVwcyB0aGUgY3VycmVudCBzY2FsZSB1bmNoYW5nZWQuXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY29ubmVjdEhhcmR3YXJlS2V5Ym9hcmQ6IHdoZXRoZXIgdG8gY29ubmVjdCB0aGUgaGFyZHdhcmUga2V5Ym9hcmQgdG8gdGhlXG4gICAqIFNpbXVsYXRvciBVSSBjbGllbnQuIEVxdWFscyB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzdGFydHVwVGltZW91dDogbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IHVudGlsIFNpbXVsYXRvciBib290aW5nXG4gICAqIHByb2Nlc3MgaXMgY29tcGxldGVkLiBUaGUgZGVmYXVsdCB0aW1lb3V0IHdpbGwgYmUgdXNlZCBpZiBub3Qgc2V0IGV4cGxpY2l0bHkuXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNIZWFkbGVzczogd2hldGhlciB0byBzdGFydCB0aGUgU2ltdWxhdG9yIGluIGhlYWRsZXNzIG1vZGUgKHdpdGggVUlcbiAgICogY2xpZW50IGludmlzaWJsZSkuIGBmYWxzZWAgYnkgZGVmYXVsdC5cbiAgICogQHByb3BlcnR5IHs/Ym9vbGVhbn0gdHJhY2VQb2ludGVyIFtmYWxzZV0gLSBXaGV0aGVyIHRvIGhpZ2hsaWdodCB0b3VjaGVzIG9uIFNpbXVsYXRvclxuICAgKiBzY3JlZW4uIFRoaXMgaXMgaGVscGZ1bCB3aGlsZSBkZWJ1Z2dpbmcgYXV0b21hdGVkIHRlc3RzIG9yIHdoaWxlIG9ic2VydmluZyB0aGUgYXV0b21hdGlvblxuICAgKiByZWNvcmRpbmdzLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gcGFzdGVib2FyZEF1dG9tYXRpY1N5bmMgWydvZmYnXSAtIFdoZXRoZXIgdG8gZGlzYWJsZSBwYXN0ZWJvYXJkIHN5bmMgd2l0aCB0aGVcbiAgICogU2ltdWxhdG9yIFVJIGNsaWVudCBvciByZXNwZWN0IHRoZSBzeXN0ZW0gd2lkZSBwcmVmZXJlbmNlLiAnb24nLCAnb2ZmJywgb3IgJ3N5c3RlbScgaXMgYXZhaWxhYmxlLlxuICAgKiBUaGUgc3luYyBpbmNyZWFzZXMgbGF1bmNoaW5nIHNpbXVsYXRvciBwcm9jZXNzIHRpbWUsIGJ1dCBpdCBhbGxvd3Mgc3lzdGVtIHRvIHN5bmMgcGFzdGVib2FyZFxuICAgKiB3aXRoIHNpbXVsYXRvcnMuIEZvbGxvd3Mgc3lzdGVtLXdpZGUgcHJlZmVyZW5jZSBpZiB0aGUgdmFsdWUgaXMgJ3N5c3RlbScuXG4gICAqIERlZmF1bHRzIHRvICdvZmYnLlxuICAgKiBAcHJvcGVydHkge0RldmljZVByZWZlcmVuY2VzfSBkZXZpY2VQcmVmZXJlbmNlczogcHJlZmVyZW5jZXMgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgU2ltdWxhdG9yXG4gICAqIGRldmljZVxuICAgKi9cblxuICAvKipcbiAgICogRXhlY3V0ZXMgZ2l2ZW4gU2ltdWxhdG9yIHdpdGggb3B0aW9ucy4gVGhlIFNpbXVsYXRvciB3aWxsIG5vdCBiZSByZXN0YXJ0ZWQgaWZcbiAgICogaXQgaXMgYWxyZWFkeSBydW5uaW5nIGFuZCB0aGUgY3VycmVudCBVSSBzdGF0ZSBtYXRjaGVzIHRvIGBpc0hlYWRsZXNzYCBvcHRpb24uXG4gICAqIEBvdmVycmlkZVxuICAgKlxuICAgKiBAcGFyYW0ge1J1bk9wdGlvbnN9IG9wdHMgLSBPbmUgb3IgbW9yZSBvZiBhdmFpbGFibGUgU2ltdWxhdG9yIG9wdGlvbnNcbiAgICovXG4gIGFzeW5jIHJ1biAob3B0cyA9IHt9KSB7XG4gICAgb3B0cyA9IF8uY2xvbmVEZWVwKG9wdHMpO1xuICAgIF8uZGVmYXVsdHNEZWVwKG9wdHMsIHtcbiAgICAgIGRldmljZVByZWZlcmVuY2VzOiB7fSxcbiAgICAgIGlzSGVhZGxlc3M6IGZhbHNlLFxuICAgICAgc3RhcnR1cFRpbWVvdXQ6IHRoaXMuc3RhcnR1cFRpbWVvdXQsXG4gICAgfSk7XG5cbiAgICBpZiAob3B0cy5zY2FsZUZhY3Rvcikge1xuICAgICAgb3B0cy5kZXZpY2VQcmVmZXJlbmNlcy5TaW11bGF0b3JXaW5kb3dMYXN0U2NhbGUgPSBwYXJzZUZsb2F0KG9wdHMuc2NhbGVGYWN0b3IpO1xuICAgIH1cbiAgICAvLyBUaGlzIG9wdGlvbiBpcyBuZWNlc3NhcnkgdG8gbWFrZSB0aGUgU2ltdWxhdG9yIHdpbmRvdyBmb2xsb3dcbiAgICAvLyB0aGUgYWN0dWFsIFhDVUlEZXZpY2Ugb3JpZW50YXRpb25cbiAgICBjb25zdCBjb21tb25QcmVmZXJlbmNlcyA9IHtcbiAgICAgIFJvdGF0ZVdpbmRvd1doZW5TaWduYWxlZEJ5R3Vlc3Q6IHRydWVcbiAgICB9O1xuICAgIGlmIChfLmlzQm9vbGVhbihvcHRzLmNvbm5lY3RIYXJkd2FyZUtleWJvYXJkKSB8fCBfLmlzTmlsKG9wdHMuY29ubmVjdEhhcmR3YXJlS2V5Ym9hcmQpKSB7XG4gICAgICBvcHRzLmRldmljZVByZWZlcmVuY2VzLkNvbm5lY3RIYXJkd2FyZUtleWJvYXJkID0gb3B0cy5jb25uZWN0SGFyZHdhcmVLZXlib2FyZCA/PyBmYWxzZTtcbiAgICAgIGNvbW1vblByZWZlcmVuY2VzLkNvbm5lY3RIYXJkd2FyZUtleWJvYXJkID0gb3B0cy5jb25uZWN0SGFyZHdhcmVLZXlib2FyZCA/PyBmYWxzZTtcbiAgICB9XG4gICAgaWYgKF8uaXNCb29sZWFuKG9wdHMudHJhY2VQb2ludGVyKSkge1xuICAgICAgY29tbW9uUHJlZmVyZW5jZXMuU2hvd1NpbmdsZVRvdWNoZXMgPSBvcHRzLnRyYWNlUG9pbnRlcjtcbiAgICAgIGNvbW1vblByZWZlcmVuY2VzLlNob3dQaW5jaGVzID0gb3B0cy50cmFjZVBvaW50ZXI7XG4gICAgICBjb21tb25QcmVmZXJlbmNlcy5TaG93UGluY2hQaXZvdFBvaW50ID0gb3B0cy50cmFjZVBvaW50ZXI7XG4gICAgICBjb21tb25QcmVmZXJlbmNlcy5IaWdobGlnaHRFZGdlR2VzdHVyZXMgPSBvcHRzLnRyYWNlUG9pbnRlcjtcbiAgICB9XG4gICAgc3dpdGNoIChfLmxvd2VyQ2FzZShvcHRzLnBhc3RlYm9hcmRBdXRvbWF0aWNTeW5jKSkge1xuICAgICAgY2FzZSAnb24nOlxuICAgICAgICBjb21tb25QcmVmZXJlbmNlcy5QYXN0ZWJvYXJkQXV0b21hdGljU3luYyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb2ZmJzpcbiAgICAgICAgLy8gSW1wcm92ZSBsYXVuY2hpbmcgc2ltdWxhdG9yIHBlcmZvcm1hbmNlXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJLaXQvd2Via2l0L2Jsb2IvbWFzdGVyL1Rvb2xzL1NjcmlwdHMvd2Via2l0cHkveGNvZGUvc2ltdWxhdGVkX2RldmljZS5weSNMNDEzXG4gICAgICAgIGNvbW1vblByZWZlcmVuY2VzLlBhc3RlYm9hcmRBdXRvbWF0aWNTeW5jID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3lzdGVtJzpcbiAgICAgICAgLy8gRG8gbm90IGFkZCAtUGFzdGVib2FyZEF1dG9tYXRpY1N5bmNcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsb2cuaW5mbyhgWydvbicsICdvZmYnIG9yICdzeXN0ZW0nXSBhcmUgYXZhaWxhYmxlIGFzIHRoZSBwYXN0ZWJvYXJkIGF1dG9tYXRpYyBzeW5jIG9wdGlvbi4gRGVmYXVsdGluZyB0byAnb2ZmJ2ApO1xuICAgICAgICBjb21tb25QcmVmZXJlbmNlcy5QYXN0ZWJvYXJkQXV0b21hdGljU3luYyA9IGZhbHNlO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVByZWZlcmVuY2VzKG9wdHMuZGV2aWNlUHJlZmVyZW5jZXMsIGNvbW1vblByZWZlcmVuY2VzKTtcblxuICAgIGNvbnN0IHRpbWVyID0gbmV3IHRpbWluZy5UaW1lcigpLnN0YXJ0KCk7XG4gICAgY29uc3Qgc2hvdWxkV2FpdEZvckJvb3QgPSBhd2FpdCBzdGFydHVwTG9jay5hY3F1aXJlKHRoaXMudWlDbGllbnRCdW5kbGVJZCwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaXNTZXJ2ZXJSdW5uaW5nID0gYXdhaXQgdGhpcy5pc1J1bm5pbmcoKTtcbiAgICAgIGNvbnN0IHVpQ2xpZW50UGlkID0gYXdhaXQgdGhpcy5nZXRVSUNsaWVudFBpZCgpO1xuICAgICAgaWYgKG9wdHMuaXNIZWFkbGVzcykge1xuICAgICAgICBpZiAoaXNTZXJ2ZXJSdW5uaW5nICYmICF1aUNsaWVudFBpZCkge1xuICAgICAgICAgIGxvZy5pbmZvKGBTaW11bGF0b3Igd2l0aCBVRElEICcke3RoaXMudWRpZH0nIGlzIGFscmVhZHkgYm9vdGVkIGluIGhlYWRsZXNzIG1vZGUuYCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhd2FpdCB0aGlzLmtpbGxVSUNsaWVudCh7cGlkOiB1aUNsaWVudFBpZH0pKSB7XG4gICAgICAgICAgbG9nLmluZm8oYERldGVjdGVkIHRoZSBTaW11bGF0b3IgVUkgY2xpZW50IHdhcyBydW5uaW5nIGFuZCBraWxsZWQgaXQuIFZlcmlmeWluZyB0aGUgY3VycmVudCBTaW11bGF0b3Igc3RhdGVgKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFN0b3BwaW5nIHRoZSBVSSBjbGllbnQga2lsbHMgYWxsIHJ1bm5pbmcgc2VydmVycyBmb3Igc29tZSBlYXJseSBYQ29kZSB2ZXJzaW9ucy4gVGhpcyBpcyBhIGtub3duIGJ1Z1xuICAgICAgICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy5pc1NodXRkb3duKCksIHtcbiAgICAgICAgICAgIHdhaXRNczogNTAwMCxcbiAgICAgICAgICAgIGludGVydmFsTXM6IDEwMCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmICghYXdhaXQgdGhpcy5pc1J1bm5pbmcoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTaW11bGF0b3Igd2l0aCBVRElEICcke3RoaXMudWRpZH0nIGNhbm5vdCBiZSB0cmFuc2l0aW9uZWQgdG8gaGVhZGxlc3MgbW9kZWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbG9nLmluZm8oYEJvb3RpbmcgU2ltdWxhdG9yIHdpdGggVURJRCAnJHt0aGlzLnVkaWR9JyBpbiBoZWFkbGVzcyBtb2RlLiBgICtcbiAgICAgICAgICBgQWxsIFVJLXJlbGF0ZWQgY2FwYWJpbGl0aWVzIGFyZSBnb2luZyB0byBiZSBpZ25vcmVkYCk7XG4gICAgICAgIGF3YWl0IHRoaXMuYm9vdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzU2VydmVyUnVubmluZyAmJiB1aUNsaWVudFBpZCkge1xuICAgICAgICAgIGxvZy5pbmZvKGBCb3RoIFNpbXVsYXRvciB3aXRoIFVESUQgJyR7dGhpcy51ZGlkfScgYW5kIHRoZSBVSSBjbGllbnQgYXJlIGN1cnJlbnRseSBydW5uaW5nYCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1NlcnZlclJ1bm5pbmcpIHtcbiAgICAgICAgICBsb2cuaW5mbyhgU2ltdWxhdG9yICcke3RoaXMudWRpZH0nIGlzIGJvb3RlZCB3aGlsZSBpdHMgVUkgaXMgbm90IHZpc2libGUuIGAgK1xuICAgICAgICAgICAgYFRyeWluZyB0byByZXN0YXJ0IGl0IHdpdGggdGhlIFNpbXVsYXRvciB3aW5kb3cgdmlzaWJsZWApO1xuICAgICAgICAgIGF3YWl0IHRoaXMuc2h1dGRvd24oe3RpbWVvdXQ6IFNJTVVMQVRPUl9TSFVURE9XTl9USU1FT1VUfSk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5sYXVuY2hXaW5kb3codWlDbGllbnRQaWQsIG9wdHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG5cbiAgICBpZiAoc2hvdWxkV2FpdEZvckJvb3QpIHtcbiAgICAgIGF3YWl0IHRoaXMud2FpdEZvckJvb3Qob3B0cy5zdGFydHVwVGltZW91dCk7XG4gICAgICBsb2cuaW5mbyhgU2ltdWxhdG9yIHdpdGggVURJRCAke3RoaXMudWRpZH0gYm9vdGVkIGluICR7dGltZXIuZ2V0RHVyYXRpb24oKS5hc1NlY29uZHMudG9GaXhlZCgzKX1zYCk7XG4gICAgfVxuICB9XG5cbiAgLyoqKlxuICAgKiBCb290cyBzaW11bGF0b3IgYW5kIG9wZW5zIHNpbXVsYXRvcnMgVUkgQ2xpZW50IGlmIG5vdCBhbHJlYWR5IG9wZW5lZC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1VpQ2xpZW50UnVubmluZyAtIHByb2Nlc3MgaWQgb2Ygc2ltdWxhdG9yIFVJIGNsaWVudC5cbiAgICogQHBhcmFtIHtSdW5PcHRpb25zfSBvcHRzIC0gYXJndW1lbnRzIHRvIHN0YXJ0IHNpbXVsYXRvciBVSSBjbGllbnQgd2l0aC5cbiAgICovXG4gIGFzeW5jIGxhdW5jaFdpbmRvdyAoaXNVaUNsaWVudFJ1bm5pbmcsIG9wdHMgPSB7fSkge1xuICAgIGF3YWl0IHRoaXMuYm9vdCgpO1xuICAgIGlmICghaXNVaUNsaWVudFJ1bm5pbmcpIHtcbiAgICAgIGF3YWl0IHRoaXMuc3RhcnRVSUNsaWVudChvcHRzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQm9vdHMgc2ltdWxhdG9yIGlmIG5vdCBhbHJlYWR5IGJvb3RlZC5cbiAgICovXG4gIGFzeW5jIGJvb3QgKCkge1xuICAgIGlmIChhd2FpdCB0aGlzLmlzUnVubmluZygpKSB7XG4gICAgICBsb2cuaW5mbyhgU2ltdWxhdG9yICcke3RoaXMudWRpZH0nIGlzIGFscmVhZHkgcnVubmluZ2ApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxvZy5pbmZvKGBCb290aW5nIFNpbXVsYXRvciB3aXRoIFVESUQgJyR7dGhpcy51ZGlkfScuLi5gKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcmV0cnlJbnRlcnZhbCgzLCAyMDAwLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5zaW1jdGwuYm9vdERldmljZSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaWYgKCFfLmluY2x1ZGVzKGUuc3RkZXJyLCAnVW5hYmxlIHRvIGJvb3QgZGV2aWNlIGluIGN1cnJlbnQgc3RhdGU6IEJvb3RlZCcpKSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsb2cuZGVidWcoYFNpbXVsYXRvciB3aXRoIFVESUQgJyR7dGhpcy51ZGlkfScgaXMgYWxyZWFkeSBpbiBCb290ZWQgc3RhdGVgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cud2FybihlcnIuc3RkZXJyIHx8IGVyci5tZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybSB2ZXJpZmljYXRpb24gb2YgZGV2aWNlIHByZWZlcmVuY2VzIGNvcnJlY3RuZXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge0RldmljZVByZWZlcmVuY2VzfSBwcmVmcyBbe31dIC0gVGhlIHByZWZlcmVuY2VzIHRvIGJlIHZlcmlmaWVkXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBhbnkgb2YgdGhlIGdpdmVuIHByZWZlcmVuY2UgdmFsdWVzIGRvZXMgbm90IG1hdGNoIHRoZSBleHBlY3RlZFxuICAgKiBmb3JtYXQuXG4gICAqL1xuICB2ZXJpZnlEZXZpY2VQcmVmZXJlbmNlcyAocHJlZnMgPSB7fSkge1xuICAgIGlmIChfLmlzRW1wdHkocHJlZnMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFfLmlzVW5kZWZpbmVkKHByZWZzLlNpbXVsYXRvcldpbmRvd0xhc3RTY2FsZSkpIHtcbiAgICAgIGlmICghXy5pc051bWJlcihwcmVmcy5TaW11bGF0b3JXaW5kb3dMYXN0U2NhbGUpIHx8IHByZWZzLlNpbXVsYXRvcldpbmRvd0xhc3RTY2FsZSA8PSAwKSB7XG4gICAgICAgIGxvZy5lcnJvckFuZFRocm93KGBTaW11bGF0b3JXaW5kb3dMYXN0U2NhbGUgaXMgZXhwZWN0ZWQgdG8gYmUgYSBwb3NpdGl2ZSBmbG9hdCB2YWx1ZS4gYCArXG4gICAgICAgICAgYCcke3ByZWZzLlNpbXVsYXRvcldpbmRvd0xhc3RTY2FsZX0nIGlzIGFzc2lnbmVkIGluc3RlYWQuYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFfLmlzVW5kZWZpbmVkKHByZWZzLlNpbXVsYXRvcldpbmRvd0NlbnRlcikpIHtcbiAgICAgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvMlpYT2lqLzJcbiAgICAgIGNvbnN0IHZlcmlmaWNhdGlvblBhdHRlcm4gPSAvey0/XFxkKyhcXC5cXGQrKT8sLT9cXGQrKFxcLlxcZCspP30vO1xuICAgICAgaWYgKCFfLmlzU3RyaW5nKHByZWZzLlNpbXVsYXRvcldpbmRvd0NlbnRlcikgfHwgIXZlcmlmaWNhdGlvblBhdHRlcm4udGVzdChwcmVmcy5TaW11bGF0b3JXaW5kb3dDZW50ZXIpKSB7XG4gICAgICAgIGxvZy5lcnJvckFuZFRocm93KGBTaW11bGF0b3JXaW5kb3dDZW50ZXIgaXMgZXhwZWN0ZWQgdG8gbWF0Y2ggXCJ7ZmxvYXRYUG9zaXRpb24sZmxvYXRZUG9zaXRpb259XCIgZm9ybWF0ICh3aXRob3V0IHNwYWNlcykuIGAgK1xuICAgICAgICAgIGAnJHtwcmVmcy5TaW11bGF0b3JXaW5kb3dDZW50ZXJ9JyBpcyBhc3NpZ25lZCBpbnN0ZWFkLmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghXy5pc1VuZGVmaW5lZChwcmVmcy5TaW11bGF0b3JXaW5kb3dPcmllbnRhdGlvbikpIHtcbiAgICAgIGNvbnN0IGFjY2VwdGFibGVWYWx1ZXMgPSBbJ1BvcnRyYWl0JywgJ0xhbmRzY2FwZUxlZnQnLCAnUG9ydHJhaXRVcHNpZGVEb3duJywgJ0xhbmRzY2FwZVJpZ2h0J107XG4gICAgICBpZiAoYWNjZXB0YWJsZVZhbHVlcy5pbmRleE9mKHByZWZzLlNpbXVsYXRvcldpbmRvd09yaWVudGF0aW9uKSA9PT0gLTEpIHtcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coYFNpbXVsYXRvcldpbmRvd09yaWVudGF0aW9uIGlzIGV4cGVjdGVkIHRvIGJlIG9uZSBvZiAke2FjY2VwdGFibGVWYWx1ZXN9LiBgICtcbiAgICAgICAgICBgJyR7cHJlZnMuU2ltdWxhdG9yV2luZG93T3JpZW50YXRpb259JyBpcyBhc3NpZ25lZCBpbnN0ZWFkLmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghXy5pc1VuZGVmaW5lZChwcmVmcy5TaW11bGF0b3JXaW5kb3dSb3RhdGlvbkFuZ2xlKSkge1xuICAgICAgaWYgKCFfLmlzTnVtYmVyKHByZWZzLlNpbXVsYXRvcldpbmRvd1JvdGF0aW9uQW5nbGUpKSB7XG4gICAgICAgIGxvZy5lcnJvckFuZFRocm93KGBTaW11bGF0b3JXaW5kb3dSb3RhdGlvbkFuZ2xlIGlzIGV4cGVjdGVkIHRvIGJlIGEgdmFsaWQgbnVtYmVyLiBgICtcbiAgICAgICAgICBgJyR7cHJlZnMuU2ltdWxhdG9yV2luZG93Um90YXRpb25BbmdsZX0nIGlzIGFzc2lnbmVkIGluc3RlYWQuYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgY29tbW9uIGlPUyBTaW11bGF0b3IgcHJlZmVyZW5jZXMgZmlsZSB3aXRoIG5ldyB2YWx1ZXMuXG4gICAqIEl0IGlzIG5lY2Vzc2FyeSB0byByZXN0YXJ0IHRoZSBjb3JyZXNwb25kaW5nIFNpbXVsYXRvciBiZWZvcmVcbiAgICogdGhlc2UgY2hhbmdlcyBhcmUgYXBwbGllZC5cbiAgICpcbiAgICogQHBhcmFtIHtEZXZpY2VQcmVmZXJlbmNlc30gZGV2aWNlUHJlZnMgW3t9XSAtIFRoZSBtYXBwaW5nLCB3aGljaCByZXByZXNlbnRzIG5ldyBkZXZpY2UgcHJlZmVyZW5jZSB2YWx1ZXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGUgZ2l2ZW4gU2ltdWxhdG9yLlxuICAgKiBAcGFyYW0ge0NvbW1vblByZWZlcmVuY2VzfSBjb21tb25QcmVmcyBbe31dIC0gVGhlIG1hcHBpbmcsIHdoaWNoIHJlcHJlc2VudHMgbmV3IGNvbW1vbiBwcmVmZXJlbmNlIHZhbHVlc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGFsbCBTaW11bGF0b3JzLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBwcmVmZXJlbmNlcyB3ZXJlIHN1Y2Nlc3NmdWxseSB1cGRhdGVkLlxuICAgKi9cbiAgYXN5bmMgdXBkYXRlUHJlZmVyZW5jZXMgKGRldmljZVByZWZzID0ge30sIGNvbW1vblByZWZzID0ge30pIHtcbiAgICBpZiAoIV8uaXNFbXB0eShkZXZpY2VQcmVmcykpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgU2V0dGluZyBwcmVmZXJlbmNlcyBvZiAke3RoaXMudWRpZH0gU2ltdWxhdG9yIHRvICR7SlNPTi5zdHJpbmdpZnkoZGV2aWNlUHJlZnMpfWApO1xuICAgIH1cbiAgICBpZiAoIV8uaXNFbXB0eShjb21tb25QcmVmcykpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgU2V0dGluZyBjb21tb24gU2ltdWxhdG9yIHByZWZlcmVuY2VzIHRvICR7SlNPTi5zdHJpbmdpZnkoY29tbW9uUHJlZnMpfWApO1xuICAgIH1cbiAgICBjb25zdCBob21lRm9sZGVyUGF0aCA9IHByb2Nlc3MuZW52LkhPTUU7XG4gICAgaWYgKCFob21lRm9sZGVyUGF0aCkge1xuICAgICAgbG9nLndhcm4oYENhbm5vdCBnZXQgdGhlIHBhdGggdG8gSE9NRSBmb2xkZXIgZnJvbSB0aGUgcHJvY2VzcyBlbnZpcm9ubWVudC4gYCArXG4gICAgICAgIGBJZ25vcmluZyBTaW11bGF0b3IgcHJlZmVyZW5jZXMgdXBkYXRlLmApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnZlcmlmeURldmljZVByZWZlcmVuY2VzKGRldmljZVByZWZzKTtcbiAgICBjb25zdCBwbGlzdFBhdGggPSBwYXRoLnJlc29sdmUoaG9tZUZvbGRlclBhdGgsICdMaWJyYXJ5JywgJ1ByZWZlcmVuY2VzJywgJ2NvbS5hcHBsZS5pcGhvbmVzaW11bGF0b3IucGxpc3QnKTtcbiAgICByZXR1cm4gYXdhaXQgcHJlZmVyZW5jZXNQbGlzdEd1YXJkLmFjcXVpcmUoU2ltdWxhdG9yWGNvZGU5Lm5hbWUsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGRlZmF1bHRzID0gbmV3IE5TVXNlckRlZmF1bHRzKHBsaXN0UGF0aCk7XG4gICAgICBjb25zdCBwcmVmc1RvVXBkYXRlID0gXy5jbG9uZShjb21tb25QcmVmcyk7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIV8uaXNFbXB0eShkZXZpY2VQcmVmcykpIHtcbiAgICAgICAgICBsZXQgZXhpc3RpbmdEZXZpY2VQcmVmcztcbiAgICAgICAgICBjb25zdCB1ZGlkS2V5ID0gdGhpcy51ZGlkLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgaWYgKGF3YWl0IGZzLmV4aXN0cyhwbGlzdFBhdGgpKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UGxpc3RDb250ZW50ID0gYXdhaXQgZGVmYXVsdHMuYXNKc29uKCk7XG4gICAgICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGN1cnJlbnRQbGlzdENvbnRlbnQuRGV2aWNlUHJlZmVyZW5jZXMpXG4gICAgICAgICAgICAgICAgJiYgXy5pc1BsYWluT2JqZWN0KGN1cnJlbnRQbGlzdENvbnRlbnQuRGV2aWNlUHJlZmVyZW5jZXNbdWRpZEtleV0pKSB7XG4gICAgICAgICAgICAgIGV4aXN0aW5nRGV2aWNlUHJlZnMgPSBjdXJyZW50UGxpc3RDb250ZW50LkRldmljZVByZWZlcmVuY2VzW3VkaWRLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBPYmplY3QuYXNzaWduKHByZWZzVG9VcGRhdGUsIHtcbiAgICAgICAgICAgIERldmljZVByZWZlcmVuY2VzOiB7XG4gICAgICAgICAgICAgIFt1ZGlkS2V5XTogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmdEZXZpY2VQcmVmcyB8fCB7fSwgZGV2aWNlUHJlZnMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgZGVmYXVsdHMudXBkYXRlKHByZWZzVG9VcGRhdGUpO1xuICAgICAgICBsb2cuZGVidWcoYFVwZGF0ZWQgJHt0aGlzLnVkaWR9IFNpbXVsYXRvciBwcmVmZXJlbmNlcyBhdCAnJHtwbGlzdFBhdGh9JyB3aXRoIGAgK1xuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHByZWZzVG9VcGRhdGUpKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy53YXJuKGBDYW5ub3QgdXBkYXRlICR7dGhpcy51ZGlkfSBTaW11bGF0b3IgcHJlZmVyZW5jZXMgYXQgJyR7cGxpc3RQYXRofScuIGAgK1xuICAgICAgICAgIGBUcnkgdG8gZGVsZXRlIHRoZSBmaWxlIG1hbnVhbGx5IGluIG9yZGVyIHRvIHJlc2V0IGl0LiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgY3VycmVudCBTaW11bGF0b3IgdG8gdGhlIGNsZWFuIHN0YXRlLlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFzeW5jIGNsZWFuICgpIHtcbiAgICBsb2cuaW5mbyhgQ2xlYW5pbmcgc2ltdWxhdG9yICR7dGhpcy51ZGlkfWApO1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLmVyYXNlRGV2aWNlKDEwMDAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKiBAb3ZlcnJpZGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFzeW5jIF9hY3RpdmF0ZVdpbmRvdyAoKSB7XG4gICAgbGV0IHNlbGZOYW1lO1xuICAgIGxldCBzZWxmU2RrO1xuICAgIGxldCBib290ZWREZXZpY2VzQ291bnQgPSAwO1xuICAgIGZvciAoY29uc3QgW3NkaywgZGV2aWNlQXJyXSBvZiBfLnRvUGFpcnMoYXdhaXQgdGhpcy5zaW1jdGwuZ2V0RGV2aWNlcygpKSkge1xuICAgICAgZm9yIChjb25zdCB7c3RhdGUsIHVkaWQsIG5hbWV9IG9mIGRldmljZUFycikge1xuICAgICAgICBpZiAoc3RhdGUgPT09ICdCb290ZWQnKSB7XG4gICAgICAgICAgYm9vdGVkRGV2aWNlc0NvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzZWxmTmFtZSAmJiB1ZGlkID09PSB0aGlzLnVkaWQpIHtcbiAgICAgICAgICBzZWxmU2RrID0gc2RrO1xuICAgICAgICAgIHNlbGZOYW1lID0gbmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYm9vdGVkRGV2aWNlc0NvdW50IDwgMikge1xuICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLl9hY3RpdmF0ZVdpbmRvdygpO1xuICAgIH1cblxuICAgIC8vIFRoZXJlIGFyZSBwb3RlbnRpYWxseSBtb3JlIHRoYXQgb25lIFNpbXVsYXRvciB3aW5kb3dcbiAgICByZXR1cm4gYFxuICAgICAgdGVsbCBhcHBsaWNhdGlvbiBcIlN5c3RlbSBFdmVudHNcIlxuICAgICAgICB0ZWxsIHByb2Nlc3MgXCJTaW11bGF0b3JcIlxuICAgICAgICAgIHNldCBmcm9udG1vc3QgdG8gZmFsc2VcbiAgICAgICAgICBzZXQgZnJvbnRtb3N0IHRvIHRydWVcbiAgICAgICAgICBjbGljayAobWVudSBpdGVtIDEgd2hlcmUgKGl0cyBuYW1lIGNvbnRhaW5zIFwiJHtzZWxmTmFtZX0gXCIgYW5kIGl0cyBuYW1lIGNvbnRhaW5zIFwiJHtzZWxmU2RrfVwiKSkgb2YgbWVudSAxIG9mIG1lbnUgYmFyIGl0ZW0gXCJXaW5kb3dcIiBvZiBtZW51IGJhciAxXG4gICAgICAgIGVuZCB0ZWxsXG4gICAgICBlbmQgdGVsbFxuICAgIGA7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhc3luYyBpc0Jpb21ldHJpY0Vucm9sbGVkICgpIHtcbiAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IHRoaXMuc2ltY3RsLnNwYXduUHJvY2VzcyhbXG4gICAgICAnbm90aWZ5dXRpbCcsXG4gICAgICAnLWcnLCBFTlJPTExNRU5UX05PVElGSUNBVElPTl9SRUNFSVZFUlxuICAgIF0pO1xuICAgIGNvbnN0IG1hdGNoID0gKG5ldyBSZWdFeHAoYCR7Xy5lc2NhcGVSZWdFeHAoRU5ST0xMTUVOVF9OT1RJRklDQVRJT05fUkVDRUlWRVIpfVxcXFxzKyhbMDFdKWApKVxuICAgICAgLmV4ZWMoc3Rkb3V0KTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBwYXJzZSBiaW9tZXRyaWMgZW5yb2xsbWVudCBzdGF0ZSBmcm9tICcke3N0ZG91dH0nYCk7XG4gICAgfVxuICAgIGxvZy5pbmZvKGBDdXJyZW50IGJpb21ldHJpYyBlbnJvbGxlZCBzdGF0ZSBmb3IgJHt0aGlzLnVkaWR9IFNpbXVsYXRvcjogJHttYXRjaFsxXX1gKTtcbiAgICByZXR1cm4gbWF0Y2hbMV0gPT09ICcxJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFzeW5jIGVucm9sbEJpb21ldHJpYyAoaXNFbmFibGVkID0gdHJ1ZSkge1xuICAgIGxvZy5kZWJ1ZyhgU2V0dGluZyBiaW9tZXRyaWMgZW5yb2xsZWQgc3RhdGUgZm9yICR7dGhpcy51ZGlkfSBTaW11bGF0b3IgdG8gJyR7aXNFbmFibGVkID8gJ2VuYWJsZWQnIDogJ2Rpc2FibGVkJ30nYCk7XG4gICAgYXdhaXQgdGhpcy5zaW1jdGwuc3Bhd25Qcm9jZXNzKFtcbiAgICAgICdub3RpZnl1dGlsJyxcbiAgICAgICctcycsIEVOUk9MTE1FTlRfTk9USUZJQ0FUSU9OX1JFQ0VJVkVSLCBpc0VuYWJsZWQgPyAnMScgOiAnMCdcbiAgICBdKTtcbiAgICBhd2FpdCB0aGlzLnNpbWN0bC5zcGF3blByb2Nlc3MoW1xuICAgICAgJ25vdGlmeXV0aWwnLFxuICAgICAgJy1wJywgRU5ST0xMTUVOVF9OT1RJRklDQVRJT05fUkVDRUlWRVJcbiAgICBdKTtcbiAgICBpZiAoYXdhaXQgdGhpcy5pc0Jpb21ldHJpY0Vucm9sbGVkKCkgIT09IGlzRW5hYmxlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3Qgc2V0IGJpb21ldHJpYyBlbnJvbGxlZCBzdGF0ZSBmb3IgJHt0aGlzLnVkaWR9IFNpbXVsYXRvciB0byAnJHtpc0VuYWJsZWQgPyAnZW5hYmxlZCcgOiAnZGlzYWJsZWQnfSdgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBub3RpZmljYXRpb24gdG8gbWF0Y2gvbm90IG1hdGNoIHRoZSBwYXJ0aWN1bGFyIGJpb21ldHJpYy5cbiAgICogQG92ZXJyaWRlXG4gICAqXG4gICAqIEBwYXJhbSB7P2Jvb2xlYW59IHNob3VsZE1hdGNoIFt0cnVlXSAtIFNldCBpdCB0byB0cnVlIG9yIGZhbHNlIGluIG9yZGVyIHRvIGVtdWxhdGVcbiAgICogbWF0Y2hpbmcvbm90IG1hdGNoaW5nIHRoZSBjb3JyZXNwb25kaW5nIGJpb21ldHJpY1xuICAgKiBAcGFyYW0gez9zdHJpbmd9IGJpb21ldHJpY05hbWUgW3RvdWNoSWRdIC0gRWl0aGVyIHRvdWNoSWQgb3IgZmFjZUlkIChmYWNlSWQgaXMgb25seSBhdmFpbGFibGUgc2luY2UgaU9TIDExKVxuICAgKi9cbiAgYXN5bmMgc2VuZEJpb21ldHJpY01hdGNoIChzaG91bGRNYXRjaCA9IHRydWUsIGJpb21ldHJpY05hbWUgPSAndG91Y2hJZCcpIHtcbiAgICBjb25zdCBkb21haW5Db21wb25lbnQgPSB0b0Jpb21ldHJpY0RvbWFpbkNvbXBvbmVudChiaW9tZXRyaWNOYW1lKTtcbiAgICBjb25zdCBkb21haW4gPSBgY29tLmFwcGxlLkJpb21ldHJpY0tpdF9TaW0uJHtkb21haW5Db21wb25lbnR9LiR7c2hvdWxkTWF0Y2ggPyAnJyA6ICdubyd9bWF0Y2hgO1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLnNwYXduUHJvY2VzcyhbXG4gICAgICAnbm90aWZ5dXRpbCcsXG4gICAgICAnLXAnLCBkb21haW5cbiAgICBdKTtcbiAgICBsb2cuaW5mbyhgU2VudCBub3RpZmljYXRpb24gJHtkb21haW59IHRvICR7c2hvdWxkTWF0Y2ggPyAnbWF0Y2gnIDogJ25vdCBtYXRjaCd9ICR7YmlvbWV0cmljTmFtZX0gYmlvbWV0cmljIGAgK1xuICAgICAgYGZvciAke3RoaXMudWRpZH0gU2ltdWxhdG9yYCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhc3luYyBnZXRMYXVuY2hEYWVtb25zUm9vdCAoKSB7XG4gICAgY29uc3QgZGV2Um9vdCA9IGF3YWl0IGdldERldmVsb3BlclJvb3QoKTtcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKGRldlJvb3QsXG4gICAgICAnUGxhdGZvcm1zL2lQaG9uZU9TLnBsYXRmb3JtL0RldmVsb3Blci9MaWJyYXJ5L0NvcmVTaW11bGF0b3IvUHJvZmlsZXMvUnVudGltZXMvaU9TLnNpbXJ1bnRpbWUvQ29udGVudHMvUmVzb3VyY2VzL1J1bnRpbWVSb290L1N5c3RlbS9MaWJyYXJ5L0xhdW5jaERhZW1vbnMnKTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbXVsYXRvclhjb2RlOTtcbiJdLCJmaWxlIjoibGliL3NpbXVsYXRvci14Y29kZS05LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
