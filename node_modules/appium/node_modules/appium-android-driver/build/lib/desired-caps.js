"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commonCapConstraints = exports.default = void 0;

require("source-map-support/register");

let commonCapConstraints = {
  platformName: {
    isString: true,
    inclusionCaseInsensitive: ['Android'],
    presence: true
  },
  app: {
    isString: true
  },
  appActivity: {
    isString: true
  },
  appPackage: {
    isString: true
  },
  appWaitActivity: {
    isString: true
  },
  appWaitPackage: {
    isString: true
  },
  appWaitDuration: {
    isNumber: true
  },
  deviceReadyTimeout: {
    isNumber: true
  },
  androidCoverage: {
    isString: true
  },
  androidDeviceReadyTimeout: {
    isNumber: true
  },
  androidDeviceSocket: {
    isString: true
  },
  androidInstallTimeout: {
    isNumber: true
  },
  adbPort: {
    isNumber: true
  },
  remoteAdbHost: {
    isString: true
  },
  adbExecTimeout: {
    isNumber: true
  },
  avd: {
    isString: true
  },
  avdLaunchTimeout: {
    isNumber: true
  },
  avdReadyTimeout: {
    isNumber: true
  },
  avdArgs: {},
  avdEnv: {
    isObject: true
  },
  useKeystore: {
    isBoolean: true
  },
  keystorePath: {
    isString: true
  },
  keystorePassword: {
    isString: true
  },
  keyAlias: {
    isString: true
  },
  keyPassword: {
    isString: true
  },
  webviewDevtoolsPort: {
    isNumber: true
  },
  ensureWebviewsHavePages: {
    isBoolean: true
  },
  enableWebviewDetailsCollection: {
    isBoolean: true
  },
  chromeDriverPort: {
    isNumber: true
  },
  chromedriverPort: {
    isNumber: true
  },
  chromedriverPorts: {
    isArray: true
  },
  chromedriverArgs: {
    isObject: true
  },
  chromedriverExecutable: {
    isString: true
  },
  chromedriverExecutableDir: {
    isString: true
  },
  chromedriverChromeMappingFile: {
    isString: true
  },
  chromedriverUseSystemExecutable: {
    isBoolean: true
  },
  chromedriverDisableBuildCheck: {
    isBoolean: true
  },
  autoWebviewTimeout: {
    isNumber: true
  },
  intentAction: {
    isString: true
  },
  intentCategory: {
    isString: true
  },
  intentFlags: {
    isString: true
  },
  optionalIntentArguments: {
    isString: true
  },
  dontStopAppOnReset: {
    isBoolean: true
  },
  unicodeKeyboard: {
    isBoolean: true
  },
  resetKeyboard: {
    isBoolean: true
  },
  noSign: {
    isBoolean: true
  },
  recreateChromeDriverSessions: {
    isBoolean: false
  },
  autoLaunch: {
    isBoolean: true
  },
  nativeWebScreenshot: {
    isBoolean: true
  },
  androidScreenshotPath: {
    isString: true
  },
  androidInstallPath: {
    isString: true
  },
  clearSystemFiles: {
    isBoolean: true
  },
  extractChromeAndroidPackageFromContextName: {
    isBoolean: true
  },
  autoGrantPermissions: {
    isBoolean: true
  },
  sharedPreferences: {
    isObject: true
  },
  networkSpeed: {
    isString: true
  },
  gpsEnabled: {
    isBoolean: true
  },
  isHeadless: {
    isBoolean: true
  },
  showChromedriverLog: {
    isBoolean: true
  },
  skipUnlock: {
    isBoolean: true
  },
  clearDeviceLogsOnStart: {
    isBoolean: true
  },
  unlockType: {
    isString: true
  },
  unlockKey: {
    isString: true
  },
  otherApps: {
    isString: true
  },
  uninstallOtherPackages: {
    isString: true
  },
  allowTestPackages: {
    isBoolean: true
  },
  pageLoadStrategy: {
    isString: true
  },
  localeScript: {
    isString: true
  },
  skipDeviceInitialization: {
    isBoolean: true
  },
  remoteAppsCacheLimit: {
    isNumber: true
  },
  buildToolsVersion: {
    isString: true
  },
  skipLogcatCapture: {
    isBoolean: true
  },
  chromeOptions: {
    isObject: true
  },
  enablePerformanceLogging: {
    isBoolean: true
  },
  userProfile: {
    isNumber: true
  },
  browserName: {
    isString: true
  },
  enforceAppInstall: {
    isBoolean: true
  },
  suppressKillServer: {
    isBoolean: true
  },
  allowOfflineDevices: {
    isBoolean: true
  },
  ignoreHiddenApiPolicyError: {
    isBoolean: true
  },
  unlockSuccessTimeout: {
    isNumber: true
  },
  mockLocationApp: {
    isString: true
  },
  logcatFormat: {
    isString: true
  },
  logcatFilterSpecs: {
    isArray: true
  },
  allowDelayAdb: {
    isBoolean: true
  }
};
exports.commonCapConstraints = commonCapConstraints;
let uiautomatorCapConstraints = {
  ignoreUnimportantViews: {
    isBoolean: true
  },
  disableAndroidWatchers: {
    isBoolean: true
  },
  acceptSslCerts: {
    isBoolean: true
  },
  androidNaturalOrientation: {
    isBoolean: true
  },
  disableWindowAnimation: {
    isBoolean: true
  },
  bootstrapPort: {
    isNumber: true
  }
};
let desiredCapConstraints = {};
Object.assign(desiredCapConstraints, commonCapConstraints, uiautomatorCapConstraints);
var _default = desiredCapConstraints;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXNpcmVkLWNhcHMuanMiXSwibmFtZXMiOlsiY29tbW9uQ2FwQ29uc3RyYWludHMiLCJwbGF0Zm9ybU5hbWUiLCJpc1N0cmluZyIsImluY2x1c2lvbkNhc2VJbnNlbnNpdGl2ZSIsInByZXNlbmNlIiwiYXBwIiwiYXBwQWN0aXZpdHkiLCJhcHBQYWNrYWdlIiwiYXBwV2FpdEFjdGl2aXR5IiwiYXBwV2FpdFBhY2thZ2UiLCJhcHBXYWl0RHVyYXRpb24iLCJpc051bWJlciIsImRldmljZVJlYWR5VGltZW91dCIsImFuZHJvaWRDb3ZlcmFnZSIsImFuZHJvaWREZXZpY2VSZWFkeVRpbWVvdXQiLCJhbmRyb2lkRGV2aWNlU29ja2V0IiwiYW5kcm9pZEluc3RhbGxUaW1lb3V0IiwiYWRiUG9ydCIsInJlbW90ZUFkYkhvc3QiLCJhZGJFeGVjVGltZW91dCIsImF2ZCIsImF2ZExhdW5jaFRpbWVvdXQiLCJhdmRSZWFkeVRpbWVvdXQiLCJhdmRBcmdzIiwiYXZkRW52IiwiaXNPYmplY3QiLCJ1c2VLZXlzdG9yZSIsImlzQm9vbGVhbiIsImtleXN0b3JlUGF0aCIsImtleXN0b3JlUGFzc3dvcmQiLCJrZXlBbGlhcyIsImtleVBhc3N3b3JkIiwid2Vidmlld0RldnRvb2xzUG9ydCIsImVuc3VyZVdlYnZpZXdzSGF2ZVBhZ2VzIiwiZW5hYmxlV2Vidmlld0RldGFpbHNDb2xsZWN0aW9uIiwiY2hyb21lRHJpdmVyUG9ydCIsImNocm9tZWRyaXZlclBvcnQiLCJjaHJvbWVkcml2ZXJQb3J0cyIsImlzQXJyYXkiLCJjaHJvbWVkcml2ZXJBcmdzIiwiY2hyb21lZHJpdmVyRXhlY3V0YWJsZSIsImNocm9tZWRyaXZlckV4ZWN1dGFibGVEaXIiLCJjaHJvbWVkcml2ZXJDaHJvbWVNYXBwaW5nRmlsZSIsImNocm9tZWRyaXZlclVzZVN5c3RlbUV4ZWN1dGFibGUiLCJjaHJvbWVkcml2ZXJEaXNhYmxlQnVpbGRDaGVjayIsImF1dG9XZWJ2aWV3VGltZW91dCIsImludGVudEFjdGlvbiIsImludGVudENhdGVnb3J5IiwiaW50ZW50RmxhZ3MiLCJvcHRpb25hbEludGVudEFyZ3VtZW50cyIsImRvbnRTdG9wQXBwT25SZXNldCIsInVuaWNvZGVLZXlib2FyZCIsInJlc2V0S2V5Ym9hcmQiLCJub1NpZ24iLCJyZWNyZWF0ZUNocm9tZURyaXZlclNlc3Npb25zIiwiYXV0b0xhdW5jaCIsIm5hdGl2ZVdlYlNjcmVlbnNob3QiLCJhbmRyb2lkU2NyZWVuc2hvdFBhdGgiLCJhbmRyb2lkSW5zdGFsbFBhdGgiLCJjbGVhclN5c3RlbUZpbGVzIiwiZXh0cmFjdENocm9tZUFuZHJvaWRQYWNrYWdlRnJvbUNvbnRleHROYW1lIiwiYXV0b0dyYW50UGVybWlzc2lvbnMiLCJzaGFyZWRQcmVmZXJlbmNlcyIsIm5ldHdvcmtTcGVlZCIsImdwc0VuYWJsZWQiLCJpc0hlYWRsZXNzIiwic2hvd0Nocm9tZWRyaXZlckxvZyIsInNraXBVbmxvY2siLCJjbGVhckRldmljZUxvZ3NPblN0YXJ0IiwidW5sb2NrVHlwZSIsInVubG9ja0tleSIsIm90aGVyQXBwcyIsInVuaW5zdGFsbE90aGVyUGFja2FnZXMiLCJhbGxvd1Rlc3RQYWNrYWdlcyIsInBhZ2VMb2FkU3RyYXRlZ3kiLCJsb2NhbGVTY3JpcHQiLCJza2lwRGV2aWNlSW5pdGlhbGl6YXRpb24iLCJyZW1vdGVBcHBzQ2FjaGVMaW1pdCIsImJ1aWxkVG9vbHNWZXJzaW9uIiwic2tpcExvZ2NhdENhcHR1cmUiLCJjaHJvbWVPcHRpb25zIiwiZW5hYmxlUGVyZm9ybWFuY2VMb2dnaW5nIiwidXNlclByb2ZpbGUiLCJicm93c2VyTmFtZSIsImVuZm9yY2VBcHBJbnN0YWxsIiwic3VwcHJlc3NLaWxsU2VydmVyIiwiYWxsb3dPZmZsaW5lRGV2aWNlcyIsImlnbm9yZUhpZGRlbkFwaVBvbGljeUVycm9yIiwidW5sb2NrU3VjY2Vzc1RpbWVvdXQiLCJtb2NrTG9jYXRpb25BcHAiLCJsb2djYXRGb3JtYXQiLCJsb2djYXRGaWx0ZXJTcGVjcyIsImFsbG93RGVsYXlBZGIiLCJ1aWF1dG9tYXRvckNhcENvbnN0cmFpbnRzIiwiaWdub3JlVW5pbXBvcnRhbnRWaWV3cyIsImRpc2FibGVBbmRyb2lkV2F0Y2hlcnMiLCJhY2NlcHRTc2xDZXJ0cyIsImFuZHJvaWROYXR1cmFsT3JpZW50YXRpb24iLCJkaXNhYmxlV2luZG93QW5pbWF0aW9uIiwiYm9vdHN0cmFwUG9ydCIsImRlc2lyZWRDYXBDb25zdHJhaW50cyIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBSUEsb0JBQW9CLEdBQUc7QUFDekJDLEVBQUFBLFlBQVksRUFBRTtBQUNaQyxJQUFBQSxRQUFRLEVBQUUsSUFERTtBQUVaQyxJQUFBQSx3QkFBd0IsRUFBRSxDQUFDLFNBQUQsQ0FGZDtBQUdaQyxJQUFBQSxRQUFRLEVBQUU7QUFIRSxHQURXO0FBTXpCQyxFQUFBQSxHQUFHLEVBQUU7QUFDSEgsSUFBQUEsUUFBUSxFQUFFO0FBRFAsR0FOb0I7QUFTekJJLEVBQUFBLFdBQVcsRUFBRTtBQUNYSixJQUFBQSxRQUFRLEVBQUU7QUFEQyxHQVRZO0FBWXpCSyxFQUFBQSxVQUFVLEVBQUU7QUFDVkwsSUFBQUEsUUFBUSxFQUFFO0FBREEsR0FaYTtBQWV6Qk0sRUFBQUEsZUFBZSxFQUFFO0FBQ2ZOLElBQUFBLFFBQVEsRUFBRTtBQURLLEdBZlE7QUFrQnpCTyxFQUFBQSxjQUFjLEVBQUU7QUFDZFAsSUFBQUEsUUFBUSxFQUFFO0FBREksR0FsQlM7QUFxQnpCUSxFQUFBQSxlQUFlLEVBQUU7QUFDZkMsSUFBQUEsUUFBUSxFQUFFO0FBREssR0FyQlE7QUF3QnpCQyxFQUFBQSxrQkFBa0IsRUFBRTtBQUNsQkQsSUFBQUEsUUFBUSxFQUFFO0FBRFEsR0F4Qks7QUEyQnpCRSxFQUFBQSxlQUFlLEVBQUU7QUFDZlgsSUFBQUEsUUFBUSxFQUFFO0FBREssR0EzQlE7QUE4QnpCWSxFQUFBQSx5QkFBeUIsRUFBRTtBQUN6QkgsSUFBQUEsUUFBUSxFQUFFO0FBRGUsR0E5QkY7QUFpQ3pC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QUFqUVUsQ0FBM0I7O0FBc1FBLElBQUlrRSx5QkFBeUIsR0FBRztBQUM5QkMsRUFBQUEsc0JBQXNCLEVBQUU7QUFDdEJuRSxJQUFBQSxTQUFTLEVBQUU7QUFEVyxHQURNO0FBSTlCb0UsRUFBQUEsc0JBQXNCLEVBQUU7QUFDdEJwRSxJQUFBQSxTQUFTLEVBQUU7QUFEVyxHQUpNO0FBTzlCcUUsRUFBQUEsY0FBYyxFQUFFO0FBQ2RyRSxJQUFBQSxTQUFTLEVBQUU7QUFERyxHQVBjO0FBVTlCc0UsRUFBQUEseUJBQXlCLEVBQUU7QUFDekJ0RSxJQUFBQSxTQUFTLEVBQUU7QUFEYyxHQVZHO0FBYTlCdUUsRUFBQUEsc0JBQXNCLEVBQUU7QUFDdEJ2RSxJQUFBQSxTQUFTLEVBQUU7QUFEVyxHQWJNO0FBZ0I5QndFLEVBQUFBLGFBQWEsRUFBRTtBQUNieEYsSUFBQUEsUUFBUSxFQUFFO0FBREc7QUFoQmUsQ0FBaEM7QUFxQkEsSUFBSXlGLHFCQUFxQixHQUFHLEVBQTVCO0FBRUFDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjRixxQkFBZCxFQUFxQ3BHLG9CQUFyQyxFQUNjNkYseUJBRGQ7ZUFHZU8scUIiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgY29tbW9uQ2FwQ29uc3RyYWludHMgPSB7XG4gIHBsYXRmb3JtTmFtZToge1xuICAgIGlzU3RyaW5nOiB0cnVlLFxuICAgIGluY2x1c2lvbkNhc2VJbnNlbnNpdGl2ZTogWydBbmRyb2lkJ10sXG4gICAgcHJlc2VuY2U6IHRydWVcbiAgfSxcbiAgYXBwOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgYXBwQWN0aXZpdHk6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBhcHBQYWNrYWdlOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgYXBwV2FpdEFjdGl2aXR5OiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgYXBwV2FpdFBhY2thZ2U6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBhcHBXYWl0RHVyYXRpb246IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICBkZXZpY2VSZWFkeVRpbWVvdXQ6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICBhbmRyb2lkQ292ZXJhZ2U6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBhbmRyb2lkRGV2aWNlUmVhZHlUaW1lb3V0OiB7XG4gICAgaXNOdW1iZXI6IHRydWVcbiAgfSxcbiAgYW5kcm9pZERldmljZVNvY2tldDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGFuZHJvaWRJbnN0YWxsVGltZW91dDoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIGFkYlBvcnQ6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICByZW1vdGVBZGJIb3N0OiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgYWRiRXhlY1RpbWVvdXQ6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICBhdmQ6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBhdmRMYXVuY2hUaW1lb3V0OiB7XG4gICAgaXNOdW1iZXI6IHRydWVcbiAgfSxcbiAgYXZkUmVhZHlUaW1lb3V0OiB7XG4gICAgaXNOdW1iZXI6IHRydWVcbiAgfSxcbiAgYXZkQXJnczoge1xuICAgIC8vIGNvdWxkIGJlIGEgc3RyaW5nIG9yIGFuIGFycmF5XG4gIH0sXG4gIGF2ZEVudjoge1xuICAgIGlzT2JqZWN0OiB0cnVlXG4gIH0sXG4gIHVzZUtleXN0b3JlOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGtleXN0b3JlUGF0aDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGtleXN0b3JlUGFzc3dvcmQ6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBrZXlBbGlhczoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGtleVBhc3N3b3JkOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgd2Vidmlld0RldnRvb2xzUG9ydDoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIGVuc3VyZVdlYnZpZXdzSGF2ZVBhZ2VzOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGVuYWJsZVdlYnZpZXdEZXRhaWxzQ29sbGVjdGlvbjoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICAvLyB0aGlzIG9uZSBpcyBkZXByZWNhdGVkXG4gIGNocm9tZURyaXZlclBvcnQ6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICAvLyBkdXBsaWNhdGUgb2YgYWJvdmUgd2l0aCBiZXR0ZXIgc3BlbGxpbmdcbiAgY2hyb21lZHJpdmVyUG9ydDoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIGNocm9tZWRyaXZlclBvcnRzOiB7XG4gICAgaXNBcnJheTogdHJ1ZVxuICB9LFxuICBjaHJvbWVkcml2ZXJBcmdzOiB7XG4gICAgaXNPYmplY3Q6IHRydWUsXG4gIH0sXG4gIGNocm9tZWRyaXZlckV4ZWN1dGFibGU6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBjaHJvbWVkcml2ZXJFeGVjdXRhYmxlRGlyOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgY2hyb21lZHJpdmVyQ2hyb21lTWFwcGluZ0ZpbGU6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBjaHJvbWVkcml2ZXJVc2VTeXN0ZW1FeGVjdXRhYmxlOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGNocm9tZWRyaXZlckRpc2FibGVCdWlsZENoZWNrOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGF1dG9XZWJ2aWV3VGltZW91dDoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIGludGVudEFjdGlvbjoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGludGVudENhdGVnb3J5OiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgaW50ZW50RmxhZ3M6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBvcHRpb25hbEludGVudEFyZ3VtZW50czoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGRvbnRTdG9wQXBwT25SZXNldDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICB1bmljb2RlS2V5Ym9hcmQ6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgcmVzZXRLZXlib2FyZDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBub1NpZ246IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgcmVjcmVhdGVDaHJvbWVEcml2ZXJTZXNzaW9uczoge1xuICAgIGlzQm9vbGVhbjogZmFsc2VcbiAgfSxcbiAgYXV0b0xhdW5jaDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBuYXRpdmVXZWJTY3JlZW5zaG90OiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGFuZHJvaWRTY3JlZW5zaG90UGF0aDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGFuZHJvaWRJbnN0YWxsUGF0aDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGNsZWFyU3lzdGVtRmlsZXM6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgZXh0cmFjdENocm9tZUFuZHJvaWRQYWNrYWdlRnJvbUNvbnRleHROYW1lOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGF1dG9HcmFudFBlcm1pc3Npb25zOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHNoYXJlZFByZWZlcmVuY2VzOiB7XG4gICAgaXNPYmplY3Q6IHRydWVcbiAgfSxcbiAgbmV0d29ya1NwZWVkOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgZ3BzRW5hYmxlZDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBpc0hlYWRsZXNzOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHNob3dDaHJvbWVkcml2ZXJMb2c6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgc2tpcFVubG9jazoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBjbGVhckRldmljZUxvZ3NPblN0YXJ0OiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHVubG9ja1R5cGU6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICB1bmxvY2tLZXk6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBvdGhlckFwcHM6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICB1bmluc3RhbGxPdGhlclBhY2thZ2VzOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgYWxsb3dUZXN0UGFja2FnZXM6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgcGFnZUxvYWRTdHJhdGVneToge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGxvY2FsZVNjcmlwdDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIHNraXBEZXZpY2VJbml0aWFsaXphdGlvbjoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICByZW1vdGVBcHBzQ2FjaGVMaW1pdDoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIGJ1aWxkVG9vbHNWZXJzaW9uOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgc2tpcExvZ2NhdENhcHR1cmU6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgY2hyb21lT3B0aW9uczoge1xuICAgIGlzT2JqZWN0OiB0cnVlXG4gIH0sXG4gIGVuYWJsZVBlcmZvcm1hbmNlTG9nZ2luZzoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICB1c2VyUHJvZmlsZToge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIGJyb3dzZXJOYW1lOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgZW5mb3JjZUFwcEluc3RhbGw6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgc3VwcHJlc3NLaWxsU2VydmVyOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGFsbG93T2ZmbGluZURldmljZXM6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgaWdub3JlSGlkZGVuQXBpUG9saWN5RXJyb3I6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgdW5sb2NrU3VjY2Vzc1RpbWVvdXQ6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICBtb2NrTG9jYXRpb25BcHA6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBsb2djYXRGb3JtYXQ6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBsb2djYXRGaWx0ZXJTcGVjczoge1xuICAgIGlzQXJyYXk6IHRydWVcbiAgfSxcbiAgYWxsb3dEZWxheUFkYjoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9XG59O1xuXG5sZXQgdWlhdXRvbWF0b3JDYXBDb25zdHJhaW50cyA9IHtcbiAgaWdub3JlVW5pbXBvcnRhbnRWaWV3czoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBkaXNhYmxlQW5kcm9pZFdhdGNoZXJzOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGFjY2VwdFNzbENlcnRzOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGFuZHJvaWROYXR1cmFsT3JpZW50YXRpb246IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgZGlzYWJsZVdpbmRvd0FuaW1hdGlvbjoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBib290c3RyYXBQb3J0OiB7XG4gICAgaXNOdW1iZXI6IHRydWVcbiAgfSxcbn07XG5cbmxldCBkZXNpcmVkQ2FwQ29uc3RyYWludHMgPSB7fTtcblxuT2JqZWN0LmFzc2lnbihkZXNpcmVkQ2FwQ29uc3RyYWludHMsIGNvbW1vbkNhcENvbnN0cmFpbnRzLFxuICAgICAgICAgICAgICB1aWF1dG9tYXRvckNhcENvbnN0cmFpbnRzKTtcblxuZXhwb3J0IGRlZmF1bHQgZGVzaXJlZENhcENvbnN0cmFpbnRzO1xuZXhwb3J0IHsgY29tbW9uQ2FwQ29uc3RyYWludHMgfTtcbiJdLCJmaWxlIjoibGliL2Rlc2lyZWQtY2Fwcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
