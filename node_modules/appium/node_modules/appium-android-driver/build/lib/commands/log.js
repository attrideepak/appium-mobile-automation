"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _os = _interopRequireDefault(require("os"));

var _lodash = _interopRequireDefault(require("lodash"));

var _ws = _interopRequireDefault(require("ws"));

var _appiumBaseDriver = require("appium-base-driver");

const GET_SERVER_LOGS_FEATURE = 'get_server_logs';
let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

const WEBSOCKET_ENDPOINT = sessionId => `${_appiumBaseDriver.DEFAULT_WS_PATHNAME_PREFIX}/session/${sessionId}/appium/device/logcat`;

function toLogRecord(timestamp, level, message) {
  return {
    timestamp,
    level,
    message
  };
}

extensions.supportedLogTypes = {
  logcat: {
    description: 'Logs for Android applications on real device and emulators via ADB',
    getter: async self => await self.adb.getLogcatLogs()
  },
  bugreport: {
    description: `'adb bugreport' output for advanced issues diagnostic`,
    getter: async self => {
      const output = await self.adb.bugreport();
      const timestamp = Date.now();
      return output.split(_os.default.EOL).map(x => toLogRecord(timestamp, 'ALL', x));
    }
  },
  server: {
    description: 'Appium server logs',
    getter: self => {
      self.ensureFeatureEnabled(GET_SERVER_LOGS_FEATURE);
      const timestamp = Date.now();
      return _logger.default.unwrap().record.map(x => toLogRecord(timestamp, 'ALL', _lodash.default.isEmpty(x.prefix) ? x.message : `[${x.prefix}] ${x.message}`));
    }
  }
};

commands.mobileStartLogsBroadcast = async function mobileStartLogsBroadcast() {
  const pathname = WEBSOCKET_ENDPOINT(this.sessionId);

  if (!_lodash.default.isEmpty(await this.server.getWebSocketHandlers(pathname))) {
    _logger.default.debug(`The logcat broadcasting web socket server is already listening at ${pathname}`);

    return;
  }

  _logger.default.info(`Assigning logcat broadcasting web socket server to ${pathname}`);

  const wss = new _ws.default.Server({
    noServer: true
  });
  wss.on('connection', (ws, req) => {
    if (req) {
      const remoteIp = _lodash.default.isEmpty(req.headers['x-forwarded-for']) ? req.connection.remoteAddress : req.headers['x-forwarded-for'];

      _logger.default.debug(`Established a new logcat listener web socket connection from ${remoteIp}`);
    } else {
      _logger.default.debug('Established a new logcat listener web socket connection');
    }

    if (_lodash.default.isEmpty(this._logcatWebsocketListener)) {
      this._logcatWebsocketListener = logRecord => {
        if (ws && ws.readyState === _ws.default.OPEN) {
          ws.send(logRecord.message);
        }
      };
    }

    this.adb.setLogcatListener(this._logcatWebsocketListener);
    ws.on('close', (code, reason) => {
      if (!_lodash.default.isEmpty(this._logcatWebsocketListener)) {
        try {
          this.adb.removeLogcatListener(this._logcatWebsocketListener);
        } catch (ign) {}

        this._logcatWebsocketListener = null;
      }

      let closeMsg = 'Logcat listener web socket is closed.';

      if (!_lodash.default.isEmpty(code)) {
        closeMsg += ` Code: ${code}.`;
      }

      if (!_lodash.default.isEmpty(reason)) {
        closeMsg += ` Reason: ${reason}.`;
      }

      _logger.default.debug(closeMsg);
    });
  });
  await this.server.addWebSocketHandler(pathname, wss);
};

commands.mobileStopLogsBroadcast = async function mobileStopLogsBroadcast() {
  const pathname = WEBSOCKET_ENDPOINT(this.sessionId);

  if (_lodash.default.isEmpty(await this.server.getWebSocketHandlers(pathname))) {
    return;
  }

  _logger.default.debug('Stopping the logcat broadcasting web socket server');

  await this.server.removeWebSocketHandler(pathname);
};

commands.getLogTypes = async function getLogTypes() {
  const nativeLogTypes = await _appiumBaseDriver.BaseDriver.prototype.getLogTypes.call(this);

  if (this.isWebContext()) {
    const webLogTypes = await this.chromedriver.jwproxy.command('/log/types', 'GET');
    return [...nativeLogTypes, ...webLogTypes];
  }

  return nativeLogTypes;
};

commands.getLog = async function getLog(logType) {
  if (this.isWebContext() && !_lodash.default.keys(this.supportedLogTypes).includes(logType)) {
    return await this.chromedriver.jwproxy.command('/log', 'POST', {
      type: logType
    });
  }

  return await _appiumBaseDriver.BaseDriver.prototype.getLog.call(this, logType);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
