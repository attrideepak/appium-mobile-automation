"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAndroidBinaryPath = getAndroidBinaryPath;
Object.defineProperty(exports, "DEFAULT_ADB_EXEC_TIMEOUT", {
  enumerable: true,
  get: function () {
    return _helpers.DEFAULT_ADB_EXEC_TIMEOUT;
  }
});
exports.default = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _helpers = require("../helpers");

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _semver = _interopRequireDefault(require("semver"));

let systemCallMethods = {};
const DEFAULT_ADB_REBOOT_RETRIES = 90;
const LINKER_WARNING_REGEXP = /^WARNING: linker.+$/m;
const ADB_RETRY_ERROR_PATTERNS = [/protocol fault \(no status\)/i, /error: device ('.+' )?not found/i, /error: device still connecting/i];
const BINARY_VERSION_PATTERN = /^Version ([\d.]+)-(\d+)/m;
const BRIDGE_VERSION_PATTERN = /^Android Debug Bridge version ([\d.]+)/m;
const CERTS_ROOT = '/system/etc/security/cacerts';
const SDK_BINARY_ROOTS = ['platform-tools', 'emulator', ['cmdline-tools', 'latest', 'bin'], 'tools', ['tools', 'bin'], '.'];
const MIN_DELAY_ADB_API_LEVEL = 28;

systemCallMethods.getSdkBinaryPath = async function getSdkBinaryPath(binaryName) {
  return await this.getBinaryFromSdkRoot(binaryName);
};

systemCallMethods.getBinaryNameForOS = _lodash.default.memoize(function getBinaryNameForOSMemorize(binaryName) {
  return getBinaryNameForOS(binaryName);
});

function getBinaryNameForOS(binaryName) {
  if (!_appiumSupport.system.isWindows()) {
    return binaryName;
  }

  if (['android', 'apksigner', 'apkanalyzer'].includes(binaryName)) {
    return `${binaryName}.bat`;
  }

  if (!_path.default.extname(binaryName)) {
    return `${binaryName}.exe`;
  }

  return binaryName;
}

systemCallMethods.getBinaryFromSdkRoot = async function getBinaryFromSdkRoot(binaryName) {
  if (this.binaries[binaryName]) {
    return this.binaries[binaryName];
  }

  const fullBinaryName = this.getBinaryNameForOS(binaryName);
  const binaryLocs = getSdkBinaryLocationCandidates(this.sdkRoot, fullBinaryName);
  let buildToolsDirs = await (0, _helpers.getBuildToolsDirs)(this.sdkRoot);

  if (this.buildToolsVersion) {
    buildToolsDirs = buildToolsDirs.filter(x => _path.default.basename(x) === this.buildToolsVersion);

    if (_lodash.default.isEmpty(buildToolsDirs)) {
      _logger.default.info(`Found no build tools whose version matches to '${this.buildToolsVersion}'`);
    } else {
      _logger.default.info(`Using build tools at '${buildToolsDirs}'`);
    }
  }

  binaryLocs.push(..._lodash.default.flatten(buildToolsDirs.map(dir => [_path.default.resolve(dir, fullBinaryName), _path.default.resolve(dir, 'lib', fullBinaryName)])));
  let binaryLoc = null;

  for (const loc of binaryLocs) {
    if (await _appiumSupport.fs.exists(loc)) {
      binaryLoc = loc;
      break;
    }
  }

  if (_lodash.default.isNull(binaryLoc)) {
    throw new Error(`Could not find '${fullBinaryName}' in ${JSON.stringify(binaryLocs)}. ` + `Do you have Android Build Tools ${this.buildToolsVersion ? `v ${this.buildToolsVersion} ` : ''}` + `installed at '${this.sdkRoot}'?`);
  }

  _logger.default.info(`Using '${fullBinaryName}' from '${binaryLoc}'`);

  this.binaries[binaryName] = binaryLoc;
  return binaryLoc;
};

function getSdkBinaryLocationCandidates(sdkRoot, fullBinaryName) {
  return SDK_BINARY_ROOTS.map(x => _path.default.resolve(sdkRoot, ...(_lodash.default.isArray(x) ? x : [x]), fullBinaryName));
}

async function getAndroidBinaryPath(binaryName) {
  const fullBinaryName = getBinaryNameForOS(binaryName);
  const sdkRoot = (0, _helpers.getSdkRootFromEnv)();
  const binaryLocs = getSdkBinaryLocationCandidates(sdkRoot, fullBinaryName);

  for (const loc of binaryLocs) {
    if (await _appiumSupport.fs.exists(loc)) {
      return loc;
    }
  }

  throw new Error(`Could not find '${fullBinaryName}' in ${JSON.stringify(binaryLocs)}. ` + `Do you have Android Build Tools installed at '${sdkRoot}'?`);
}

systemCallMethods.getBinaryFromPath = async function getBinaryFromPath(binaryName) {
  if (this.binaries[binaryName]) {
    return this.binaries[binaryName];
  }

  const fullBinaryName = this.getBinaryNameForOS(binaryName);

  try {
    const binaryLoc = await _appiumSupport.fs.which(fullBinaryName);

    _logger.default.info(`Using '${fullBinaryName}' from '${binaryLoc}'`);

    this.binaries[binaryName] = binaryLoc;
    return binaryLoc;
  } catch (e) {
    throw new Error(`Could not find '${fullBinaryName}' in PATH. Please set the ANDROID_HOME ` + `or ANDROID_SDK_ROOT environment variables to the correct Android SDK root directory path.`);
  }
};

systemCallMethods.getConnectedDevices = async function getConnectedDevices() {
  _logger.default.debug('Getting connected devices');

  let stdout;

  try {
    ({
      stdout
    } = await (0, _teen_process.exec)(this.executable.path, [...this.executable.defaultArgs, 'devices']));
  } catch (e) {
    throw new Error(`Error while getting connected devices. Original error: ${e.message}`);
  }

  const listHeader = 'List of devices';
  const startingIndex = stdout.indexOf(listHeader);

  if (startingIndex < 0) {
    throw new Error(`Unexpected output while trying to get devices: ${stdout}`);
  }

  stdout = stdout.slice(startingIndex);
  let excludedLines = [listHeader, 'adb server', '* daemon'];

  if (!this.allowOfflineDevices) {
    excludedLines.push('offline');
  }

  const devices = stdout.split('\n').map(_lodash.default.trim).filter(line => line && !excludedLines.some(x => line.includes(x))).reduce((acc, line) => {
    const [udid, state] = line.split(/\s+/);
    acc.push({
      udid,
      state
    });
    return acc;
  }, []);

  if (_lodash.default.isEmpty(devices)) {
    _logger.default.debug('No connected devices have been detected');
  } else {
    _logger.default.debug(`Connected devices: ${JSON.stringify(devices)}`);
  }

  return devices;
};

systemCallMethods.getDevicesWithRetry = async function getDevicesWithRetry(timeoutMs = 20000) {
  const timer = new _appiumSupport.timing.Timer().start();

  _logger.default.debug('Trying to find a connected android device');

  const getDevices = async () => {
    if (timer.getDuration().asMilliSeconds > timeoutMs) {
      throw new Error(`Could not find a connected Android device in ${timer.getDuration().asMilliSeconds.toFixed(0)}ms.`);
    }

    try {
      const devices = await this.getConnectedDevices();

      if (devices.length > 0) {
        return devices;
      }
    } catch (ign) {}

    _logger.default.debug('Could not find online devices');

    try {
      await this.reconnect();
    } catch (ign) {
      await this.restartAdb();
    }

    await (0, _asyncbox.sleep)(200);
    return await getDevices();
  };

  return await getDevices();
};

systemCallMethods.reconnect = async function reconnect(target = 'offline') {
  _logger.default.debug(`Reconnecting adb (target ${target})`);

  const args = ['reconnect'];

  if (target) {
    args.push(target);
  }

  try {
    await this.adbExec(args);
  } catch (e) {
    throw new Error(`Cannot reconnect adb. Original error: ${e.stderr || e.message}`);
  }
};

systemCallMethods.restartAdb = async function restartAdb() {
  if (this.suppressKillServer) {
    _logger.default.debug(`Not restarting abd since 'suppressKillServer' is on`);

    return;
  }

  _logger.default.debug('Restarting adb');

  try {
    await this.killServer();
    await this.adbExec(['start-server']);
  } catch (e) {
    _logger.default.error(`Error killing ADB server, going to see if it's online anyway`);
  }
};

systemCallMethods.killServer = async function killServer() {
  _logger.default.debug(`Killing adb server on port '${this.adbPort}'`);

  await this.adbExec(['kill-server'], {
    exclusive: true
  });
};

systemCallMethods.resetTelnetAuthToken = _lodash.default.memoize(async function resetTelnetAuthToken() {
  const homeFolderPath = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];

  if (!homeFolderPath) {
    _logger.default.warn(`Cannot find the path to user home folder. Ignoring resetting of emulator's telnet authentication token`);

    return false;
  }

  const dstPath = _path.default.resolve(homeFolderPath, '.emulator_console_auth_token');

  _logger.default.debug(`Overriding ${dstPath} with an empty string to avoid telnet authentication for emulator commands`);

  try {
    await _appiumSupport.fs.writeFile(dstPath, '');
  } catch (e) {
    _logger.default.warn(`Error ${e.message} while resetting the content of ${dstPath}. Ignoring resetting of emulator's telnet authentication token`);

    return false;
  }

  return true;
});

systemCallMethods.adbExecEmu = async function adbExecEmu(cmd) {
  await this.verifyEmulatorConnected();
  await this.resetTelnetAuthToken();
  await this.adbExec(['emu', ...cmd]);
};

let isExecLocked = false;

systemCallMethods.adbExec = async function adbExec(cmd, opts = {}) {
  if (!cmd) {
    throw new Error('You need to pass in a command to adbExec()');
  }

  opts = _lodash.default.cloneDeep(opts);
  opts.timeout = opts.timeout || this.adbExecTimeout || _helpers.DEFAULT_ADB_EXEC_TIMEOUT;
  opts.timeoutCapName = opts.timeoutCapName || 'adbExecTimeout';
  cmd = _lodash.default.isArray(cmd) ? cmd : [cmd];
  let adbRetried = false;

  const execFunc = async () => {
    try {
      const args = [...this.executable.defaultArgs, ...cmd];

      _logger.default.debug(`Running '${this.executable.path} ` + (args.find(arg => /\s+/.test(arg)) ? _appiumSupport.util.quote(args) : args.join(' ')) + `'`);

      let {
        stdout
      } = await (0, _teen_process.exec)(this.executable.path, args, opts);
      stdout = stdout.replace(LINKER_WARNING_REGEXP, '').trim();
      return stdout;
    } catch (e) {
      const errText = `${e.message}, ${e.stdout}, ${e.stderr}`;

      if (ADB_RETRY_ERROR_PATTERNS.some(p => p.test(errText))) {
        _logger.default.info(`Error sending command, reconnecting device and retrying: ${cmd}`);

        await (0, _asyncbox.sleep)(1000);
        await this.getDevicesWithRetry();

        if (adbRetried) {
          adbRetried = true;
          return await execFunc();
        }
      }

      if (e.code === 0 && e.stdout) {
        return e.stdout.replace(LINKER_WARNING_REGEXP, '').trim();
      }

      if (_lodash.default.isNull(e.code)) {
        e.message = `Error executing adbExec. Original error: '${e.message}'. ` + `Try to increase the ${opts.timeout}ms adb execution timeout represented by '${opts.timeoutCapName}' capability`;
      } else {
        e.message = `Error executing adbExec. Original error: '${e.message}'; ` + `Stderr: '${(e.stderr || '').trim()}'; Code: '${e.code}'`;
      }

      throw e;
    }
  };

  if (isExecLocked) {
    _logger.default.debug('Waiting until the other exclusive ADB command is completed');

    await (0, _asyncbox.waitForCondition)(() => !isExecLocked, {
      waitMs: Number.MAX_SAFE_INTEGER,
      intervalMs: 10
    });

    _logger.default.debug('Continuing with the current ADB command');
  }

  if (opts.exclusive) {
    isExecLocked = true;
  }

  try {
    return await execFunc();
  } finally {
    if (opts.exclusive) {
      isExecLocked = false;
    }
  }
};

systemCallMethods.shell = async function shell(cmd, opts = {}) {
  const {
    privileged
  } = opts;
  const cmdArr = _lodash.default.isArray(cmd) ? cmd : [cmd];
  const fullCmd = ['shell'];

  if (privileged) {
    _logger.default.info(`'adb shell ${_appiumSupport.util.quote(cmdArr)}' requires root access`);

    if (await this.isRoot()) {
      _logger.default.info('The device already had root access');

      fullCmd.push(...cmdArr);
    } else {
      fullCmd.push('su', 'root', _appiumSupport.util.quote(cmdArr));
    }
  } else {
    fullCmd.push(...cmdArr);
  }

  return await this.adbExec(fullCmd, opts);
};

systemCallMethods.createSubProcess = function createSubProcess(args = []) {
  args = [...this.executable.defaultArgs, ...args];

  _logger.default.debug(`Creating ADB subprocess with args: ${JSON.stringify(args)}`);

  return new _teen_process.SubProcess(this.getAdbPath(), args);
};

systemCallMethods.getAdbServerPort = function getAdbServerPort() {
  return this.adbPort;
};

systemCallMethods.getEmulatorPort = async function getEmulatorPort() {
  _logger.default.debug('Getting running emulator port');

  if (this.emulatorPort !== null) {
    return this.emulatorPort;
  }

  try {
    let devices = await this.getConnectedDevices();
    let port = this.getPortFromEmulatorString(devices[0].udid);

    if (port) {
      return port;
    } else {
      throw new Error(`Emulator port not found`);
    }
  } catch (e) {
    throw new Error(`No devices connected. Original error: ${e.message}`);
  }
};

systemCallMethods.getPortFromEmulatorString = function getPortFromEmulatorString(emStr) {
  let portPattern = /emulator-(\d+)/;

  if (portPattern.test(emStr)) {
    return parseInt(portPattern.exec(emStr)[1], 10);
  }

  return false;
};

systemCallMethods.getConnectedEmulators = async function getConnectedEmulators() {
  _logger.default.debug('Getting connected emulators');

  try {
    let devices = await this.getConnectedDevices();
    let emulators = [];

    for (let device of devices) {
      let port = this.getPortFromEmulatorString(device.udid);

      if (port) {
        device.port = port;
        emulators.push(device);
      }
    }

    _logger.default.debug(`${_appiumSupport.util.pluralize('emulator', emulators.length, true)} connected`);

    return emulators;
  } catch (e) {
    throw new Error(`Error getting emulators. Original error: ${e.message}`);
  }
};

systemCallMethods.setEmulatorPort = function setEmulatorPort(emPort) {
  this.emulatorPort = emPort;
};

systemCallMethods.setDeviceId = function setDeviceId(deviceId) {
  _logger.default.debug(`Setting device id to ${deviceId}`);

  this.curDeviceId = deviceId;
  let argsHasDevice = this.executable.defaultArgs.indexOf('-s');

  if (argsHasDevice !== -1) {
    this.executable.defaultArgs.splice(argsHasDevice, 2);
  }

  this.executable.defaultArgs.push('-s', deviceId);
};

systemCallMethods.setDevice = function setDevice(deviceObj) {
  let deviceId = deviceObj.udid;
  let emPort = this.getPortFromEmulatorString(deviceId);
  this.setEmulatorPort(emPort);
  this.setDeviceId(deviceId);
};

systemCallMethods.getRunningAVD = async function getRunningAVD(avdName) {
  _logger.default.debug(`Trying to find '${avdName}' emulator`);

  try {
    const emulators = await this.getConnectedEmulators();

    for (const emulator of emulators) {
      this.setEmulatorPort(emulator.port);
      const runningAVDName = await this.execEmuConsoleCommand(['avd', 'name'], {
        port: emulator.port,
        execTimeout: 5000,
        connTimeout: 1000
      });

      if (_lodash.default.toLower(avdName) === _lodash.default.toLower(runningAVDName.trim())) {
        _logger.default.debug(`Found emulator '${avdName}' on port ${emulator.port}`);

        this.setDeviceId(emulator.udid);
        return emulator;
      }
    }

    _logger.default.debug(`Emulator '${avdName}' not running`);

    return null;
  } catch (e) {
    throw new Error(`Error getting AVD. Original error: ${e.message}`);
  }
};

systemCallMethods.getRunningAVDWithRetry = async function getRunningAVDWithRetry(avdName, timeoutMs = 20000) {
  try {
    return await (0, _asyncbox.waitForCondition)(async () => {
      try {
        return await this.getRunningAVD(avdName.replace('@', ''));
      } catch (e) {
        _logger.default.debug(e.message);

        return false;
      }
    }, {
      waitMs: timeoutMs,
      intervalMs: 1000
    });
  } catch (e) {
    throw new Error(`Error getting AVD with retry. Original error: ${e.message}`);
  }
};

systemCallMethods.killAllEmulators = async function killAllEmulators() {
  let cmd, args;

  if (_appiumSupport.system.isWindows()) {
    cmd = 'TASKKILL';
    args = ['TASKKILL', '/IM', 'emulator.exe'];
  } else {
    cmd = '/usr/bin/killall';
    args = ['-m', 'emulator*'];
  }

  try {
    await (0, _teen_process.exec)(cmd, args);
  } catch (e) {
    throw new Error(`Error killing emulators. Original error: ${e.message}`);
  }
};

systemCallMethods.killEmulator = async function killEmulator(avdName = null, timeout = 60000) {
  if (_appiumSupport.util.hasValue(avdName)) {
    _logger.default.debug(`Killing avd '${avdName}'`);

    const device = await this.getRunningAVD(avdName);

    if (!device) {
      _logger.default.info(`No avd with name '${avdName}' running. Skipping kill step.`);

      return false;
    }
  } else {
    _logger.default.debug(`Killing avd with id '${this.curDeviceId}'`);

    if (!(await this.isEmulatorConnected())) {
      _logger.default.debug(`Emulator with id '${this.curDeviceId}' not connected. Skipping kill step`);

      return false;
    }
  }

  await this.adbExec(['emu', 'kill']);

  _logger.default.debug(`Waiting up to ${timeout}ms until the emulator '${avdName ? avdName : this.curDeviceId}' is killed`);

  try {
    await (0, _asyncbox.waitForCondition)(async () => {
      try {
        return _appiumSupport.util.hasValue(avdName) ? !(await this.getRunningAVD(avdName)) : !(await this.isEmulatorConnected());
      } catch (ign) {}

      return false;
    }, {
      waitMs: timeout,
      intervalMs: 2000
    });
  } catch (e) {
    throw new Error(`The emulator '${avdName ? avdName : this.curDeviceId}' is still running after being killed ${timeout}ms ago`);
  }

  _logger.default.info(`Successfully killed the '${avdName ? avdName : this.curDeviceId}' emulator`);

  return true;
};

systemCallMethods.launchAVD = async function launchAVD(avdName, opts = {}) {
  const {
    args = [],
    env = {},
    language,
    country,
    launchTimeout = 60000,
    readyTimeout = 60000,
    retryTimes = 1
  } = opts;

  _logger.default.debug(`Launching Emulator with AVD ${avdName}, launchTimeout ` + `${launchTimeout}ms and readyTimeout ${readyTimeout}ms`);

  const emulatorBinaryPath = await this.getSdkBinaryPath('emulator');

  if (avdName[0] === '@') {
    avdName = avdName.substr(1);
  }

  await this.checkAvdExist(avdName);
  const launchArgs = ['-avd', avdName];
  launchArgs.push(...(0, _helpers.toAvdLocaleArgs)(language, country));
  let isDelayAdbFeatureEnabled = false;

  if (this.allowDelayAdb) {
    const {
      revision
    } = await this.getEmuVersionInfo();

    if (revision && _appiumSupport.util.compareVersions(revision, '>=', '29.0.7')) {
      try {
        const {
          target
        } = await this.getEmuImageProperties(avdName);
        const apiMatch = /\d+/.exec(target);

        if (apiMatch && parseInt(apiMatch[0], 10) >= MIN_DELAY_ADB_API_LEVEL) {
          launchArgs.push('-delay-adb');
          isDelayAdbFeatureEnabled = true;
        } else {
          throw new Error(`The actual image API version is below ${MIN_DELAY_ADB_API_LEVEL}`);
        }
      } catch (e) {
        _logger.default.info(`The -delay-adb emulator startup detection feature will not be enabled. ` + `Original error: ${e.message}`);
      }
    }
  } else {
    _logger.default.info('The -delay-adb emulator startup detection feature has been explicitly disabled');
  }

  if (!_lodash.default.isEmpty(args)) {
    launchArgs.push(...(_lodash.default.isArray(args) ? args : _appiumSupport.util.shellParse(`${args}`)));
  }

  _logger.default.debug(`Running '${emulatorBinaryPath}' with args: ${_appiumSupport.util.quote(launchArgs)}`);

  if (!_lodash.default.isEmpty(env)) {
    _logger.default.debug(`Customized emulator environment: ${JSON.stringify(env)}`);
  }

  const proc = new _teen_process.SubProcess(emulatorBinaryPath, launchArgs, {
    env: Object.assign({}, process.env, env)
  });
  await proc.start(0);
  proc.on('output', (stdout, stderr) => {
    for (let line of (stdout || stderr || '').split('\n').filter(Boolean)) {
      _logger.default.info(`[AVD OUTPUT] ${line}`);
    }
  });
  proc.on('die', (code, signal) => {
    _logger.default.warn(`Emulator avd ${avdName} exited with code ${code}${signal ? `, signal ${signal}` : ''}`);
  });
  await (0, _asyncbox.retry)(retryTimes, async () => await this.getRunningAVDWithRetry(avdName, launchTimeout));

  if (isDelayAdbFeatureEnabled) {
    try {
      await this.adbExec(['wait-for-device'], {
        timeout: readyTimeout
      });
    } catch (e) {
      throw new Error(`'${avdName}' Emulator has failed to boot: ${e.stderr || e.message}`);
    }
  } else {
    await this.waitForEmulatorReady(readyTimeout);
  }

  return proc;
};

systemCallMethods.getVersion = _lodash.default.memoize(async function getVersion() {
  let stdout;

  try {
    stdout = await this.adbExec('version');
  } catch (e) {
    throw new Error(`Error getting adb version: ${e.stderr || e.message}`);
  }

  const result = {};
  const binaryVersionMatch = BINARY_VERSION_PATTERN.exec(stdout);

  if (binaryVersionMatch) {
    result.binary = {
      version: _semver.default.coerce(binaryVersionMatch[1]),
      build: parseInt(binaryVersionMatch[2], 10)
    };
  }

  const bridgeVersionMatch = BRIDGE_VERSION_PATTERN.exec(stdout);

  if (bridgeVersionMatch) {
    result.bridge = {
      version: _semver.default.coerce(bridgeVersionMatch[1])
    };
  }

  return result;
});

systemCallMethods.waitForEmulatorReady = async function waitForEmulatorReady(timeoutMs = 20000) {
  try {
    await (0, _asyncbox.waitForCondition)(async () => {
      try {
        if (!(await this.shell(['getprop', 'init.svc.bootanim'])).includes('stopped')) {
          return false;
        }

        return /\d+\[\w+\]/.test(await this.shell(['pm', 'get-install-location']));
      } catch (err) {
        _logger.default.debug(`Waiting for emulator startup. Intermediate error: ${err.message}`);

        return false;
      }
    }, {
      waitMs: timeoutMs,
      intervalMs: 3000
    });
  } catch (e) {
    throw new Error(`Emulator is not ready within ${timeoutMs}ms`);
  }
};

systemCallMethods.waitForDevice = async function waitForDevice(appDeviceReadyTimeout = 30) {
  this.appDeviceReadyTimeout = appDeviceReadyTimeout;
  const retries = 3;
  const timeout = parseInt(this.appDeviceReadyTimeout, 10) * 1000 / retries;
  await (0, _asyncbox.retry)(retries, async () => {
    try {
      await this.adbExec('wait-for-device', {
        timeout
      });
      await this.ping();
    } catch (e) {
      try {
        await this.reconnect();
      } catch (ign) {
        await this.restartAdb();
      }

      await this.getConnectedDevices();
      throw new Error(`Error waiting for the device to be available. Original error: '${e.message}'`);
    }
  });
};

systemCallMethods.reboot = async function reboot(retries = DEFAULT_ADB_REBOOT_RETRIES) {
  const {
    wasAlreadyRooted
  } = await this.root();

  try {
    await this.shell(['stop']);
    await _bluebird.default.delay(2000);
    await this.setDeviceProperty('sys.boot_completed', 0, {
      privileged: false
    });
    await this.shell(['start']);
  } catch (e) {
    const {
      message
    } = e;

    if (message.includes('must be root')) {
      throw new Error(`Could not reboot device. Rebooting requires root access and ` + `attempt to get root access on device failed with error: '${message}'`);
    }

    throw e;
  } finally {
    if (!wasAlreadyRooted) {
      await this.unroot();
    }
  }

  const timer = new _appiumSupport.timing.Timer().start();
  await (0, _asyncbox.retryInterval)(retries, 1000, async () => {
    if ((await this.getDeviceProperty('sys.boot_completed')) === '1') {
      return;
    }

    const msg = `Reboot is not completed after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`;

    _logger.default.debug(msg);

    throw new Error(msg);
  });
};

systemCallMethods.changeUserPrivileges = async function changeUserPrivileges(isElevated) {
  const cmd = isElevated ? 'root' : 'unroot';

  const retryIfOffline = async cmdFunc => {
    try {
      return await cmdFunc();
    } catch (err) {
      if (['closed', 'device offline', 'timeout expired'].some(x => (err.stderr || '').toLowerCase().includes(x))) {
        _logger.default.warn(`Attempt to ${cmd} caused ADB to think the device went offline`);

        try {
          await this.reconnect();
        } catch (ign) {
          await this.restartAdb();
        }

        return await cmdFunc();
      } else {
        throw err;
      }
    }
  };

  const isRoot = await retryIfOffline(async () => await this.isRoot());

  if (isRoot && isElevated || !isRoot && !isElevated) {
    return {
      isSuccessful: true,
      wasAlreadyRooted: isRoot
    };
  }

  let wasAlreadyRooted = isRoot;

  try {
    const {
      stdout
    } = await retryIfOffline(async () => await this.adbExec([cmd]));

    _logger.default.debug(stdout);

    if (stdout) {
      if (stdout.includes('adbd cannot run as root')) {
        return {
          isSuccessful: false,
          wasAlreadyRooted
        };
      }

      if (stdout.includes('already running as root')) {
        wasAlreadyRooted = true;
      }
    }

    return {
      isSuccessful: true,
      wasAlreadyRooted
    };
  } catch (err) {
    const {
      stderr = '',
      message
    } = err;

    _logger.default.warn(`Unable to ${cmd} adb daemon. Original error: '${message}'. Stderr: '${stderr}'. Continuing.`);

    return {
      isSuccessful: false,
      wasAlreadyRooted
    };
  }
};

systemCallMethods.root = async function root() {
  return await this.changeUserPrivileges(true);
};

systemCallMethods.unroot = async function unroot() {
  return await this.changeUserPrivileges(false);
};

systemCallMethods.isRoot = async function isRoot() {
  return (await this.shell(['whoami'])).trim() === 'root';
};

systemCallMethods.fileExists = async function fileExists(remotePath) {
  const passFlag = '__PASS__';
  const checkCmd = `[ -e '${remotePath.replace(/'/g, `\\'`)}' ] && echo ${passFlag}`;

  try {
    return _lodash.default.includes(await this.shell([checkCmd]), passFlag);
  } catch (ign) {
    return false;
  }
};

systemCallMethods.ls = async function ls(remotePath, opts = []) {
  try {
    let args = ['ls', ...opts, remotePath];
    let stdout = await this.shell(args);
    let lines = stdout.split('\n');
    return lines.map(l => l.trim()).filter(Boolean).filter(l => l.indexOf('No such file') === -1);
  } catch (err) {
    if (err.message.indexOf('No such file or directory') === -1) {
      throw err;
    }

    return [];
  }
};

systemCallMethods.fileSize = async function fileSize(remotePath) {
  try {
    const files = await this.ls(remotePath, ['-la']);

    if (files.length !== 1) {
      throw new Error(`Remote path is not a file`);
    }

    const match = /[rwxsStT\-+]{10}[\s\d]*\s[^\s]+\s+[^\s]+\s+(\d+)/.exec(files[0]);

    if (!match || _lodash.default.isNaN(parseInt(match[1], 10))) {
      throw new Error(`Unable to parse size from list output: '${files[0]}'`);
    }

    return parseInt(match[1], 10);
  } catch (err) {
    throw new Error(`Unable to get file size for '${remotePath}': ${err.message}`);
  }
};

systemCallMethods.installMitmCertificate = async function installMitmCertificate(cert) {
  const openSsl = await (0, _helpers.getOpenSslForOs)();

  if (!_lodash.default.isBuffer(cert)) {
    cert = Buffer.from(cert, 'base64');
  }

  const tmpRoot = await _appiumSupport.tempDir.openDir();

  try {
    const srcCert = _path.default.resolve(tmpRoot, 'source.cer');

    await _appiumSupport.fs.writeFile(srcCert, cert);
    let {
      stdout
    } = await (0, _teen_process.exec)(openSsl, ['x509', '-noout', '-hash', '-in', srcCert]);
    const certHash = stdout.trim();

    _logger.default.debug(`Got certificate hash: ${certHash}`);

    _logger.default.debug('Preparing certificate content');

    ({
      stdout
    } = await (0, _teen_process.exec)(openSsl, ['x509', '-in', srcCert], {
      isBuffer: true
    }));
    let dstCertContent = stdout;
    ({
      stdout
    } = await (0, _teen_process.exec)(openSsl, ['x509', '-in', srcCert, '-text', '-fingerprint', '-noout'], {
      isBuffer: true
    }));
    dstCertContent = Buffer.concat([dstCertContent, stdout]);

    const dstCert = _path.default.resolve(tmpRoot, `${certHash}.0`);

    await _appiumSupport.fs.writeFile(dstCert, dstCertContent);

    _logger.default.debug('Remounting /system in rw mode');

    await (0, _asyncbox.retryInterval)(5, 2000, async () => await this.adbExec(['remount']));

    _logger.default.debug(`Uploading the generated certificate from '${dstCert}' to '${CERTS_ROOT}'`);

    await this.push(dstCert, CERTS_ROOT);

    _logger.default.debug('Remounting /system to confirm changes');

    await this.adbExec(['remount']);
  } catch (err) {
    throw new Error(`Cannot inject the custom certificate. ` + `Is the certificate properly encoded into base64-string? ` + `Do you have root permissions on the device? ` + `Original error: ${err.message}`);
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
};

systemCallMethods.isMitmCertificateInstalled = async function isMitmCertificateInstalled(cert) {
  const openSsl = await (0, _helpers.getOpenSslForOs)();

  if (!_lodash.default.isBuffer(cert)) {
    cert = Buffer.from(cert, 'base64');
  }

  const tmpRoot = await _appiumSupport.tempDir.openDir();
  let certHash;

  try {
    const tmpCert = _path.default.resolve(tmpRoot, 'source.cer');

    await _appiumSupport.fs.writeFile(tmpCert, cert);
    const {
      stdout
    } = await (0, _teen_process.exec)(openSsl, ['x509', '-noout', '-hash', '-in', tmpCert]);
    certHash = stdout.trim();
  } catch (err) {
    throw new Error(`Cannot retrieve the certificate hash. ` + `Is the certificate properly encoded into base64-string? ` + `Original error: ${err.message}`);
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }

  const dstPath = _path.default.posix.resolve(CERTS_ROOT, `${certHash}.0`);

  _logger.default.debug(`Checking if the certificate is already installed at '${dstPath}'`);

  return await this.fileExists(dstPath);
};

var _default = systemCallMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9zeXN0ZW0tY2FsbHMuanMiXSwibmFtZXMiOlsic3lzdGVtQ2FsbE1ldGhvZHMiLCJERUZBVUxUX0FEQl9SRUJPT1RfUkVUUklFUyIsIkxJTktFUl9XQVJOSU5HX1JFR0VYUCIsIkFEQl9SRVRSWV9FUlJPUl9QQVRURVJOUyIsIkJJTkFSWV9WRVJTSU9OX1BBVFRFUk4iLCJCUklER0VfVkVSU0lPTl9QQVRURVJOIiwiQ0VSVFNfUk9PVCIsIlNES19CSU5BUllfUk9PVFMiLCJNSU5fREVMQVlfQURCX0FQSV9MRVZFTCIsImdldFNka0JpbmFyeVBhdGgiLCJiaW5hcnlOYW1lIiwiZ2V0QmluYXJ5RnJvbVNka1Jvb3QiLCJnZXRCaW5hcnlOYW1lRm9yT1MiLCJfIiwibWVtb2l6ZSIsImdldEJpbmFyeU5hbWVGb3JPU01lbW9yaXplIiwic3lzdGVtIiwiaXNXaW5kb3dzIiwiaW5jbHVkZXMiLCJwYXRoIiwiZXh0bmFtZSIsImJpbmFyaWVzIiwiZnVsbEJpbmFyeU5hbWUiLCJiaW5hcnlMb2NzIiwiZ2V0U2RrQmluYXJ5TG9jYXRpb25DYW5kaWRhdGVzIiwic2RrUm9vdCIsImJ1aWxkVG9vbHNEaXJzIiwiYnVpbGRUb29sc1ZlcnNpb24iLCJmaWx0ZXIiLCJ4IiwiYmFzZW5hbWUiLCJpc0VtcHR5IiwibG9nIiwiaW5mbyIsInB1c2giLCJmbGF0dGVuIiwibWFwIiwiZGlyIiwicmVzb2x2ZSIsImJpbmFyeUxvYyIsImxvYyIsImZzIiwiZXhpc3RzIiwiaXNOdWxsIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiaXNBcnJheSIsImdldEFuZHJvaWRCaW5hcnlQYXRoIiwiZ2V0QmluYXJ5RnJvbVBhdGgiLCJ3aGljaCIsImUiLCJnZXRDb25uZWN0ZWREZXZpY2VzIiwiZGVidWciLCJzdGRvdXQiLCJleGVjdXRhYmxlIiwiZGVmYXVsdEFyZ3MiLCJtZXNzYWdlIiwibGlzdEhlYWRlciIsInN0YXJ0aW5nSW5kZXgiLCJpbmRleE9mIiwic2xpY2UiLCJleGNsdWRlZExpbmVzIiwiYWxsb3dPZmZsaW5lRGV2aWNlcyIsImRldmljZXMiLCJzcGxpdCIsInRyaW0iLCJsaW5lIiwic29tZSIsInJlZHVjZSIsImFjYyIsInVkaWQiLCJzdGF0ZSIsImdldERldmljZXNXaXRoUmV0cnkiLCJ0aW1lb3V0TXMiLCJ0aW1lciIsInRpbWluZyIsIlRpbWVyIiwic3RhcnQiLCJnZXREZXZpY2VzIiwiZ2V0RHVyYXRpb24iLCJhc01pbGxpU2Vjb25kcyIsInRvRml4ZWQiLCJsZW5ndGgiLCJpZ24iLCJyZWNvbm5lY3QiLCJyZXN0YXJ0QWRiIiwidGFyZ2V0IiwiYXJncyIsImFkYkV4ZWMiLCJzdGRlcnIiLCJzdXBwcmVzc0tpbGxTZXJ2ZXIiLCJraWxsU2VydmVyIiwiZXJyb3IiLCJhZGJQb3J0IiwiZXhjbHVzaXZlIiwicmVzZXRUZWxuZXRBdXRoVG9rZW4iLCJob21lRm9sZGVyUGF0aCIsInByb2Nlc3MiLCJlbnYiLCJwbGF0Zm9ybSIsIndhcm4iLCJkc3RQYXRoIiwid3JpdGVGaWxlIiwiYWRiRXhlY0VtdSIsImNtZCIsInZlcmlmeUVtdWxhdG9yQ29ubmVjdGVkIiwiaXNFeGVjTG9ja2VkIiwib3B0cyIsImNsb25lRGVlcCIsInRpbWVvdXQiLCJhZGJFeGVjVGltZW91dCIsIkRFRkFVTFRfQURCX0VYRUNfVElNRU9VVCIsInRpbWVvdXRDYXBOYW1lIiwiYWRiUmV0cmllZCIsImV4ZWNGdW5jIiwiZmluZCIsImFyZyIsInRlc3QiLCJ1dGlsIiwicXVvdGUiLCJqb2luIiwicmVwbGFjZSIsImVyclRleHQiLCJwIiwiY29kZSIsIndhaXRNcyIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJpbnRlcnZhbE1zIiwic2hlbGwiLCJwcml2aWxlZ2VkIiwiY21kQXJyIiwiZnVsbENtZCIsImlzUm9vdCIsImNyZWF0ZVN1YlByb2Nlc3MiLCJTdWJQcm9jZXNzIiwiZ2V0QWRiUGF0aCIsImdldEFkYlNlcnZlclBvcnQiLCJnZXRFbXVsYXRvclBvcnQiLCJlbXVsYXRvclBvcnQiLCJwb3J0IiwiZ2V0UG9ydEZyb21FbXVsYXRvclN0cmluZyIsImVtU3RyIiwicG9ydFBhdHRlcm4iLCJwYXJzZUludCIsImV4ZWMiLCJnZXRDb25uZWN0ZWRFbXVsYXRvcnMiLCJlbXVsYXRvcnMiLCJkZXZpY2UiLCJwbHVyYWxpemUiLCJzZXRFbXVsYXRvclBvcnQiLCJlbVBvcnQiLCJzZXREZXZpY2VJZCIsImRldmljZUlkIiwiY3VyRGV2aWNlSWQiLCJhcmdzSGFzRGV2aWNlIiwic3BsaWNlIiwic2V0RGV2aWNlIiwiZGV2aWNlT2JqIiwiZ2V0UnVubmluZ0FWRCIsImF2ZE5hbWUiLCJlbXVsYXRvciIsInJ1bm5pbmdBVkROYW1lIiwiZXhlY0VtdUNvbnNvbGVDb21tYW5kIiwiZXhlY1RpbWVvdXQiLCJjb25uVGltZW91dCIsInRvTG93ZXIiLCJnZXRSdW5uaW5nQVZEV2l0aFJldHJ5Iiwia2lsbEFsbEVtdWxhdG9ycyIsImtpbGxFbXVsYXRvciIsImhhc1ZhbHVlIiwiaXNFbXVsYXRvckNvbm5lY3RlZCIsImxhdW5jaEFWRCIsImxhbmd1YWdlIiwiY291bnRyeSIsImxhdW5jaFRpbWVvdXQiLCJyZWFkeVRpbWVvdXQiLCJyZXRyeVRpbWVzIiwiZW11bGF0b3JCaW5hcnlQYXRoIiwic3Vic3RyIiwiY2hlY2tBdmRFeGlzdCIsImxhdW5jaEFyZ3MiLCJpc0RlbGF5QWRiRmVhdHVyZUVuYWJsZWQiLCJhbGxvd0RlbGF5QWRiIiwicmV2aXNpb24iLCJnZXRFbXVWZXJzaW9uSW5mbyIsImNvbXBhcmVWZXJzaW9ucyIsImdldEVtdUltYWdlUHJvcGVydGllcyIsImFwaU1hdGNoIiwic2hlbGxQYXJzZSIsInByb2MiLCJPYmplY3QiLCJhc3NpZ24iLCJvbiIsIkJvb2xlYW4iLCJzaWduYWwiLCJ3YWl0Rm9yRW11bGF0b3JSZWFkeSIsImdldFZlcnNpb24iLCJyZXN1bHQiLCJiaW5hcnlWZXJzaW9uTWF0Y2giLCJiaW5hcnkiLCJ2ZXJzaW9uIiwic2VtdmVyIiwiY29lcmNlIiwiYnVpbGQiLCJicmlkZ2VWZXJzaW9uTWF0Y2giLCJicmlkZ2UiLCJlcnIiLCJ3YWl0Rm9yRGV2aWNlIiwiYXBwRGV2aWNlUmVhZHlUaW1lb3V0IiwicmV0cmllcyIsInBpbmciLCJyZWJvb3QiLCJ3YXNBbHJlYWR5Um9vdGVkIiwicm9vdCIsIkIiLCJkZWxheSIsInNldERldmljZVByb3BlcnR5IiwidW5yb290IiwiZ2V0RGV2aWNlUHJvcGVydHkiLCJtc2ciLCJjaGFuZ2VVc2VyUHJpdmlsZWdlcyIsImlzRWxldmF0ZWQiLCJyZXRyeUlmT2ZmbGluZSIsImNtZEZ1bmMiLCJ0b0xvd2VyQ2FzZSIsImlzU3VjY2Vzc2Z1bCIsImZpbGVFeGlzdHMiLCJyZW1vdGVQYXRoIiwicGFzc0ZsYWciLCJjaGVja0NtZCIsImxzIiwibGluZXMiLCJsIiwiZmlsZVNpemUiLCJmaWxlcyIsIm1hdGNoIiwiaXNOYU4iLCJpbnN0YWxsTWl0bUNlcnRpZmljYXRlIiwiY2VydCIsIm9wZW5Tc2wiLCJpc0J1ZmZlciIsIkJ1ZmZlciIsImZyb20iLCJ0bXBSb290IiwidGVtcERpciIsIm9wZW5EaXIiLCJzcmNDZXJ0IiwiY2VydEhhc2giLCJkc3RDZXJ0Q29udGVudCIsImNvbmNhdCIsImRzdENlcnQiLCJyaW1yYWYiLCJpc01pdG1DZXJ0aWZpY2F0ZUluc3RhbGxlZCIsInRtcENlcnQiLCJwb3NpeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsSUFBSUEsaUJBQWlCLEdBQUcsRUFBeEI7QUFFQSxNQUFNQywwQkFBMEIsR0FBRyxFQUFuQztBQUNBLE1BQU1DLHFCQUFxQixHQUFHLHNCQUE5QjtBQUNBLE1BQU1DLHdCQUF3QixHQUFHLENBQy9CLCtCQUQrQixFQUUvQixrQ0FGK0IsRUFHL0IsaUNBSCtCLENBQWpDO0FBS0EsTUFBTUMsc0JBQXNCLEdBQUcsMEJBQS9CO0FBQ0EsTUFBTUMsc0JBQXNCLEdBQUcseUNBQS9CO0FB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RUFGekMsQ0FBTjtBQUdELEdBVEQsU0FTVTtBQUNSLFVBQU1oQixrQkFBR29OLE1BQUgsQ0FBVVIsT0FBVixDQUFOO0FBQ0Q7O0FBQ0QsUUFBTS9JLE9BQU8sR0FBR25GLGNBQUs2TyxLQUFMLENBQVcxTixPQUFYLENBQW1CaEMsVUFBbkIsRUFBZ0MsR0FBRW1QLFFBQVMsSUFBM0MsQ0FBaEI7O0FBQ0F6TixrQkFBSXFCLEtBQUosQ0FBVyx3REFBdURpRCxPQUFRLEdBQTFFOztBQUNBLFNBQU8sTUFBTSxLQUFLOEgsVUFBTCxDQUFnQjlILE9BQWhCLENBQWI7QUFDRCxDQXhCRDs7ZUEwQmV0RyxpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgc3lzdGVtLCBmcywgdXRpbCwgdGVtcERpciwgdGltaW5nIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHtcbiAgZ2V0QnVpbGRUb29sc0RpcnMsIHRvQXZkTG9jYWxlQXJncyxcbiAgZ2V0T3BlblNzbEZvck9zLCBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQsIGdldFNka1Jvb3RGcm9tRW52XG59IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IHsgZXhlYywgU3ViUHJvY2VzcyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyBzbGVlcCwgcmV0cnksIHJldHJ5SW50ZXJ2YWwsIHdhaXRGb3JDb25kaXRpb24gfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHNlbXZlciBmcm9tICdzZW12ZXInO1xuXG5cbmxldCBzeXN0ZW1DYWxsTWV0aG9kcyA9IHt9O1xuXG5jb25zdCBERUZBVUxUX0FEQl9SRUJPT1RfUkVUUklFUyA9IDkwO1xuY29uc3QgTElOS0VSX1dBUk5JTkdfUkVHRVhQID0gL15XQVJOSU5HOiBsaW5rZXIuKyQvbTtcbmNvbnN0IEFEQl9SRVRSWV9FUlJPUl9QQVRURVJOUyA9IFtcbiAgL3Byb3RvY29sIGZhdWx0IFxcKG5vIHN0YXR1c1xcKS9pLFxuICAvZXJyb3I6IGRldmljZSAoJy4rJyApP25vdCBmb3VuZC9pLFxuICAvZXJyb3I6IGRldmljZSBzdGlsbCBjb25uZWN0aW5nL2ksXG5dO1xuY29uc3QgQklOQVJZX1ZFUlNJT05fUEFUVEVSTiA9IC9eVmVyc2lvbiAoW1xcZC5dKyktKFxcZCspL207XG5jb25zdCBCUklER0VfVkVSU0lPTl9QQVRURVJOID0gL15BbmRyb2lkIERlYnVnIEJyaWRnZSB2ZXJzaW9uIChbXFxkLl0rKS9tO1xuY29uc3QgQ0VSVFNfUk9PVCA9ICcvc3lzdGVtL2V0Yy9zZWN1cml0eS9jYWNlcnRzJztcbmNvbnN0IFNES19CSU5BUllfUk9PVFMgPSBbXG4gICdwbGF0Zm9ybS10b29scycsXG4gICdlbXVsYXRvcicsXG4gIFsnY21kbGluZS10b29scycsICdsYXRlc3QnLCAnYmluJ10sXG4gICd0b29scycsXG4gIFsndG9vbHMnLCAnYmluJ10sXG4gICcuJyAvLyBBbGxvdyBjdXN0b20gc2RrUm9vdCB0byBzcGVjaWZ5IGZ1bGwgZm9sZGVyIHBhdGhcbl07XG5jb25zdCBNSU5fREVMQVlfQURCX0FQSV9MRVZFTCA9IDI4O1xuXG4vKipcbiAqIFJldHJpZXZlIGZ1bGwgcGF0aCB0byB0aGUgZ2l2ZW4gYmluYXJ5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGJpbmFyeS5cbiAqIEByZXR1cm4ge3N0cmluZ30gRnVsbCBwYXRoIHRvIHRoZSBnaXZlbiBiaW5hcnkgaW5jbHVkaW5nIGN1cnJlbnQgU0RLIHJvb3QuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmdldFNka0JpbmFyeVBhdGggPSBhc3luYyBmdW5jdGlvbiBnZXRTZGtCaW5hcnlQYXRoIChiaW5hcnlOYW1lKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLmdldEJpbmFyeUZyb21TZGtSb290KGJpbmFyeU5hbWUpO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZSBmdWxsIGJpbmFyeSBuYW1lIGZvciB0aGUgY3VycmVudCBvcGVyYXRpbmcgc3lzdGVtIGFzIG1lbW90aXplLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlOYW1lIC0gc2ltcGxlIGJpbmFyeSBuYW1lLCBmb3IgZXhhbXBsZSAnYW5kcm9pZCcuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEZvcm1hdHRlZCBiaW5hcnkgbmFtZSBkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgcGxhdGZvcm0sXG4gKiAgICAgICAgICAgICAgICAgIGZvciBleGFtcGxlLCAnYW5kcm9pZC5iYXQnIG9uIFdpbmRvd3MuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmdldEJpbmFyeU5hbWVGb3JPUyA9IF8ubWVtb2l6ZShmdW5jdGlvbiBnZXRCaW5hcnlOYW1lRm9yT1NNZW1vcml6ZSAoYmluYXJ5TmFtZSkge1xuICByZXR1cm4gZ2V0QmluYXJ5TmFtZUZvck9TKGJpbmFyeU5hbWUpO1xufSk7XG5cbi8qKlxuICogUmV0cmlldmUgZnVsbCBiaW5hcnkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgb3BlcmF0aW5nIHN5c3RlbS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5TmFtZSAtIHNpbXBsZSBiaW5hcnkgbmFtZSwgZm9yIGV4YW1wbGUgJ2FuZHJvaWQnLlxuICogQHJldHVybiB7c3RyaW5nfSBGb3JtYXR0ZWQgYmluYXJ5IG5hbWUgZGVwZW5kaW5nIG9uIHRoZSBjdXJyZW50IHBsYXRmb3JtLFxuICogICAgICAgICAgICAgICAgICBmb3IgZXhhbXBsZSwgJ2FuZHJvaWQuYmF0JyBvbiBXaW5kb3dzLlxuICovXG5mdW5jdGlvbiBnZXRCaW5hcnlOYW1lRm9yT1MgKGJpbmFyeU5hbWUpIHtcbiAgaWYgKCFzeXN0ZW0uaXNXaW5kb3dzKCkpIHtcbiAgICByZXR1cm4gYmluYXJ5TmFtZTtcbiAgfVxuXG4gIGlmIChbJ2FuZHJvaWQnLCAnYXBrc2lnbmVyJywgJ2Fwa2FuYWx5emVyJ10uaW5jbHVkZXMoYmluYXJ5TmFtZSkpIHtcbiAgICByZXR1cm4gYCR7YmluYXJ5TmFtZX0uYmF0YDtcbiAgfVxuICBpZiAoIXBhdGguZXh0bmFtZShiaW5hcnlOYW1lKSkge1xuICAgIHJldHVybiBgJHtiaW5hcnlOYW1lfS5leGVgO1xuICB9XG4gIHJldHVybiBiaW5hcnlOYW1lO1xufVxuXG4vKipcbiAqIFJldHJpZXZlIGZ1bGwgcGF0aCB0byB0aGUgZ2l2ZW4gYmluYXJ5IGFuZCBjYWNoZXMgaXQgaW50byBgYmluYXJpZXNgXG4gKiBwcm9wZXJ0eSBvZiB0aGUgY3VycmVudCBBREIgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeU5hbWUgLSBTaW1wbGUgbmFtZSBvZiBhIGJpbmFyeSBmaWxlLlxuICogQHJldHVybiB7c3RyaW5nfSBGdWxsIHBhdGggdG8gdGhlIGdpdmVuIGJpbmFyeS4gVGhlIG1ldGhvZCB0cmllc1xuICogICAgICAgICAgICAgICAgICB0byBlbnVtZXJhdGUgYWxsIHRoZSBrbm93biBsb2NhdGlvbnMgd2hlcmUgdGhlIGJpbmFyeVxuICogICAgICAgICAgICAgICAgICBtaWdodCBiZSBsb2NhdGVkIGFuZCBzdG9wcyB0aGUgc2VhcmNoIGFzIHNvb24gYXMgdGhlIGZpcnN0XG4gKiAgICAgICAgICAgICAgICAgIG1hdGNoIGlzIGZvdW5kIG9uIHRoZSBsb2NhbCBmaWxlIHN5c3RlbS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgYmluYXJ5IHdpdGggZ2l2ZW4gbmFtZSBpcyBub3QgcHJlc2VudCBhdCBhbnlcbiAqICAgICAgICAgICAgICAgICBvZiBrbm93biBsb2NhdGlvbnMgb3IgQW5kcm9pZCBTREsgaXMgbm90IGluc3RhbGxlZCBvbiB0aGVcbiAqICAgICAgICAgICAgICAgICBsb2NhbCBmaWxlIHN5c3RlbS5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZ2V0QmluYXJ5RnJvbVNka1Jvb3QgPSBhc3luYyBmdW5jdGlvbiBnZXRCaW5hcnlGcm9tU2RrUm9vdCAoYmluYXJ5TmFtZSkge1xuICBpZiAodGhpcy5iaW5hcmllc1tiaW5hcnlOYW1lXSkge1xuICAgIHJldHVybiB0aGlzLmJpbmFyaWVzW2JpbmFyeU5hbWVdO1xuICB9XG4gIGNvbnN0IGZ1bGxCaW5hcnlOYW1lID0gdGhpcy5nZXRCaW5hcnlOYW1lRm9yT1MoYmluYXJ5TmFtZSk7XG4gIGNvbnN0IGJpbmFyeUxvY3MgPSBnZXRTZGtCaW5hcnlMb2NhdGlvbkNhbmRpZGF0ZXModGhpcy5zZGtSb290LCBmdWxsQmluYXJ5TmFtZSk7XG5cbiAgLy8gZ2V0IHN1YnBhdGhzIGZvciBjdXJyZW50bHkgaW5zdGFsbGVkIGJ1aWxkIHRvb2wgZGlyZWN0b3JpZXNcbiAgbGV0IGJ1aWxkVG9vbHNEaXJzID0gYXdhaXQgZ2V0QnVpbGRUb29sc0RpcnModGhpcy5zZGtSb290KTtcbiAgaWYgKHRoaXMuYnVpbGRUb29sc1ZlcnNpb24pIHtcbiAgICBidWlsZFRvb2xzRGlycyA9IGJ1aWxkVG9vbHNEaXJzXG4gICAgICAuZmlsdGVyKCh4KSA9PiBwYXRoLmJhc2VuYW1lKHgpID09PSB0aGlzLmJ1aWxkVG9vbHNWZXJzaW9uKTtcbiAgICBpZiAoXy5pc0VtcHR5KGJ1aWxkVG9vbHNEaXJzKSkge1xuICAgICAgbG9nLmluZm8oYEZvdW5kIG5vIGJ1aWxkIHRvb2xzIHdob3NlIHZlcnNpb24gbWF0Y2hlcyB0byAnJHt0aGlzLmJ1aWxkVG9vbHNWZXJzaW9ufSdgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmluZm8oYFVzaW5nIGJ1aWxkIHRvb2xzIGF0ICcke2J1aWxkVG9vbHNEaXJzfSdgKTtcbiAgICB9XG4gIH1cbiAgYmluYXJ5TG9jcy5wdXNoKC4uLihfLmZsYXR0ZW4oYnVpbGRUb29sc0RpcnNcbiAgICAubWFwKChkaXIpID0+IFtcbiAgICAgIHBhdGgucmVzb2x2ZShkaXIsIGZ1bGxCaW5hcnlOYW1lKSxcbiAgICAgIHBhdGgucmVzb2x2ZShkaXIsICdsaWInLCBmdWxsQmluYXJ5TmFtZSksXG4gICAgXSkpXG4gICkpO1xuXG4gIGxldCBiaW5hcnlMb2MgPSBudWxsO1xuICBmb3IgKGNvbnN0IGxvYyBvZiBiaW5hcnlMb2NzKSB7XG4gICAgaWYgKGF3YWl0IGZzLmV4aXN0cyhsb2MpKSB7XG4gICAgICBiaW5hcnlMb2MgPSBsb2M7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKF8uaXNOdWxsKGJpbmFyeUxvYykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kICcke2Z1bGxCaW5hcnlOYW1lfScgaW4gJHtKU09OLnN0cmluZ2lmeShiaW5hcnlMb2NzKX0uIGAgK1xuICAgICAgYERvIHlvdSBoYXZlIEFuZHJvaWQgQnVpbGQgVG9vbHMgJHt0aGlzLmJ1aWxkVG9vbHNWZXJzaW9uID8gYHYgJHt0aGlzLmJ1aWxkVG9vbHNWZXJzaW9ufSBgIDogJyd9YCArXG4gICAgICBgaW5zdGFsbGVkIGF0ICcke3RoaXMuc2RrUm9vdH0nP2ApO1xuICB9XG4gIGxvZy5pbmZvKGBVc2luZyAnJHtmdWxsQmluYXJ5TmFtZX0nIGZyb20gJyR7YmluYXJ5TG9jfSdgKTtcbiAgdGhpcy5iaW5hcmllc1tiaW5hcnlOYW1lXSA9IGJpbmFyeUxvYztcbiAgcmV0dXJuIGJpbmFyeUxvYztcbn07XG5cbi8qKlxuICogIFJldHVybnMgdGhlIEFuZHJvaWQgYmluYXJpZXMgbG9jYXRpb25zXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNka1Jvb3QgVGhlIHBhdGggdG8gQW5kcm9pZCBTREsgcm9vdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmdWxsQmluYXJ5TmFtZSBUaGUgbmFtZSBvZiBmdWxsIGJpbmFyeSBuYW1lLlxuICogQHJldHVybiB7QXJyYXk8c3RyaW5nPn0gVGhlIGxpc3Qgb2YgU0RLX0JJTkFSWV9ST09UUyBwYXRoc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggc2RrUm9vdCBhbmQgZnVsbEJpbmFyeU5hbWUuXG4gKi9cbmZ1bmN0aW9uIGdldFNka0JpbmFyeUxvY2F0aW9uQ2FuZGlkYXRlcyAoc2RrUm9vdCwgZnVsbEJpbmFyeU5hbWUpIHtcbiAgcmV0dXJuIFNES19CSU5BUllfUk9PVFMubWFwKCh4KSA9PlxuICAgIHBhdGgucmVzb2x2ZShzZGtSb290LCAuLi4oXy5pc0FycmF5KHgpID8geCA6IFt4XSksIGZ1bGxCaW5hcnlOYW1lKSk7XG59XG5cbi8qKlxuICogUmV0cmlldmUgZnVsbCBwYXRoIHRvIHRoZSBnaXZlbiBiaW5hcnkuXG4gKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBoYXZlIGNhY2hlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlOYW1lIC0gU2ltcGxlIG5hbWUgb2YgYSBiaW5hcnkgZmlsZS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5nLiAnYWRiJywgJ2FuZHJvaWQnXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEZ1bGwgcGF0aCB0byB0aGUgZ2l2ZW4gYmluYXJ5LiBUaGUgbWV0aG9kIHRyaWVzXG4gKiAgICAgICAgICAgICAgICAgIHRvIGVudW1lcmF0ZSBhbGwgdGhlIGtub3duIGxvY2F0aW9ucyB3aGVyZSB0aGUgYmluYXJ5XG4gKiAgICAgICAgICAgICAgICAgIG1pZ2h0IGJlIGxvY2F0ZWQgYW5kIHN0b3BzIHRoZSBzZWFyY2ggYXMgc29vbiBhcyB0aGUgZmlyc3RcbiAqICAgICAgICAgICAgICAgICAgbWF0Y2ggaXMgZm91bmQgb24gdGhlIGxvY2FsIGZpbGUgc3lzdGVtLlxuICogICAgICAgICAgICAgICAgICBlLmcuICcvUGF0aC9Uby9BbmRyb2lkL3Nkay9wbGF0Zm9ybS10b29scy9hZGInXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGJpbmFyeSB3aXRoIGdpdmVuIG5hbWUgaXMgbm90IHByZXNlbnQgYXQgYW55XG4gKiAgICAgICAgICAgICAgICAgb2Yga25vd24gbG9jYXRpb25zIG9yIEFuZHJvaWQgU0RLIGlzIG5vdCBpbnN0YWxsZWQgb24gdGhlXG4gKiAgICAgICAgICAgICAgICAgbG9jYWwgZmlsZSBzeXN0ZW0uXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldEFuZHJvaWRCaW5hcnlQYXRoIChiaW5hcnlOYW1lKSB7XG4gIGNvbnN0IGZ1bGxCaW5hcnlOYW1lID0gZ2V0QmluYXJ5TmFtZUZvck9TKGJpbmFyeU5hbWUpO1xuICBjb25zdCBzZGtSb290ID0gZ2V0U2RrUm9vdEZyb21FbnYoKTtcbiAgY29uc3QgYmluYXJ5TG9jcyA9IGdldFNka0JpbmFyeUxvY2F0aW9uQ2FuZGlkYXRlcyhzZGtSb290LCBmdWxsQmluYXJ5TmFtZSk7XG4gIGZvciAoY29uc3QgbG9jIG9mIGJpbmFyeUxvY3MpIHtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKGxvYykpIHtcbiAgICAgIHJldHVybiBsb2M7XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgJyR7ZnVsbEJpbmFyeU5hbWV9JyBpbiAke0pTT04uc3RyaW5naWZ5KGJpbmFyeUxvY3MpfS4gYCArXG4gICAgYERvIHlvdSBoYXZlIEFuZHJvaWQgQnVpbGQgVG9vbHMgaW5zdGFsbGVkIGF0ICcke3Nka1Jvb3R9Jz9gKTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZSBmdWxsIHBhdGggdG8gYSBiaW5hcnkgZmlsZSB1c2luZyB0aGUgc3RhbmRhcmQgc3lzdGVtIGxvb2t1cCB0b29sLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGJpbmFyeS5cbiAqIEByZXR1cm4ge3N0cmluZ30gRnVsbCBwYXRoIHRvIHRoZSBiaW5hcnkgcmVjZWl2ZWQgZnJvbSAnd2hpY2gnLyd3aGVyZSdcbiAqICAgICAgICAgICAgICAgICAgb3V0cHV0LlxuICogQHRocm93cyB7RXJyb3J9IElmIGxvb2t1cCB0b29sIHJldHVybnMgbm9uLXplcm8gcmV0dXJuIGNvZGUuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmdldEJpbmFyeUZyb21QYXRoID0gYXN5bmMgZnVuY3Rpb24gZ2V0QmluYXJ5RnJvbVBhdGggKGJpbmFyeU5hbWUpIHtcbiAgaWYgKHRoaXMuYmluYXJpZXNbYmluYXJ5TmFtZV0pIHtcbiAgICByZXR1cm4gdGhpcy5iaW5hcmllc1tiaW5hcnlOYW1lXTtcbiAgfVxuXG4gIGNvbnN0IGZ1bGxCaW5hcnlOYW1lID0gdGhpcy5nZXRCaW5hcnlOYW1lRm9yT1MoYmluYXJ5TmFtZSk7XG4gIHRyeSB7XG4gICAgY29uc3QgYmluYXJ5TG9jID0gYXdhaXQgZnMud2hpY2goZnVsbEJpbmFyeU5hbWUpO1xuICAgIGxvZy5pbmZvKGBVc2luZyAnJHtmdWxsQmluYXJ5TmFtZX0nIGZyb20gJyR7YmluYXJ5TG9jfSdgKTtcbiAgICB0aGlzLmJpbmFyaWVzW2JpbmFyeU5hbWVdID0gYmluYXJ5TG9jO1xuICAgIHJldHVybiBiaW5hcnlMb2M7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kICcke2Z1bGxCaW5hcnlOYW1lfScgaW4gUEFUSC4gUGxlYXNlIHNldCB0aGUgQU5EUk9JRF9IT01FIGAgK1xuICAgICAgYG9yIEFORFJPSURfU0RLX1JPT1QgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIHRoZSBjb3JyZWN0IEFuZHJvaWQgU0RLIHJvb3QgZGlyZWN0b3J5IHBhdGguYCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRGV2aWNlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdWRpZCAtIFRoZSBkZXZpY2UgdWRpZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdGF0ZSAtIEN1cnJlbnQgZGV2aWNlIHN0YXRlLCBhcyBpdCBpcyB2aXNpYmxlIGluXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRiIGRldmljZXMgLWxfIG91dHB1dC5cbiAqL1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBsaXN0IG9mIGRldmljZXMgdmlzaWJsZSB0byBhZGIuXG4gKlxuICogQHJldHVybiB7QXJyYXkuPERldmljZT59IFRoZSBsaXN0IG9mIGRldmljZXMgb3IgYW4gZW1wdHkgbGlzdCBpZlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIG5vIGRldmljZXMgYXJlIGNvbm5lY3RlZC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgbGlzdGluZyBkZXZpY2VzLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRDb25uZWN0ZWREZXZpY2VzID0gYXN5bmMgZnVuY3Rpb24gZ2V0Q29ubmVjdGVkRGV2aWNlcyAoKSB7XG4gIGxvZy5kZWJ1ZygnR2V0dGluZyBjb25uZWN0ZWQgZGV2aWNlcycpO1xuICBsZXQgc3Rkb3V0O1xuICB0cnkge1xuICAgICh7c3Rkb3V0fSA9IGF3YWl0IGV4ZWModGhpcy5leGVjdXRhYmxlLnBhdGgsIFsuLi50aGlzLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MsICdkZXZpY2VzJ10pKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3Igd2hpbGUgZ2V0dGluZyBjb25uZWN0ZWQgZGV2aWNlcy4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG4gIGNvbnN0IGxpc3RIZWFkZXIgPSAnTGlzdCBvZiBkZXZpY2VzJztcbiAgLy8gZXhwZWN0aW5nIGFkYiBkZXZpY2VzIHRvIHJldHVybiBvdXRwdXQgYXNcbiAgLy8gTGlzdCBvZiBkZXZpY2VzIGF0dGFjaGVkXG4gIC8vIGVtdWxhdG9yLTU1NTRcdGRldmljZVxuICBjb25zdCBzdGFydGluZ0luZGV4ID0gc3Rkb3V0LmluZGV4T2YobGlzdEhlYWRlcik7XG4gIGlmIChzdGFydGluZ0luZGV4IDwgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBvdXRwdXQgd2hpbGUgdHJ5aW5nIHRvIGdldCBkZXZpY2VzOiAke3N0ZG91dH1gKTtcbiAgfVxuICAvLyBzbGljaW5nIG91dHB1dCB3ZSBjYXJlIGFib3V0XG4gIHN0ZG91dCA9IHN0ZG91dC5zbGljZShzdGFydGluZ0luZGV4KTtcbiAgbGV0IGV4Y2x1ZGVkTGluZXMgPSBbbGlzdEhlYWRlciwgJ2FkYiBzZXJ2ZXInLCAnKiBkYWVtb24nXTtcbiAgaWYgKCF0aGlzLmFsbG93T2ZmbGluZURldmljZXMpIHtcbiAgICBleGNsdWRlZExpbmVzLnB1c2goJ29mZmxpbmUnKTtcbiAgfVxuICBjb25zdCBkZXZpY2VzID0gc3Rkb3V0LnNwbGl0KCdcXG4nKVxuICAgIC5tYXAoXy50cmltKVxuICAgIC5maWx0ZXIoKGxpbmUpID0+IGxpbmUgJiYgIWV4Y2x1ZGVkTGluZXMuc29tZSgoeCkgPT4gbGluZS5pbmNsdWRlcyh4KSkpXG4gICAgLnJlZHVjZSgoYWNjLCBsaW5lKSA9PiB7XG4gICAgICAvLyBzdGF0ZSBpcyBcImRldmljZVwiLCBhZmFpY1xuICAgICAgY29uc3QgW3VkaWQsIHN0YXRlXSA9IGxpbmUuc3BsaXQoL1xccysvKTtcbiAgICAgIGFjYy5wdXNoKHt1ZGlkLCBzdGF0ZX0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7XG4gIGlmIChfLmlzRW1wdHkoZGV2aWNlcykpIHtcbiAgICBsb2cuZGVidWcoJ05vIGNvbm5lY3RlZCBkZXZpY2VzIGhhdmUgYmVlbiBkZXRlY3RlZCcpO1xuICB9IGVsc2Uge1xuICAgIGxvZy5kZWJ1ZyhgQ29ubmVjdGVkIGRldmljZXM6ICR7SlNPTi5zdHJpbmdpZnkoZGV2aWNlcyl9YCk7XG4gIH1cbiAgcmV0dXJuIGRldmljZXM7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBsaXN0IG9mIGRldmljZXMgdmlzaWJsZSB0byBhZGIgd2l0aGluIHRoZSBnaXZlbiB0aW1lb3V0LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0TXMgLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGdldCBhdCBsZWFzdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZSBsaXN0IGl0ZW0uXG4gKiBAcmV0dXJuIHtBcnJheS48RGV2aWNlPn0gVGhlIGxpc3Qgb2YgY29ubmVjdGVkIGRldmljZXMuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgbm8gY29ubmVjdGVkIGRldmljZXMgY2FuIGJlIGRldGVjdGVkIHdpdGhpbiB0aGUgZ2l2ZW4gdGltZW91dC5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZ2V0RGV2aWNlc1dpdGhSZXRyeSA9IGFzeW5jIGZ1bmN0aW9uIGdldERldmljZXNXaXRoUmV0cnkgKHRpbWVvdXRNcyA9IDIwMDAwKSB7XG4gIGNvbnN0IHRpbWVyID0gbmV3IHRpbWluZy5UaW1lcigpLnN0YXJ0KCk7XG4gIGxvZy5kZWJ1ZygnVHJ5aW5nIHRvIGZpbmQgYSBjb25uZWN0ZWQgYW5kcm9pZCBkZXZpY2UnKTtcbiAgY29uc3QgZ2V0RGV2aWNlcyA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAodGltZXIuZ2V0RHVyYXRpb24oKS5hc01pbGxpU2Vjb25kcyA+IHRpbWVvdXRNcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBhIGNvbm5lY3RlZCBBbmRyb2lkIGRldmljZSBpbiAke3RpbWVyLmdldER1cmF0aW9uKCkuYXNNaWxsaVNlY29uZHMudG9GaXhlZCgwKX1tcy5gKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRldmljZXMgPSBhd2FpdCB0aGlzLmdldENvbm5lY3RlZERldmljZXMoKTtcbiAgICAgIGlmIChkZXZpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGRldmljZXM7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoaWduKSB7fVxuXG4gICAgbG9nLmRlYnVnKCdDb3VsZCBub3QgZmluZCBvbmxpbmUgZGV2aWNlcycpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnJlY29ubmVjdCgpO1xuICAgIH0gY2F0Y2ggKGlnbikge1xuICAgICAgYXdhaXQgdGhpcy5yZXN0YXJ0QWRiKCk7XG4gICAgfVxuICAgIC8vIGNvb2wgZG93blxuICAgIGF3YWl0IHNsZWVwKDIwMCk7XG4gICAgcmV0dXJuIGF3YWl0IGdldERldmljZXMoKTtcbiAgfTtcbiAgcmV0dXJuIGF3YWl0IGdldERldmljZXMoKTtcbn07XG5cbi8qKlxuICogS2ljayBjdXJyZW50IGNvbm5lY3Rpb24gZnJvbSBob3N0L2RldmljZSBzaWRlIGFuZCBtYWtlIGl0IHJlY29ubmVjdFxuICpcbiAqIEBwYXJhbSB7P3N0cmluZ30gdGFyZ2V0IFtvZmZsaW5lXSBPbmUgb2YgcG9zc2libGUgdGFyZ2V0cyB0byByZWNvbm5lY3Q6XG4gKiBvZmZsaW5lLCBkZXZpY2Ugb3IgbnVsbFxuICogUHJvdmlkaW5nIGBudWxsYCB3aWxsIGNhdXNlIHJlY29ubmVjdGlvbiB0byBoYXBwZW4gZnJvbSB0aGUgaG9zdCBzaWRlLlxuICpcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBlaXRoZXIgQURCIHZlcnNpb24gaXMgdG9vIG9sZCBhbmQgZG9lcyBub3Qgc3VwcG9ydCB0aGlzXG4gKiBjb21tYW5kIG9yIHRoZXJlIHdhcyBhIGZhaWx1cmUgZHVyaW5nIHJlY29ubmVjdC5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMucmVjb25uZWN0ID0gYXN5bmMgZnVuY3Rpb24gcmVjb25uZWN0ICh0YXJnZXQgPSAnb2ZmbGluZScpIHtcbiAgbG9nLmRlYnVnKGBSZWNvbm5lY3RpbmcgYWRiICh0YXJnZXQgJHt0YXJnZXR9KWApO1xuXG4gIGNvbnN0IGFyZ3MgPSBbJ3JlY29ubmVjdCddO1xuICBpZiAodGFyZ2V0KSB7XG4gICAgYXJncy5wdXNoKHRhcmdldCk7XG4gIH1cbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLmFkYkV4ZWMoYXJncyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZWNvbm5lY3QgYWRiLiBPcmlnaW5hbCBlcnJvcjogJHtlLnN0ZGVyciB8fCBlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVzdGFydCBhZGIgc2VydmVyLCB1bmxlc3MgX3RoaXMuc3VwcHJlc3NLaWxsU2VydmVyXyBwcm9wZXJ0eSBpcyB0cnVlLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5yZXN0YXJ0QWRiID0gYXN5bmMgZnVuY3Rpb24gcmVzdGFydEFkYiAoKSB7XG4gIGlmICh0aGlzLnN1cHByZXNzS2lsbFNlcnZlcikge1xuICAgIGxvZy5kZWJ1ZyhgTm90IHJlc3RhcnRpbmcgYWJkIHNpbmNlICdzdXBwcmVzc0tpbGxTZXJ2ZXInIGlzIG9uYCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbG9nLmRlYnVnKCdSZXN0YXJ0aW5nIGFkYicpO1xuICB0cnkge1xuICAgIGF3YWl0IHRoaXMua2lsbFNlcnZlcigpO1xuICAgIGF3YWl0IHRoaXMuYWRiRXhlYyhbJ3N0YXJ0LXNlcnZlciddKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvcihgRXJyb3Iga2lsbGluZyBBREIgc2VydmVyLCBnb2luZyB0byBzZWUgaWYgaXQncyBvbmxpbmUgYW55d2F5YCk7XG4gIH1cbn07XG5cbi8qKlxuICogS2lsbCBhZGIgc2VydmVyLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5raWxsU2VydmVyID0gYXN5bmMgZnVuY3Rpb24ga2lsbFNlcnZlciAoKSB7XG4gIGxvZy5kZWJ1ZyhgS2lsbGluZyBhZGIgc2VydmVyIG9uIHBvcnQgJyR7dGhpcy5hZGJQb3J0fSdgKTtcbiAgYXdhaXQgdGhpcy5hZGJFeGVjKFsna2lsbC1zZXJ2ZXInXSwge1xuICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgfSk7XG59O1xuXG4vKipcbiAqIFJlc2V0IFRlbG5ldCBhdXRoZW50aWNhdGlvbiB0b2tlbi5cbiAqIEBzZWUge0BsaW5rIGh0dHA6Ly90b29scy5hbmRyb2lkLmNvbS9yZWNlbnQvZW11bGF0b3IyNTE2cmVsZWFzZW5vdGVzfSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBJZiB0b2tlbiByZXNldCB3YXMgc3VjY2Vzc2Z1bC5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMucmVzZXRUZWxuZXRBdXRoVG9rZW4gPSBfLm1lbW9pemUoYXN5bmMgZnVuY3Rpb24gcmVzZXRUZWxuZXRBdXRoVG9rZW4gKCkge1xuICAvLyBUaGUgbWV0aG9kcyBpcyB1c2VkIHRvIHJlbW92ZSB0ZWxuZXQgYXV0aCB0b2tlblxuICAvL1xuICBjb25zdCBob21lRm9sZGVyUGF0aCA9IHByb2Nlc3MuZW52Wyhwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSA/ICdVU0VSUFJPRklMRScgOiAnSE9NRSddO1xuICBpZiAoIWhvbWVGb2xkZXJQYXRoKSB7XG4gICAgbG9nLndhcm4oYENhbm5vdCBmaW5kIHRoZSBwYXRoIHRvIHVzZXIgaG9tZSBmb2xkZXIuIElnbm9yaW5nIHJlc2V0dGluZyBvZiBlbXVsYXRvcidzIHRlbG5ldCBhdXRoZW50aWNhdGlvbiB0b2tlbmApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBkc3RQYXRoID0gcGF0aC5yZXNvbHZlKGhvbWVGb2xkZXJQYXRoLCAnLmVtdWxhdG9yX2NvbnNvbGVfYXV0aF90b2tlbicpO1xuICBsb2cuZGVidWcoYE92ZXJyaWRpbmcgJHtkc3RQYXRofSB3aXRoIGFuIGVtcHR5IHN0cmluZyB0byBhdm9pZCB0ZWxuZXQgYXV0aGVudGljYXRpb24gZm9yIGVtdWxhdG9yIGNvbW1hbmRzYCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKGRzdFBhdGgsICcnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy53YXJuKGBFcnJvciAke2UubWVzc2FnZX0gd2hpbGUgcmVzZXR0aW5nIHRoZSBjb250ZW50IG9mICR7ZHN0UGF0aH0uIElnbm9yaW5nIHJlc2V0dGluZyBvZiBlbXVsYXRvcidzIHRlbG5ldCBhdXRoZW50aWNhdGlvbiB0b2tlbmApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn0pO1xuXG4vKipcbiAqIEV4ZWN1dGUgdGhlIGdpdmVuIGVtdWxhdG9yIGNvbW1hbmQgdXNpbmcgX2FkYiBlbXVfIHRvb2wuXG4gKlxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gY21kIC0gVGhlIGFycmF5IG9mIHJlc3QgY29tbWFuZCBsaW5lIHBhcmFtZXRlcnMuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmFkYkV4ZWNFbXUgPSBhc3luYyBmdW5jdGlvbiBhZGJFeGVjRW11IChjbWQpIHtcbiAgYXdhaXQgdGhpcy52ZXJpZnlFbXVsYXRvckNvbm5lY3RlZCgpO1xuICBhd2FpdCB0aGlzLnJlc2V0VGVsbmV0QXV0aFRva2VuKCk7XG4gIGF3YWl0IHRoaXMuYWRiRXhlYyhbJ2VtdScsIC4uLmNtZF0pO1xufTtcblxubGV0IGlzRXhlY0xvY2tlZCA9IGZhbHNlO1xuXG4vKipcbiAqIEV4ZWN1dGUgdGhlIGdpdmVuIGFkYiBjb21tYW5kLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IGNtZCAtIFRoZSBhcnJheSBvZiByZXN0IGNvbW1hbmQgbGluZSBwYXJhbWV0ZXJzXG4gKiAgICAgICAgICAgICAgICAgICAgICBvciBhIHNpbmdsZSBzdHJpbmcgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBBZGRpdGlvbmFsIG9wdGlvbnMgbWFwcGluZy4gU2VlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL25vZGUtdGVlbl9wcm9jZXNzfVxuICogICAgICAgICAgICAgICAgICAgICAgICBmb3IgbW9yZSBkZXRhaWxzLlxuICogICAgICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIGFsc28gc2V0IHRoZSBhZGRpdGlvbmFsIGBleGNsdXNpdmVgIHBhcmFtXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGB0cnVlYCB0aGF0IGFzc3VyZXMgbm8gb3RoZXIgcGFyYWxsZWwgYWRiIGNvbW1hbmRzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBnb2luZyB0byBiZSBleGVjdXRlZCB3aGlsZSB0aGUgY3VycmVudCBvbmUgaXMgcnVubmluZ1xuICogQHJldHVybiB7c3RyaW5nfSAtIENvbW1hbmQncyBzdGRvdXQuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGNvbW1hbmQgcmV0dXJuZWQgbm9uLXplcm8gZXhpdCBjb2RlLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5hZGJFeGVjID0gYXN5bmMgZnVuY3Rpb24gYWRiRXhlYyAoY21kLCBvcHRzID0ge30pIHtcbiAgaWYgKCFjbWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIHBhc3MgaW4gYSBjb21tYW5kIHRvIGFkYkV4ZWMoKScpO1xuICB9XG5cbiAgb3B0cyA9IF8uY2xvbmVEZWVwKG9wdHMpO1xuICAvLyBzZXR0aW5nIGRlZmF1bHQgdGltZW91dCBmb3IgZWFjaCBjb21tYW5kIHRvIHByZXZlbnQgaW5maW5pdGUgd2FpdC5cbiAgb3B0cy50aW1lb3V0ID0gb3B0cy50aW1lb3V0IHx8IHRoaXMuYWRiRXhlY1RpbWVvdXQgfHwgREVGQVVMVF9BREJfRVhFQ19USU1FT1VUO1xuICBvcHRzLnRpbWVvdXRDYXBOYW1lID0gb3B0cy50aW1lb3V0Q2FwTmFtZSB8fCAnYWRiRXhlY1RpbWVvdXQnOyAvLyBGb3IgZXJyb3IgbWVzc2FnZVxuXG4gIGNtZCA9IF8uaXNBcnJheShjbWQpID8gY21kIDogW2NtZF07XG4gIGxldCBhZGJSZXRyaWVkID0gZmFsc2U7XG4gIGNvbnN0IGV4ZWNGdW5jID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBhcmdzID0gWy4uLnRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncywgLi4uY21kXTtcbiAgICAgIGxvZy5kZWJ1ZyhgUnVubmluZyAnJHt0aGlzLmV4ZWN1dGFibGUucGF0aH0gYCArXG4gICAgICAgIChhcmdzLmZpbmQoKGFyZykgPT4gL1xccysvLnRlc3QoYXJnKSkgPyB1dGlsLnF1b3RlKGFyZ3MpIDogYXJncy5qb2luKCcgJykpICsgYCdgKTtcbiAgICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWModGhpcy5leGVjdXRhYmxlLnBhdGgsIGFyZ3MsIG9wdHMpO1xuICAgICAgLy8gc29tZXRpbWVzIEFEQiBwcmludHMgb3V0IHdlaXJkIHN0ZG91dCB3YXJuaW5ncyB0aGF0IHdlIGRvbid0IHdhbnRcbiAgICAgIC8vIHRvIGluY2x1ZGUgaW4gYW55IG9mIHRoZSByZXNwb25zZSBkYXRhLCBzbyBsZXQncyBzdHJpcCBpdCBvdXRcbiAgICAgIHN0ZG91dCA9IHN0ZG91dC5yZXBsYWNlKExJTktFUl9XQVJOSU5HX1JFR0VYUCwgJycpLnRyaW0oKTtcbiAgICAgIHJldHVybiBzdGRvdXQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3QgZXJyVGV4dCA9IGAke2UubWVzc2FnZX0sICR7ZS5zdGRvdXR9LCAke2Uuc3RkZXJyfWA7XG4gICAgICBpZiAoQURCX1JFVFJZX0VSUk9SX1BBVFRFUk5TLnNvbWUoKHApID0+IHAudGVzdChlcnJUZXh0KSkpIHtcbiAgICAgICAgbG9nLmluZm8oYEVycm9yIHNlbmRpbmcgY29tbWFuZCwgcmVjb25uZWN0aW5nIGRldmljZSBhbmQgcmV0cnlpbmc6ICR7Y21kfWApO1xuICAgICAgICBhd2FpdCBzbGVlcCgxMDAwKTtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXREZXZpY2VzV2l0aFJldHJ5KCk7XG5cbiAgICAgICAgLy8gdHJ5IGFnYWluIG9uZSB0aW1lXG4gICAgICAgIGlmIChhZGJSZXRyaWVkKSB7XG4gICAgICAgICAgYWRiUmV0cmllZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IGV4ZWNGdW5jKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGUuY29kZSA9PT0gMCAmJiBlLnN0ZG91dCkge1xuICAgICAgICByZXR1cm4gZS5zdGRvdXQucmVwbGFjZShMSU5LRVJfV0FSTklOR19SRUdFWFAsICcnKS50cmltKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfLmlzTnVsbChlLmNvZGUpKSB7XG4gICAgICAgIGUubWVzc2FnZSA9IGBFcnJvciBleGVjdXRpbmcgYWRiRXhlYy4gT3JpZ2luYWwgZXJyb3I6ICcke2UubWVzc2FnZX0nLiBgICtcbiAgICAgICAgICBgVHJ5IHRvIGluY3JlYXNlIHRoZSAke29wdHMudGltZW91dH1tcyBhZGIgZXhlY3V0aW9uIHRpbWVvdXQgcmVwcmVzZW50ZWQgYnkgJyR7b3B0cy50aW1lb3V0Q2FwTmFtZX0nIGNhcGFiaWxpdHlgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZS5tZXNzYWdlID0gYEVycm9yIGV4ZWN1dGluZyBhZGJFeGVjLiBPcmlnaW5hbCBlcnJvcjogJyR7ZS5tZXNzYWdlfSc7IGAgK1xuICAgICAgICAgIGBTdGRlcnI6ICckeyhlLnN0ZGVyciB8fCAnJykudHJpbSgpfSc7IENvZGU6ICcke2UuY29kZX0nYDtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9O1xuXG4gIGlmIChpc0V4ZWNMb2NrZWQpIHtcbiAgICBsb2cuZGVidWcoJ1dhaXRpbmcgdW50aWwgdGhlIG90aGVyIGV4Y2x1c2l2ZSBBREIgY29tbWFuZCBpcyBjb21wbGV0ZWQnKTtcbiAgICBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKCgpID0+ICFpc0V4ZWNMb2NrZWQsIHtcbiAgICAgIHdhaXRNczogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsXG4gICAgICBpbnRlcnZhbE1zOiAxMCxcbiAgICB9KTtcbiAgICBsb2cuZGVidWcoJ0NvbnRpbnVpbmcgd2l0aCB0aGUgY3VycmVudCBBREIgY29tbWFuZCcpO1xuICB9XG4gIGlmIChvcHRzLmV4Y2x1c2l2ZSkge1xuICAgIGlzRXhlY0xvY2tlZCA9IHRydWU7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgZXhlY0Z1bmMoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAob3B0cy5leGNsdXNpdmUpIHtcbiAgICAgIGlzRXhlY0xvY2tlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTaGVsbEV4ZWNPcHRpb25zXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHRpbWVvdXRDYXBOYW1lIFthZGJFeGVjVGltZW91dF0gLSB0aGUgbmFtZSBvZiB0aGUgY29ycmVzcG9uZGluZyBBcHBpdW0ncyB0aW1lb3V0IGNhcGFiaWxpdHlcbiAqICh1c2VkIGluIHRoZSBlcnJvciBtZXNzYWdlcykuXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHRpbWVvdXQgW2FkYkV4ZWNUaW1lb3V0XSAtIGNvbW1hbmQgZXhlY3V0aW9uIHRpbWVvdXQuXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSBwcml2aWxlZ2VkIFtmYWxzeV0gLSBXaGV0aGVyIHRvIHJ1biB0aGUgZ2l2ZW4gY29tbWFuZCBhcyByb290LlxuICpcbiAqIEFsbCBvdGhlciBwcm9wZXJ0aWVzIGFyZSB0aGUgc2FtZSBhcyBmb3IgYGV4ZWNgIGNhbGwgZnJvbSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9ub2RlLXRlZW5fcHJvY2Vzc31cbiAqIG1vZHVsZVxuICovXG5cbi8qKlxuICogRXhlY3V0ZSB0aGUgZ2l2ZW4gY29tbWFuZCB1c2luZyBfYWRiIHNoZWxsXyBwcmVmaXguXG4gKlxuICogQHBhcmFtIHshQXJyYXkuPHN0cmluZz58c3RyaW5nfSBjbWQgLSBUaGUgYXJyYXkgb2YgcmVzdCBjb21tYW5kIGxpbmUgcGFyYW1ldGVycyBvciBhIHNpbmdsZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0gez9TaGVsbEV4ZWNPcHRpb25zfSBvcHRzIFt7fV0gLSBBZGRpdGlvbmFsIG9wdGlvbnMgbWFwcGluZy5cbiAqIEByZXR1cm4ge3N0cmluZ30gLSBDb21tYW5kJ3Mgc3Rkb3V0LlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBjb21tYW5kIHJldHVybmVkIG5vbi16ZXJvIGV4aXQgY29kZS5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuc2hlbGwgPSBhc3luYyBmdW5jdGlvbiBzaGVsbCAoY21kLCBvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHByaXZpbGVnZWQsXG4gIH0gPSBvcHRzO1xuXG4gIGNvbnN0IGNtZEFyciA9IF8uaXNBcnJheShjbWQpID8gY21kIDogW2NtZF07XG4gIGNvbnN0IGZ1bGxDbWQgPSBbJ3NoZWxsJ107XG4gIGlmIChwcml2aWxlZ2VkKSB7XG4gICAgbG9nLmluZm8oYCdhZGIgc2hlbGwgJHt1dGlsLnF1b3RlKGNtZEFycil9JyByZXF1aXJlcyByb290IGFjY2Vzc2ApO1xuICAgIGlmIChhd2FpdCB0aGlzLmlzUm9vdCgpKSB7XG4gICAgICBsb2cuaW5mbygnVGhlIGRldmljZSBhbHJlYWR5IGhhZCByb290IGFjY2VzcycpO1xuICAgICAgZnVsbENtZC5wdXNoKC4uLmNtZEFycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZ1bGxDbWQucHVzaCgnc3UnLCAncm9vdCcsIHV0aWwucXVvdGUoY21kQXJyKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZ1bGxDbWQucHVzaCguLi5jbWRBcnIpO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzLmFkYkV4ZWMoZnVsbENtZCwgb3B0cyk7XG59O1xuXG5zeXN0ZW1DYWxsTWV0aG9kcy5jcmVhdGVTdWJQcm9jZXNzID0gZnVuY3Rpb24gY3JlYXRlU3ViUHJvY2VzcyAoYXJncyA9IFtdKSB7XG4gIC8vIGFkZCB0aGUgZGVmYXVsdCBhcmd1bWVudHNcbiAgYXJncyA9IFsuLi50aGlzLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MsIC4uLmFyZ3NdO1xuICBsb2cuZGVidWcoYENyZWF0aW5nIEFEQiBzdWJwcm9jZXNzIHdpdGggYXJnczogJHtKU09OLnN0cmluZ2lmeShhcmdzKX1gKTtcbiAgcmV0dXJuIG5ldyBTdWJQcm9jZXNzKHRoaXMuZ2V0QWRiUGF0aCgpLCBhcmdzKTtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGN1cnJlbnQgYWRiIHBvcnQuXG4gKiBAdG9kbyBjYW4gcHJvYmFibHkgZGVwcmVjYXRlIHRoaXMgbm93IHRoYXQgdGhlIGxvZ2ljIGlzIGp1c3QgdG8gcmVhZCB0aGlzLmFkYlBvcnRcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGN1cnJlbnQgYWRiIHBvcnQgbnVtYmVyLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRBZGJTZXJ2ZXJQb3J0ID0gZnVuY3Rpb24gZ2V0QWRiU2VydmVyUG9ydCAoKSB7XG4gIHJldHVybiB0aGlzLmFkYlBvcnQ7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBjdXJyZW50IGVtdWxhdG9yIHBvcnQgZnJvbSBfYWRiIGRldml2ZXNfIG91dHB1dC5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjdXJyZW50IGVtdWxhdG9yIHBvcnQuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgYXJlIG5vIGNvbm5lY3RlZCBkZXZpY2VzLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRFbXVsYXRvclBvcnQgPSBhc3luYyBmdW5jdGlvbiBnZXRFbXVsYXRvclBvcnQgKCkge1xuICBsb2cuZGVidWcoJ0dldHRpbmcgcnVubmluZyBlbXVsYXRvciBwb3J0Jyk7XG4gIGlmICh0aGlzLmVtdWxhdG9yUG9ydCAhPT0gbnVsbCkge1xuICAgIHJldHVybiB0aGlzLmVtdWxhdG9yUG9ydDtcbiAgfVxuICB0cnkge1xuICAgIGxldCBkZXZpY2VzID0gYXdhaXQgdGhpcy5nZXRDb25uZWN0ZWREZXZpY2VzKCk7XG4gICAgbGV0IHBvcnQgPSB0aGlzLmdldFBvcnRGcm9tRW11bGF0b3JTdHJpbmcoZGV2aWNlc1swXS51ZGlkKTtcbiAgICBpZiAocG9ydCkge1xuICAgICAgcmV0dXJuIHBvcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRW11bGF0b3IgcG9ydCBub3QgZm91bmRgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGRldmljZXMgY29ubmVjdGVkLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGN1cnJlbnQgZW11bGF0b3IgcG9ydCBieSBwYXJzaW5nIGVtdWxhdG9yIG5hbWUgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbVN0ciAtIEVtdWxhdG9yIG5hbWUgc3RyaW5nLlxuICogQHJldHVybiB7bnVtYmVyfGJvb2xlYW59IEVpdGhlciB0aGUgY3VycmVudCBlbXVsYXRvciBwb3J0IG9yXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgX2ZhbHNlXyBpZiBwb3J0IG51bWJlciBjYW5ub3QgYmUgcGFyc2VkLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRQb3J0RnJvbUVtdWxhdG9yU3RyaW5nID0gZnVuY3Rpb24gZ2V0UG9ydEZyb21FbXVsYXRvclN0cmluZyAoZW1TdHIpIHtcbiAgbGV0IHBvcnRQYXR0ZXJuID0gL2VtdWxhdG9yLShcXGQrKS87XG4gIGlmIChwb3J0UGF0dGVybi50ZXN0KGVtU3RyKSkge1xuICAgIHJldHVybiBwYXJzZUludChwb3J0UGF0dGVybi5leGVjKGVtU3RyKVsxXSwgMTApO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGxpc3Qgb2YgY3VycmVudGx5IGNvbm5lY3RlZCBlbXVsYXRvcnMuXG4gKlxuICogQHJldHVybiB7QXJyYXkuPERldmljZT59IFRoZSBsaXN0IG9mIGNvbm5lY3RlZCBkZXZpY2VzLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRDb25uZWN0ZWRFbXVsYXRvcnMgPSBhc3luYyBmdW5jdGlvbiBnZXRDb25uZWN0ZWRFbXVsYXRvcnMgKCkge1xuICBsb2cuZGVidWcoJ0dldHRpbmcgY29ubmVjdGVkIGVtdWxhdG9ycycpO1xuICB0cnkge1xuICAgIGxldCBkZXZpY2VzID0gYXdhaXQgdGhpcy5nZXRDb25uZWN0ZWREZXZpY2VzKCk7XG4gICAgbGV0IGVtdWxhdG9ycyA9IFtdO1xuICAgIGZvciAobGV0IGRldmljZSBvZiBkZXZpY2VzKSB7XG4gICAgICBsZXQgcG9ydCA9IHRoaXMuZ2V0UG9ydEZyb21FbXVsYXRvclN0cmluZyhkZXZpY2UudWRpZCk7XG4gICAgICBpZiAocG9ydCkge1xuICAgICAgICBkZXZpY2UucG9ydCA9IHBvcnQ7XG4gICAgICAgIGVtdWxhdG9ycy5wdXNoKGRldmljZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhgJHt1dGlsLnBsdXJhbGl6ZSgnZW11bGF0b3InLCBlbXVsYXRvcnMubGVuZ3RoLCB0cnVlKX0gY29ubmVjdGVkYCk7XG4gICAgcmV0dXJuIGVtdWxhdG9ycztcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZ2V0dGluZyBlbXVsYXRvcnMuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgX2VtdWxhdG9yUG9ydF8gcHJvcGVydHkgb2YgdGhlIGN1cnJlbnQgY2xhc3MuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGVtUG9ydCAtIFRoZSBlbXVsYXRvciBwb3J0IHRvIGJlIHNldC5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuc2V0RW11bGF0b3JQb3J0ID0gZnVuY3Rpb24gc2V0RW11bGF0b3JQb3J0IChlbVBvcnQpIHtcbiAgdGhpcy5lbXVsYXRvclBvcnQgPSBlbVBvcnQ7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaWRlbnRpZmllciBvZiB0aGUgY3VycmVudCBkZXZpY2UgKF90aGlzLmN1ckRldmljZUlkXykuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IC0gVGhlIGRldmljZSBpZGVudGlmaWVyLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5zZXREZXZpY2VJZCA9IGZ1bmN0aW9uIHNldERldmljZUlkIChkZXZpY2VJZCkge1xuICBsb2cuZGVidWcoYFNldHRpbmcgZGV2aWNlIGlkIHRvICR7ZGV2aWNlSWR9YCk7XG4gIHRoaXMuY3VyRGV2aWNlSWQgPSBkZXZpY2VJZDtcbiAgbGV0IGFyZ3NIYXNEZXZpY2UgPSB0aGlzLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MuaW5kZXhPZignLXMnKTtcbiAgaWYgKGFyZ3NIYXNEZXZpY2UgIT09IC0xKSB7XG4gICAgLy8gcmVtb3ZlIHRoZSBvbGQgZGV2aWNlIGlkIGZyb20gdGhlIGFyZ3VtZW50c1xuICAgIHRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncy5zcGxpY2UoYXJnc0hhc0RldmljZSwgMik7XG4gIH1cbiAgdGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLnB1c2goJy1zJywgZGV2aWNlSWQpO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHRoZSBjdXJyZW50IGRldmljZSBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtEZXZpY2V9IGRldmljZU9iaiAtIFRoZSBkZXZpY2Ugb2JqZWN0IHRvIGJlIHNldC5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuc2V0RGV2aWNlID0gZnVuY3Rpb24gc2V0RGV2aWNlIChkZXZpY2VPYmopIHtcbiAgbGV0IGRldmljZUlkID0gZGV2aWNlT2JqLnVkaWQ7XG4gIGxldCBlbVBvcnQgPSB0aGlzLmdldFBvcnRGcm9tRW11bGF0b3JTdHJpbmcoZGV2aWNlSWQpO1xuICB0aGlzLnNldEVtdWxhdG9yUG9ydChlbVBvcnQpO1xuICB0aGlzLnNldERldmljZUlkKGRldmljZUlkKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBvYmplY3QgZm9yIHRoZSBjdXJyZW50bHkgcnVubmluZyBlbXVsYXRvci5cbiAqICEhISBUaGlzIG1ldGhvZCBoYXMgYSBzaWRlIGVmZmVjdCAtIGl0IGltcGxpY2l0bHkgY2hhbmdlcyB0aGVcbiAqIGBkZXZpY2VJZGAgKG9ubHkgaWYgQVZEIHdpdGggYSBtYXRjaGluZyBuYW1lIGlzIGZvdW5kKVxuICogYW5kIGBlbXVsYXRvclBvcnRgIGluc3RhbmNlIHByb3BlcnRpZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGF2ZE5hbWUgLSBFbXVsYXRvciBuYW1lLlxuICogQHJldHVybiB7P0RldmljZX0gQ3VycmVudGx5IHJ1bm5pbmcgZW11bGF0b3Igb3IgX251bGxfLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRSdW5uaW5nQVZEID0gYXN5bmMgZnVuY3Rpb24gZ2V0UnVubmluZ0FWRCAoYXZkTmFtZSkge1xuICBsb2cuZGVidWcoYFRyeWluZyB0byBmaW5kICcke2F2ZE5hbWV9JyBlbXVsYXRvcmApO1xuICB0cnkge1xuICAgIGNvbnN0IGVtdWxhdG9ycyA9IGF3YWl0IHRoaXMuZ2V0Q29ubmVjdGVkRW11bGF0b3JzKCk7XG4gICAgZm9yIChjb25zdCBlbXVsYXRvciBvZiBlbXVsYXRvcnMpIHtcbiAgICAgIHRoaXMuc2V0RW11bGF0b3JQb3J0KGVtdWxhdG9yLnBvcnQpO1xuICAgICAgY29uc3QgcnVubmluZ0FWRE5hbWUgPSBhd2FpdCB0aGlzLmV4ZWNFbXVDb25zb2xlQ29tbWFuZChbJ2F2ZCcsICduYW1lJ10sIHtcbiAgICAgICAgcG9ydDogZW11bGF0b3IucG9ydCxcbiAgICAgICAgZXhlY1RpbWVvdXQ6IDUwMDAsXG4gICAgICAgIGNvbm5UaW1lb3V0OiAxMDAwLFxuICAgICAgfSk7XG4gICAgICBpZiAoXy50b0xvd2VyKGF2ZE5hbWUpID09PSBfLnRvTG93ZXIocnVubmluZ0FWRE5hbWUudHJpbSgpKSkge1xuICAgICAgICBsb2cuZGVidWcoYEZvdW5kIGVtdWxhdG9yICcke2F2ZE5hbWV9JyBvbiBwb3J0ICR7ZW11bGF0b3IucG9ydH1gKTtcbiAgICAgICAgdGhpcy5zZXREZXZpY2VJZChlbXVsYXRvci51ZGlkKTtcbiAgICAgICAgcmV0dXJuIGVtdWxhdG9yO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2cuZGVidWcoYEVtdWxhdG9yICcke2F2ZE5hbWV9JyBub3QgcnVubmluZ2ApO1xuICAgIHJldHVybiBudWxsO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBnZXR0aW5nIEFWRC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCB0aGUgb2JqZWN0IGZvciB0aGUgY3VycmVudGx5IHJ1bm5pbmcgZW11bGF0b3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGF2ZE5hbWUgLSBFbXVsYXRvciBuYW1lLlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRNcyBbMjAwMDBdIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIG1pbGxpc2Vjb25kc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gd2FpdCB1bnRpbCBhdCBsZWFzdCBvbmUgcnVubmluZyBBVkQgb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBkZXRlY3RlZC5cbiAqIEByZXR1cm4gez9EZXZpY2V9IEN1cnJlbnRseSBydW5uaW5nIGVtdWxhdG9yIG9yIF9udWxsXy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBubyBkZXZpY2UgaGFzIGJlZW4gZGV0ZWN0ZWQgd2l0aGluIHRoZSB0aW1lb3V0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRSdW5uaW5nQVZEV2l0aFJldHJ5ID0gYXN5bmMgZnVuY3Rpb24gZ2V0UnVubmluZ0FWRFdpdGhSZXRyeSAoYXZkTmFtZSwgdGltZW91dE1zID0gMjAwMDApIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRSdW5uaW5nQVZEKGF2ZE5hbWUucmVwbGFjZSgnQCcsICcnKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhlLm1lc3NhZ2UpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgd2FpdE1zOiB0aW1lb3V0TXMsXG4gICAgICBpbnRlcnZhbE1zOiAxMDAwLFxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBnZXR0aW5nIEFWRCB3aXRoIHJldHJ5LiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2h1dGRvd24gYWxsIHJ1bm5pbmcgZW11bGF0b3JzIGJ5IGtpbGxpbmcgdGhlaXIgcHJvY2Vzc2VzLlxuICpcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBraWxsaW5nIHRvb2wgcmV0dXJuZWQgbm9uLXplcm8gcmV0dXJuIGNvZGUuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmtpbGxBbGxFbXVsYXRvcnMgPSBhc3luYyBmdW5jdGlvbiBraWxsQWxsRW11bGF0b3JzICgpIHtcbiAgbGV0IGNtZCwgYXJncztcbiAgaWYgKHN5c3RlbS5pc1dpbmRvd3MoKSkge1xuICAgIGNtZCA9ICdUQVNLS0lMTCc7XG4gICAgYXJncyA9IFsnVEFTS0tJTEwnLCAnL0lNJywgJ2VtdWxhdG9yLmV4ZSddO1xuICB9IGVsc2Uge1xuICAgIGNtZCA9ICcvdXNyL2Jpbi9raWxsYWxsJztcbiAgICBhcmdzID0gWyctbScsICdlbXVsYXRvcionXTtcbiAgfVxuICB0cnkge1xuICAgIGF3YWl0IGV4ZWMoY21kLCBhcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3Iga2lsbGluZyBlbXVsYXRvcnMuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBLaWxsIGVtdWxhdG9yIHdpdGggdGhlIGdpdmVuIG5hbWUuIE5vIGVycm9yXG4gKiBpcyB0aHJvd24gaXMgZ2l2ZW4gYXZkIGRvZXMgbm90IGV4aXN0L2lzIG5vdCBydW5uaW5nLlxuICpcbiAqIEBwYXJhbSB7P3N0cmluZ30gYXZkTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBlbXVsYXRvciB0byBiZSBraWxsZWQuIElmIGVtcHR5LFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGN1cnJlbnQgZW11bGF0b3Igd2lsbCBiZSBraWxsZWQuXG4gKiBAcGFyYW0gez9udW1iZXJ9IHRpbWVvdXQgWzYwMDAwXSAtIFRoZSBhbW91bnQgb2YgdGltZSB0byB3YWl0IGJlZm9yZSB0aHJvd2luZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbiBleGNlcHRpb24gYWJvdXQgdW5zdWNjZXNzZnVsIGtpbGxpbmdcbiAqIEByZXR1cm4ge2Jvb2xlYW59IC0gVHJ1ZSBpZiB0aGUgZW11bGF0b3Igd2FzIGtpbGxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZXJlIHdhcyBhIGZhaWx1cmUgYnkga2lsbGluZyB0aGUgZW11bGF0b3JcbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMua2lsbEVtdWxhdG9yID0gYXN5bmMgZnVuY3Rpb24ga2lsbEVtdWxhdG9yIChhdmROYW1lID0gbnVsbCwgdGltZW91dCA9IDYwMDAwKSB7XG4gIGlmICh1dGlsLmhhc1ZhbHVlKGF2ZE5hbWUpKSB7XG4gICAgbG9nLmRlYnVnKGBLaWxsaW5nIGF2ZCAnJHthdmROYW1lfSdgKTtcbiAgICBjb25zdCBkZXZpY2UgPSBhd2FpdCB0aGlzLmdldFJ1bm5pbmdBVkQoYXZkTmFtZSk7XG4gICAgaWYgKCFkZXZpY2UpIHtcbiAgICAgIGxvZy5pbmZvKGBObyBhdmQgd2l0aCBuYW1lICcke2F2ZE5hbWV9JyBydW5uaW5nLiBTa2lwcGluZyBraWxsIHN0ZXAuYCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGtpbGxpbmcgdGhlIGN1cnJlbnQgYXZkXG4gICAgbG9nLmRlYnVnKGBLaWxsaW5nIGF2ZCB3aXRoIGlkICcke3RoaXMuY3VyRGV2aWNlSWR9J2ApO1xuICAgIGlmICghYXdhaXQgdGhpcy5pc0VtdWxhdG9yQ29ubmVjdGVkKCkpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgRW11bGF0b3Igd2l0aCBpZCAnJHt0aGlzLmN1ckRldmljZUlkfScgbm90IGNvbm5lY3RlZC4gU2tpcHBpbmcga2lsbCBzdGVwYCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGF3YWl0IHRoaXMuYWRiRXhlYyhbJ2VtdScsICdraWxsJ10pO1xuICBsb2cuZGVidWcoYFdhaXRpbmcgdXAgdG8gJHt0aW1lb3V0fW1zIHVudGlsIHRoZSBlbXVsYXRvciAnJHthdmROYW1lID8gYXZkTmFtZSA6IHRoaXMuY3VyRGV2aWNlSWR9JyBpcyBraWxsZWRgKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB1dGlsLmhhc1ZhbHVlKGF2ZE5hbWUpXG4gICAgICAgICAgPyAhYXdhaXQgdGhpcy5nZXRSdW5uaW5nQVZEKGF2ZE5hbWUpXG4gICAgICAgICAgOiAhYXdhaXQgdGhpcy5pc0VtdWxhdG9yQ29ubmVjdGVkKCk7XG4gICAgICB9IGNhdGNoIChpZ24pIHt9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSwge1xuICAgICAgd2FpdE1zOiB0aW1lb3V0LFxuICAgICAgaW50ZXJ2YWxNczogMjAwMCxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGVtdWxhdG9yICcke2F2ZE5hbWUgPyBhdmROYW1lIDogdGhpcy5jdXJEZXZpY2VJZH0nIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgYmVpbmcga2lsbGVkICR7dGltZW91dH1tcyBhZ29gKTtcbiAgfVxuICBsb2cuaW5mbyhgU3VjY2Vzc2Z1bGx5IGtpbGxlZCB0aGUgJyR7YXZkTmFtZSA/IGF2ZE5hbWUgOiB0aGlzLmN1ckRldmljZUlkfScgZW11bGF0b3JgKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEF2ZExhdW5jaE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfEFycmF5PHN0cmluZz59IGFyZ3MgQWRkaXRpb25hbCBlbXVsYXRvciBjb21tYW5kIGxpbmUgYXJndW1lbnRzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZW52IEFkZGl0aW9uYWwgZW11bGF0b3IgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbGFuZ3VhZ2UgRW11bGF0b3Igc3lzdGVtIGxhbmd1YWdlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY291bnRyeSBFbXVsYXRvciBzeXN0ZW0gY291bnRyeVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxhdW5jaFRpbWVvdXQgWzYwMDAwXSBFbXVsYXRvciBzdGFydHVwIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXG4gKiBAcHJvcGVydHkge251bWJlcn0gcmVhZHlUaW1lb3V0IFs2MDAwMF0gVGhlIG1heGltdW0gcGVyaW9kIG9mIHRpbWUgdG8gd2FpdCB1bnRpbCBFbXVsYXRvclxuICogaXMgcmVhZHkgZm9yIHVzYWdlIGluIG1pbGxpc2Vjb25kc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHJldHJ5VGltZXMgWzFdIFRoZSBtYXhpbXVtIG51bWJlciBvZiBzdGFydHVwIHJldHJpZXNcbiAqL1xuXG4vKipcbiAqIFN0YXJ0IGFuIGVtdWxhdG9yIHdpdGggZ2l2ZW4gcGFyYW1ldGVycyBhbmQgd2FpdCB1bnRpbCBpdCBpcyBmdWxseSBzdGFydGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdmROYW1lIC0gVGhlIG5hbWUgb2YgYW4gZXhpc3RpbmcgZW11bGF0b3IuXG4gKiBAcGFyYW0gez9BdmRMYXVuY2hPcHRpb25zfSBvcHRzXG4gKiBAcmV0dXJucyB7U3ViUHJvY2Vzc30gRW11bGF0b3Igc3VicHJvY2VzcyBpbnN0YW5jZVxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBlbXVsYXRvciBmYWlscyB0byBzdGFydCB3aXRoaW4gdGhlIGdpdmVuIHRpbWVvdXQuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmxhdW5jaEFWRCA9IGFzeW5jIGZ1bmN0aW9uIGxhdW5jaEFWRCAoYXZkTmFtZSwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBhcmdzID0gW10sXG4gICAgZW52ID0ge30sXG4gICAgbGFuZ3VhZ2UsXG4gICAgY291bnRyeSxcbiAgICBsYXVuY2hUaW1lb3V0ID0gNjAwMDAsXG4gICAgcmVhZHlUaW1lb3V0ID0gNjAwMDAsXG4gICAgcmV0cnlUaW1lcyA9IDEsXG4gIH0gPSBvcHRzO1xuICBsb2cuZGVidWcoYExhdW5jaGluZyBFbXVsYXRvciB3aXRoIEFWRCAke2F2ZE5hbWV9LCBsYXVuY2hUaW1lb3V0IGAgK1xuICAgICAgICAgICAgYCR7bGF1bmNoVGltZW91dH1tcyBhbmQgcmVhZHlUaW1lb3V0ICR7cmVhZHlUaW1lb3V0fW1zYCk7XG4gIGNvbnN0IGVtdWxhdG9yQmluYXJ5UGF0aCA9IGF3YWl0IHRoaXMuZ2V0U2RrQmluYXJ5UGF0aCgnZW11bGF0b3InKTtcbiAgaWYgKGF2ZE5hbWVbMF0gPT09ICdAJykge1xuICAgIGF2ZE5hbWUgPSBhdmROYW1lLnN1YnN0cigxKTtcbiAgfVxuICBhd2FpdCB0aGlzLmNoZWNrQXZkRXhpc3QoYXZkTmFtZSk7XG5cbiAgY29uc3QgbGF1bmNoQXJncyA9IFsnLWF2ZCcsIGF2ZE5hbWVdO1xuICBsYXVuY2hBcmdzLnB1c2goLi4uKHRvQXZkTG9jYWxlQXJncyhsYW5ndWFnZSwgY291bnRyeSkpKTtcblxuICBsZXQgaXNEZWxheUFkYkZlYXR1cmVFbmFibGVkID0gZmFsc2U7XG4gIGlmICh0aGlzLmFsbG93RGVsYXlBZGIpIHtcbiAgICBjb25zdCB7cmV2aXNpb259ID0gYXdhaXQgdGhpcy5nZXRFbXVWZXJzaW9uSW5mbygpO1xuICAgIGlmIChyZXZpc2lvbiAmJiB1dGlsLmNvbXBhcmVWZXJzaW9ucyhyZXZpc2lvbiwgJz49JywgJzI5LjAuNycpKSB7XG4gICAgICAvLyBodHRwczovL2FuZHJvaWRzdHVkaW8uZ29vZ2xlYmxvZy5jb20vMjAxOS8wNS9lbXVsYXRvci0yOTA3LWNhbmFyeS5odG1sXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7dGFyZ2V0fSA9IGF3YWl0IHRoaXMuZ2V0RW11SW1hZ2VQcm9wZXJ0aWVzKGF2ZE5hbWUpO1xuICAgICAgICBjb25zdCBhcGlNYXRjaCA9IC9cXGQrLy5leGVjKHRhcmdldCk7XG4gICAgICAgIC8vIGh0dHBzOi8vaXNzdWV0cmFja2VyLmdvb2dsZS5jb20vaXNzdWVzLzE0MjUzMzM1NVxuICAgICAgICBpZiAoYXBpTWF0Y2ggJiYgcGFyc2VJbnQoYXBpTWF0Y2hbMF0sIDEwKSA+PSBNSU5fREVMQVlfQURCX0FQSV9MRVZFTCkge1xuICAgICAgICAgIGxhdW5jaEFyZ3MucHVzaCgnLWRlbGF5LWFkYicpO1xuICAgICAgICAgIGlzRGVsYXlBZGJGZWF0dXJlRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgYWN0dWFsIGltYWdlIEFQSSB2ZXJzaW9uIGlzIGJlbG93ICR7TUlOX0RFTEFZX0FEQl9BUElfTEVWRUx9YCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nLmluZm8oYFRoZSAtZGVsYXktYWRiIGVtdWxhdG9yIHN0YXJ0dXAgZGV0ZWN0aW9uIGZlYXR1cmUgd2lsbCBub3QgYmUgZW5hYmxlZC4gYCArXG4gICAgICAgICAgYE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbG9nLmluZm8oJ1RoZSAtZGVsYXktYWRiIGVtdWxhdG9yIHN0YXJ0dXAgZGV0ZWN0aW9uIGZlYXR1cmUgaGFzIGJlZW4gZXhwbGljaXRseSBkaXNhYmxlZCcpO1xuICB9XG5cbiAgaWYgKCFfLmlzRW1wdHkoYXJncykpIHtcbiAgICBsYXVuY2hBcmdzLnB1c2goLi4uKF8uaXNBcnJheShhcmdzKSA/IGFyZ3MgOiB1dGlsLnNoZWxsUGFyc2UoYCR7YXJnc31gKSkpO1xuICB9XG5cbiAgbG9nLmRlYnVnKGBSdW5uaW5nICcke2VtdWxhdG9yQmluYXJ5UGF0aH0nIHdpdGggYXJnczogJHt1dGlsLnF1b3RlKGxhdW5jaEFyZ3MpfWApO1xuICBpZiAoIV8uaXNFbXB0eShlbnYpKSB7XG4gICAgbG9nLmRlYnVnKGBDdXN0b21pemVkIGVtdWxhdG9yIGVudmlyb25tZW50OiAke0pTT04uc3RyaW5naWZ5KGVudil9YCk7XG4gIH1cbiAgY29uc3QgcHJvYyA9IG5ldyBTdWJQcm9jZXNzKGVtdWxhdG9yQmluYXJ5UGF0aCwgbGF1bmNoQXJncywge1xuICAgIGVudjogT2JqZWN0LmFzc2lnbih7fSwgcHJvY2Vzcy5lbnYsIGVudiksXG4gIH0pO1xuICBhd2FpdCBwcm9jLnN0YXJ0KDApO1xuICBwcm9jLm9uKCdvdXRwdXQnLCAoc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICBmb3IgKGxldCBsaW5lIG9mIChzdGRvdXQgfHwgc3RkZXJyIHx8ICcnKS5zcGxpdCgnXFxuJykuZmlsdGVyKEJvb2xlYW4pKSB7XG4gICAgICBsb2cuaW5mbyhgW0FWRCBPVVRQVVRdICR7bGluZX1gKTtcbiAgICB9XG4gIH0pO1xuICBwcm9jLm9uKCdkaWUnLCAoY29kZSwgc2lnbmFsKSA9PiB7XG4gICAgbG9nLndhcm4oYEVtdWxhdG9yIGF2ZCAke2F2ZE5hbWV9IGV4aXRlZCB3aXRoIGNvZGUgJHtjb2RlfSR7c2lnbmFsID8gYCwgc2lnbmFsICR7c2lnbmFsfWAgOiAnJ31gKTtcbiAgfSk7XG4gIGF3YWl0IHJldHJ5KHJldHJ5VGltZXMsIGFzeW5jICgpID0+IGF3YWl0IHRoaXMuZ2V0UnVubmluZ0FWRFdpdGhSZXRyeShhdmROYW1lLCBsYXVuY2hUaW1lb3V0KSk7XG4gIC8vIEF0IHRoaXMgcG9pbnQgd2UgaGF2ZSBkZXZpY2VJZCBhbHJlYWR5IGFzc2lnbmVkXG4gIGlmIChpc0RlbGF5QWRiRmVhdHVyZUVuYWJsZWQpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5hZGJFeGVjKFsnd2FpdC1mb3ItZGV2aWNlJ10sIHt0aW1lb3V0OiByZWFkeVRpbWVvdXR9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCcke2F2ZE5hbWV9JyBFbXVsYXRvciBoYXMgZmFpbGVkIHRvIGJvb3Q6ICR7ZS5zdGRlcnIgfHwgZS5tZXNzYWdlfWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhd2FpdCB0aGlzLndhaXRGb3JFbXVsYXRvclJlYWR5KHJlYWR5VGltZW91dCk7XG4gIH1cbiAgcmV0dXJuIHByb2M7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEJpbmFyeVZlcnNpb25cbiAqIEBwcm9wZXJ0eSB7U2VtVmVyfSB2ZXJzaW9uIC0gVGhlIEFEQiBiaW5hcnkgdmVyc2lvbiBudW1iZXJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBidWlsZCAtIFRoZSBBREIgYmluYXJ5IGJ1aWxkIG51bWJlclxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQnJpZGdlVmVyc2lvblxuICogQHByb3BlcnR5IHtTZW1WZXJ9IHZlcnNpb24gLSBUaGUgQW5kcm9pZCBEZWJ1ZyBCcmlkZ2UgdmVyc2lvbiBudW1iZXJcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFZlcnNpb25cbiAqIEBwcm9wZXJ0eSB7P0JpbmFyeVZlcnNpb259IGJpbmFyeSBUaGlzIHZlcnNpb24gbnVtYmVyIG1pZ2h0IG5vdCBiZVxuICogYmUgcHJlc2VudCBmb3Igb2xkZXIgQURCIHJlbGVhc2VzLlxuICogQHByb3BlcnR5IHtCcmlkZ2VWZXJzaW9ufSBicmlkZ2VcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgYWRiIHZlcnNpb24uIFRoZSByZXN1bHQgb2YgdGhpcyBtZXRob2QgaXMgY2FjaGVkLlxuICpcbiAqIEByZXR1cm4ge1ZlcnNpb259XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHBhcnNlIGFkYiBiaW5hcnkgdmVyc2lvbi5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZ2V0VmVyc2lvbiA9IF8ubWVtb2l6ZShhc3luYyBmdW5jdGlvbiBnZXRWZXJzaW9uICgpIHtcbiAgbGV0IHN0ZG91dDtcbiAgdHJ5IHtcbiAgICBzdGRvdXQgPSBhd2FpdCB0aGlzLmFkYkV4ZWMoJ3ZlcnNpb24nKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZ2V0dGluZyBhZGIgdmVyc2lvbjogJHtlLnN0ZGVyciB8fCBlLm1lc3NhZ2V9YCk7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgYmluYXJ5VmVyc2lvbk1hdGNoID0gQklOQVJZX1ZFUlNJT05fUEFUVEVSTi5leGVjKHN0ZG91dCk7XG4gIGlmIChiaW5hcnlWZXJzaW9uTWF0Y2gpIHtcbiAgICByZXN1bHQuYmluYXJ5ID0ge1xuICAgICAgdmVyc2lvbjogc2VtdmVyLmNvZXJjZShiaW5hcnlWZXJzaW9uTWF0Y2hbMV0pLFxuICAgICAgYnVpbGQ6IHBhcnNlSW50KGJpbmFyeVZlcnNpb25NYXRjaFsyXSwgMTApLFxuICAgIH07XG4gIH1cbiAgY29uc3QgYnJpZGdlVmVyc2lvbk1hdGNoID0gQlJJREdFX1ZFUlNJT05fUEFUVEVSTi5leGVjKHN0ZG91dCk7XG4gIGlmIChicmlkZ2VWZXJzaW9uTWF0Y2gpIHtcbiAgICByZXN1bHQuYnJpZGdlID0ge1xuICAgICAgdmVyc2lvbjogc2VtdmVyLmNvZXJjZShicmlkZ2VWZXJzaW9uTWF0Y2hbMV0pLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBjdXJyZW50IGVtdWxhdG9yIGlzIHJlYWR5IHRvIGFjY2VwdCBmdXJ0aGVyIGNvbW1hbmRzIChib290aW5nIGNvbXBsZXRlZCkuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRNcyBbMjAwMDBdIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0LlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBlbXVsYXRvciBpcyBub3QgcmVhZHkgd2l0aGluIHRoZSBnaXZlbiB0aW1lb3V0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy53YWl0Rm9yRW11bGF0b3JSZWFkeSA9IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JFbXVsYXRvclJlYWR5ICh0aW1lb3V0TXMgPSAyMDAwMCkge1xuICB0cnkge1xuICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCEoYXdhaXQgdGhpcy5zaGVsbChbJ2dldHByb3AnLCAnaW5pdC5zdmMuYm9vdGFuaW0nXSkpLmluY2x1ZGVzKCdzdG9wcGVkJykpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29tZXRpbWVzIHRoZSBwYWNrYWdlIG1hbmFnZXIgc2VydmljZSBtaWdodCBzdGlsbCBiZWluZyBpbml0aWFsaXplZFxuICAgICAgICAvLyBvbiBzbG93IHN5c3RlbXMgZXZlbiBhZnRlciBlbXVsYXRvciBib290aW5nIGlzIGNvbXBsZXRlZC5cbiAgICAgICAgLy8gVGhlIHVzdWFsIG91dHB1dCBvZiBgcG0gZ2V0LWluc3RhbGwtbG9jYXRpb25gIGNvbW1hbmQgbG9va3MgbGlrZSBgMFthdXRvXWBcbiAgICAgICAgcmV0dXJuIC9cXGQrXFxbXFx3K1xcXS8udGVzdChhd2FpdCB0aGlzLnNoZWxsKFsncG0nLCAnZ2V0LWluc3RhbGwtbG9jYXRpb24nXSkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgV2FpdGluZyBmb3IgZW11bGF0b3Igc3RhcnR1cC4gSW50ZXJtZWRpYXRlIGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgd2FpdE1zOiB0aW1lb3V0TXMsXG4gICAgICBpbnRlcnZhbE1zOiAzMDAwLFxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFbXVsYXRvciBpcyBub3QgcmVhZHkgd2l0aGluICR7dGltZW91dE1zfW1zYCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIHJlYWR5IHRvIGFjY2VwdCBmdXJ0aGVyIGNvbW1hbmRzIChib290aW5nIGNvbXBsZXRlZCkuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGFwcERldmljZVJlYWR5VGltZW91dCBbMzBdIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIHNlY29uZHMgdG8gd2FpdC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgZGV2aWNlIGlzIG5vdCByZWFkeSB3aXRoaW4gdGhlIGdpdmVuIHRpbWVvdXQuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLndhaXRGb3JEZXZpY2UgPSBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yRGV2aWNlIChhcHBEZXZpY2VSZWFkeVRpbWVvdXQgPSAzMCkge1xuICB0aGlzLmFwcERldmljZVJlYWR5VGltZW91dCA9IGFwcERldmljZVJlYWR5VGltZW91dDtcbiAgY29uc3QgcmV0cmllcyA9IDM7XG4gIGNvbnN0IHRpbWVvdXQgPSBwYXJzZUludCh0aGlzLmFwcERldmljZVJlYWR5VGltZW91dCwgMTApICogMTAwMCAvIHJldHJpZXM7XG4gIGF3YWl0IHJldHJ5KHJldHJpZXMsIGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5hZGJFeGVjKCd3YWl0LWZvci1kZXZpY2UnLCB7dGltZW91dH0pO1xuICAgICAgYXdhaXQgdGhpcy5waW5nKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5yZWNvbm5lY3QoKTtcbiAgICAgIH0gY2F0Y2ggKGlnbikge1xuICAgICAgICBhd2FpdCB0aGlzLnJlc3RhcnRBZGIoKTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMuZ2V0Q29ubmVjdGVkRGV2aWNlcygpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3YWl0aW5nIGZvciB0aGUgZGV2aWNlIHRvIGJlIGF2YWlsYWJsZS4gT3JpZ2luYWwgZXJyb3I6ICcke2UubWVzc2FnZX0nYCk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogUmVib290IHRoZSBjdXJyZW50IGRldmljZSBhbmQgd2FpdCB1bnRpbCBpdCBpcyBjb21wbGV0ZWQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHJldHJpZXMgW0RFRkFVTFRfQURCX1JFQk9PVF9SRVRSSUVTXSAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiByZWJvb3QgcmV0cmllcy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgZGV2aWNlIGZhaWxlZCB0byByZWJvb3QgYW5kIG51bWJlciBvZiByZXRyaWVzIGlzIGV4Y2VlZGVkLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5yZWJvb3QgPSBhc3luYyBmdW5jdGlvbiByZWJvb3QgKHJldHJpZXMgPSBERUZBVUxUX0FEQl9SRUJPT1RfUkVUUklFUykge1xuICAvLyBHZXQgcm9vdCBhY2Nlc3Mgc28gd2UgY2FuIHJ1biB0aGUgbmV4dCBzaGVsbCBjb21tYW5kcyB3aGljaCByZXF1aXJlIHJvb3QgYWNjZXNzXG4gIGNvbnN0IHsgd2FzQWxyZWFkeVJvb3RlZCB9ID0gYXdhaXQgdGhpcy5yb290KCk7XG4gIHRyeSB7XG4gICAgLy8gU3RvcCBhbmQgcmUtc3RhcnQgdGhlIGRldmljZVxuICAgIGF3YWl0IHRoaXMuc2hlbGwoWydzdG9wJ10pO1xuICAgIGF3YWl0IEIuZGVsYXkoMjAwMCk7IC8vIGxldCB0aGUgZW11IGZpbmlzaCBzdG9wcGluZztcbiAgICBhd2FpdCB0aGlzLnNldERldmljZVByb3BlcnR5KCdzeXMuYm9vdF9jb21wbGV0ZWQnLCAwLCB7XG4gICAgICBwcml2aWxlZ2VkOiBmYWxzZSAvLyBubyBuZWVkIHRvIHNldCBwcml2aWxlZ2VkIHRydWUgYmVjYXVzZSBkZXZpY2UgYWxyZWFkeSByb290ZWRcbiAgICB9KTtcbiAgICBhd2FpdCB0aGlzLnNoZWxsKFsnc3RhcnQnXSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zdCB7bWVzc2FnZX0gPSBlO1xuXG4gICAgLy8gcHJvdmlkZSBhIGhlbHBmdWwgZXJyb3IgbWVzc2FnZSBpZiB0aGUgcmVhc29uIHJlYm9vdCBmYWlsZWQgd2FzIGJlY2F1c2UgQURCIGNvdWxkbid0IGdhaW4gcm9vdCBhY2Nlc3NcbiAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnbXVzdCBiZSByb290JykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IHJlYm9vdCBkZXZpY2UuIFJlYm9vdGluZyByZXF1aXJlcyByb290IGFjY2VzcyBhbmQgYCArXG4gICAgICAgIGBhdHRlbXB0IHRvIGdldCByb290IGFjY2VzcyBvbiBkZXZpY2UgZmFpbGVkIHdpdGggZXJyb3I6ICcke21lc3NhZ2V9J2ApO1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9IGZpbmFsbHkge1xuICAgIC8vIFJldHVybiByb290IHN0YXRlIHRvIHdoYXQgaXQgd2FzIGJlZm9yZVxuICAgIGlmICghd2FzQWxyZWFkeVJvb3RlZCkge1xuICAgICAgYXdhaXQgdGhpcy51bnJvb3QoKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgdGltZXIgPSBuZXcgdGltaW5nLlRpbWVyKCkuc3RhcnQoKTtcbiAgYXdhaXQgcmV0cnlJbnRlcnZhbChyZXRyaWVzLCAxMDAwLCBhc3luYyAoKSA9PiB7XG4gICAgaWYgKChhd2FpdCB0aGlzLmdldERldmljZVByb3BlcnR5KCdzeXMuYm9vdF9jb21wbGV0ZWQnKSkgPT09ICcxJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB3ZSBkb24ndCB3YW50IHRoZSBzdGFjayB0cmFjZSwgc28gbm8gbG9nLmVycm9yQW5kVGhyb3dcbiAgICBjb25zdCBtc2cgPSBgUmVib290IGlzIG5vdCBjb21wbGV0ZWQgYWZ0ZXIgJHt0aW1lci5nZXREdXJhdGlvbigpLmFzTWlsbGlTZWNvbmRzLnRvRml4ZWQoMCl9bXNgO1xuICAgIGxvZy5kZWJ1Zyhtc2cpO1xuICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gcm9vdFJlc3VsdFxuICogQHByb3BlcnR5IHtib29sZWFufSBpc1N1Y2Nlc3NmdWwgVHJ1ZSBpZiB0aGUgY2FsbCB0byByb290L3Vucm9vdCB3YXMgc3VjY2Vzc2Z1bFxuICogQHByb3BlcnR5IHtib29sZWFufSB3YXNBbHJlYWR5Um9vdGVkIFRydWUgaWYgdGhlIGRldmljZSB3YXMgYWxyZWFkeSByb290ZWRcbiAqL1xuXG4vKipcbiAqIFN3aXRjaCBhZGIgc2VydmVyIHJvb3QgcHJpdmlsZWdlcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNFbGV2YXRlZCAtIFNob3VsZCB3ZSBlbGV2YXRlIHRvIHRvIHJvb3Qgb3IgdW5yb290PyAoZGVmYXVsdCB0cnVlKVxuICogQHJldHVybiB7cm9vdFJlc3VsdH1cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuY2hhbmdlVXNlclByaXZpbGVnZXMgPSBhc3luYyBmdW5jdGlvbiBjaGFuZ2VVc2VyUHJpdmlsZWdlcyAoaXNFbGV2YXRlZCkge1xuICBjb25zdCBjbWQgPSBpc0VsZXZhdGVkID8gJ3Jvb3QnIDogJ3Vucm9vdCc7XG5cbiAgY29uc3QgcmV0cnlJZk9mZmxpbmUgPSBhc3luYyAoY21kRnVuYykgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgY21kRnVuYygpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gQ2hlY2sgdGhlIG91dHB1dCBvZiB0aGUgc3RkRXJyIHRvIHNlZSBpZiB0aGVyZSdzIGFueSBjbHVlcyB0aGF0IHNob3cgdGhhdCB0aGUgZGV2aWNlIHdlbnQgb2ZmbGluZVxuICAgICAgLy8gYW5kIGlmIGl0IGRpZCBnbyBvZmZsaW5lLCByZXN0YXJ0IEFEQlxuICAgICAgaWYgKFsnY2xvc2VkJywgJ2RldmljZSBvZmZsaW5lJywgJ3RpbWVvdXQgZXhwaXJlZCddXG4gICAgICAgICAgLnNvbWUoKHgpID0+IChlcnIuc3RkZXJyIHx8ICcnKS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHgpKSkge1xuICAgICAgICBsb2cud2FybihgQXR0ZW1wdCB0byAke2NtZH0gY2F1c2VkIEFEQiB0byB0aGluayB0aGUgZGV2aWNlIHdlbnQgb2ZmbGluZWApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHRoaXMucmVjb25uZWN0KCk7XG4gICAgICAgIH0gY2F0Y2ggKGlnbikge1xuICAgICAgICAgIGF3YWl0IHRoaXMucmVzdGFydEFkYigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCBjbWRGdW5jKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIElmIGl0J3MgYWxyZWFkeSByb290ZWQsIG91ciBqb2IgaXMgZG9uZS4gTm8gbmVlZCB0byByb290IGl0IGFnYWluLlxuICBjb25zdCBpc1Jvb3QgPSBhd2FpdCByZXRyeUlmT2ZmbGluZShhc3luYyAoKSA9PiBhd2FpdCB0aGlzLmlzUm9vdCgpKTtcbiAgaWYgKChpc1Jvb3QgJiYgaXNFbGV2YXRlZCkgfHwgKCFpc1Jvb3QgJiYgIWlzRWxldmF0ZWQpKSB7XG4gICAgcmV0dXJuIHtpc1N1Y2Nlc3NmdWw6IHRydWUsIHdhc0FscmVhZHlSb290ZWQ6IGlzUm9vdH07XG4gIH1cblxuICBsZXQgd2FzQWxyZWFkeVJvb3RlZCA9IGlzUm9vdDtcbiAgdHJ5IHtcbiAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IHJldHJ5SWZPZmZsaW5lKGFzeW5jICgpID0+IGF3YWl0IHRoaXMuYWRiRXhlYyhbY21kXSkpO1xuICAgIGxvZy5kZWJ1ZyhzdGRvdXQpO1xuXG4gICAgLy8gb24gcmVhbCBkZXZpY2VzIGluIHNvbWUgc2l0dWF0aW9ucyB3ZSBnZXQgYW4gZXJyb3IgaW4gdGhlIHN0ZG91dFxuICAgIGlmIChzdGRvdXQpIHtcbiAgICAgIGlmIChzdGRvdXQuaW5jbHVkZXMoJ2FkYmQgY2Fubm90IHJ1biBhcyByb290JykpIHtcbiAgICAgICAgcmV0dXJuIHtpc1N1Y2Nlc3NmdWw6IGZhbHNlLCB3YXNBbHJlYWR5Um9vdGVkfTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHRoZSBkZXZpY2Ugd2FzIGFscmVhZHkgcm9vdGVkLCByZXR1cm4gdGhhdCBpbiB0aGUgcmVzdWx0XG4gICAgICBpZiAoc3Rkb3V0LmluY2x1ZGVzKCdhbHJlYWR5IHJ1bm5pbmcgYXMgcm9vdCcpKSB7XG4gICAgICAgIHdhc0FscmVhZHlSb290ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge2lzU3VjY2Vzc2Z1bDogdHJ1ZSwgd2FzQWxyZWFkeVJvb3RlZH07XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnN0IHtzdGRlcnIgPSAnJywgbWVzc2FnZX0gPSBlcnI7XG4gICAgbG9nLndhcm4oYFVuYWJsZSB0byAke2NtZH0gYWRiIGRhZW1vbi4gT3JpZ2luYWwgZXJyb3I6ICcke21lc3NhZ2V9Jy4gU3RkZXJyOiAnJHtzdGRlcnJ9Jy4gQ29udGludWluZy5gKTtcbiAgICByZXR1cm4ge2lzU3VjY2Vzc2Z1bDogZmFsc2UsIHdhc0FscmVhZHlSb290ZWR9O1xuICB9XG59O1xuXG4vKipcbiAqIFN3aXRjaCBhZGIgc2VydmVyIHRvIHJvb3QgbW9kZVxuICogQHJldHVybiB7cm9vdFJlc3VsdH1cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMucm9vdCA9IGFzeW5jIGZ1bmN0aW9uIHJvb3QgKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5jaGFuZ2VVc2VyUHJpdmlsZWdlcyh0cnVlKTtcbn07XG5cbi8qKlxuICogU3dpdGNoIGFkYiBzZXJ2ZXIgdG8gbm9uLXJvb3QgbW9kZS5cbiAqXG4gKiBAcmV0dXJuIHtyb290UmVzdWx0fVxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy51bnJvb3QgPSBhc3luYyBmdW5jdGlvbiB1bnJvb3QgKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5jaGFuZ2VVc2VyUHJpdmlsZWdlcyhmYWxzZSk7XG59O1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBjdXJyZW50IHVzZXIgaXMgcm9vdFxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHVzZXIgaXMgcm9vdFxuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBpZGVudGlmeWluZ1xuICogdGhlIHVzZXIuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmlzUm9vdCA9IGFzeW5jIGZ1bmN0aW9uIGlzUm9vdCAoKSB7XG4gIHJldHVybiAoYXdhaXQgdGhpcy5zaGVsbChbJ3dob2FtaSddKSkudHJpbSgpID09PSAncm9vdCc7XG59O1xuXG4vKipcbiAqIFZlcmlmeSB3aGV0aGVyIGEgcmVtb3RlIHBhdGggZXhpc3RzIG9uIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVtb3RlUGF0aCAtIFRoZSByZW1vdGUgcGF0aCB0byB2ZXJpZnkuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBnaXZlbiBwYXRoIGV4aXN0cyBvbiB0aGUgZGV2aWNlLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5maWxlRXhpc3RzID0gYXN5bmMgZnVuY3Rpb24gZmlsZUV4aXN0cyAocmVtb3RlUGF0aCkge1xuICBjb25zdCBwYXNzRmxhZyA9ICdfX1BBU1NfXyc7XG4gIGNvbnN0IGNoZWNrQ21kID0gYFsgLWUgJyR7cmVtb3RlUGF0aC5yZXBsYWNlKC8nL2csIGBcXFxcJ2ApfScgXSAmJiBlY2hvICR7cGFzc0ZsYWd9YDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gXy5pbmNsdWRlcyhhd2FpdCB0aGlzLnNoZWxsKFtjaGVja0NtZF0pLCBwYXNzRmxhZyk7XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGhlIG91dHB1dCBvZiBfbHNfIGNvbW1hbmQgb24gdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdGVQYXRoIC0gVGhlIHJlbW90ZSBwYXRoICh0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIF9sc18gY29tbWFuZCkuXG4gKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzIFtbXV0gLSBBZGRpdGlvbmFsIF9sc18gb3B0aW9ucy5cbiAqIEByZXR1cm4ge0FycmF5LjxTdHJpbmc+fSBUaGUgX2xzXyBvdXRwdXQgYXMgYW4gYXJyYXkgb2Ygc3BsaXQgbGluZXMuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgQW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWQgb2YgdGhlIGdpdmVuIF9yZW1vdGVQYXRoX1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIGRvZXMgbm90IGV4aXN0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5scyA9IGFzeW5jIGZ1bmN0aW9uIGxzIChyZW1vdGVQYXRoLCBvcHRzID0gW10pIHtcbiAgdHJ5IHtcbiAgICBsZXQgYXJncyA9IFsnbHMnLCAuLi5vcHRzLCByZW1vdGVQYXRoXTtcbiAgICBsZXQgc3Rkb3V0ID0gYXdhaXQgdGhpcy5zaGVsbChhcmdzKTtcbiAgICBsZXQgbGluZXMgPSBzdGRvdXQuc3BsaXQoJ1xcbicpO1xuICAgIHJldHVybiBsaW5lcy5tYXAoKGwpID0+IGwudHJpbSgpKVxuICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgLmZpbHRlcigobCkgPT4gbC5pbmRleE9mKCdObyBzdWNoIGZpbGUnKSA9PT0gLTEpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoZXJyLm1lc3NhZ2UuaW5kZXhPZignTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScpID09PSAtMSkge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IHRoZSBzaXplIG9mIHRoZSBwYXJ0aWN1bGFyIGZpbGUgbG9jYXRlZCBvbiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlbW90ZVBhdGggLSBUaGUgcmVtb3RlIHBhdGggdG8gdGhlIGZpbGUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEZpbGUgc2l6ZSBpbiBieXRlcy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgZ2V0dGluZyB0aGUgc2l6ZSBvZiB0aGUgZ2l2ZW4gZmlsZS5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZmlsZVNpemUgPSBhc3luYyBmdW5jdGlvbiBmaWxlU2l6ZSAocmVtb3RlUGF0aCkge1xuICB0cnkge1xuICAgIGNvbnN0IGZpbGVzID0gYXdhaXQgdGhpcy5scyhyZW1vdGVQYXRoLCBbJy1sYSddKTtcbiAgICBpZiAoZmlsZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlbW90ZSBwYXRoIGlzIG5vdCBhIGZpbGVgKTtcbiAgICB9XG4gICAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9mT3M0UDQvOFxuICAgIGNvbnN0IG1hdGNoID0gL1tyd3hzU3RUXFwtK117MTB9W1xcc1xcZF0qXFxzW15cXHNdK1xccytbXlxcc10rXFxzKyhcXGQrKS8uZXhlYyhmaWxlc1swXSk7XG4gICAgaWYgKCFtYXRjaCB8fCBfLmlzTmFOKHBhcnNlSW50KG1hdGNoWzFdLCAxMCkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBwYXJzZSBzaXplIGZyb20gbGlzdCBvdXRwdXQ6ICcke2ZpbGVzWzBdfSdgKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGdldCBmaWxlIHNpemUgZm9yICcke3JlbW90ZVBhdGh9JzogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBJbnN0YWxscyB0aGUgZ2l2ZW4gY2VydGlmaWNhdGUgb24gYSByb290ZWQgcmVhbCBkZXZpY2Ugb3JcbiAqIGFuIGVtdWxhdG9yLiBUaGUgZW11bGF0b3IgbXVzdCBiZSBleGVjdXRlZCB3aXRoIGAtd3JpdGFibGUtc3lzdGVtYFxuICogY29tbWFuZCBsaW5lIG9wdGlvbiBhbmQgYWRiIGRhZW1vbiBzaG91bGQgYmUgcnVubmluZyBpbiByb290XG4gKiBtb2RlIGZvciB0aGlzIG1ldGhvZCB0byB3b3JrIHByb3Blcmx5LiBUaGUgbWV0aG9kIGFsc28gcmVxdWlyZXNcbiAqIG9wZW5zc2wgdG9vbCB0byBiZSBhdmFpbGFibGUgb24gdGhlIGRlc3RpbmF0aW9uIHN5c3RlbS5cbiAqIFJlYWQgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0vaXNzdWVzLzEwOTY0XG4gKiBmb3IgbW9yZSBkZXRhaWxzIG9uIHRoaXMgdG9waWNcbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcnxzdHJpbmd9IGNlcnQgLSBiYXNlNjQtZGVjb2RlZCBjb250ZW50IG9mIHRoZSBhY3R1YWwgY2VydGlmaWNhdGVcbiAqIHJlcHJlc2VudGVkIGFzIGEgc3RyaW5nIG9yIGEgYnVmZmVyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgb3BlbnNzbCB0b29sIGlzIG5vdCBhdmFpbGFibGUgb24gdGhlIGRlc3RpbmF0aW9uIHN5c3RlbVxuICogb3IgaWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGluc3RhbGxpbmcgdGhlIGNlcnRpZmljYXRlXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmluc3RhbGxNaXRtQ2VydGlmaWNhdGUgPSBhc3luYyBmdW5jdGlvbiBpbnN0YWxsTWl0bUNlcnRpZmljYXRlIChjZXJ0KSB7XG4gIGNvbnN0IG9wZW5Tc2wgPSBhd2FpdCBnZXRPcGVuU3NsRm9yT3MoKTtcblxuICBpZiAoIV8uaXNCdWZmZXIoY2VydCkpIHtcbiAgICBjZXJ0ID0gQnVmZmVyLmZyb20oY2VydCwgJ2Jhc2U2NCcpO1xuICB9XG5cbiAgY29uc3QgdG1wUm9vdCA9IGF3YWl0IHRlbXBEaXIub3BlbkRpcigpO1xuICB0cnkge1xuICAgIGNvbnN0IHNyY0NlcnQgPSBwYXRoLnJlc29sdmUodG1wUm9vdCwgJ3NvdXJjZS5jZXInKTtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUoc3JjQ2VydCwgY2VydCk7XG4gICAgbGV0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYyhvcGVuU3NsLCBbJ3g1MDknLCAnLW5vb3V0JywgJy1oYXNoJywgJy1pbicsIHNyY0NlcnRdKTtcbiAgICBjb25zdCBjZXJ0SGFzaCA9IHN0ZG91dC50cmltKCk7XG4gICAgbG9nLmRlYnVnKGBHb3QgY2VydGlmaWNhdGUgaGFzaDogJHtjZXJ0SGFzaH1gKTtcbiAgICBsb2cuZGVidWcoJ1ByZXBhcmluZyBjZXJ0aWZpY2F0ZSBjb250ZW50Jyk7XG4gICAgKHtzdGRvdXR9ID0gYXdhaXQgZXhlYyhvcGVuU3NsLCBbJ3g1MDknLCAnLWluJywgc3JjQ2VydF0sIHtpc0J1ZmZlcjogdHJ1ZX0pKTtcbiAgICBsZXQgZHN0Q2VydENvbnRlbnQgPSBzdGRvdXQ7XG4gICAgKHtzdGRvdXR9ID0gYXdhaXQgZXhlYyhvcGVuU3NsLCBbJ3g1MDknLFxuICAgICAgJy1pbicsIHNyY0NlcnQsXG4gICAgICAnLXRleHQnLFxuICAgICAgJy1maW5nZXJwcmludCcsXG4gICAgICAnLW5vb3V0J10sIHtpc0J1ZmZlcjogdHJ1ZX0pKTtcbiAgICBkc3RDZXJ0Q29udGVudCA9IEJ1ZmZlci5jb25jYXQoW2RzdENlcnRDb250ZW50LCBzdGRvdXRdKTtcbiAgICBjb25zdCBkc3RDZXJ0ID0gcGF0aC5yZXNvbHZlKHRtcFJvb3QsIGAke2NlcnRIYXNofS4wYCk7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKGRzdENlcnQsIGRzdENlcnRDb250ZW50KTtcbiAgICBsb2cuZGVidWcoJ1JlbW91bnRpbmcgL3N5c3RlbSBpbiBydyBtb2RlJyk7XG4gICAgLy8gU29tZXRpbWVzIGVtdWxhdG9yIHJlYm9vdCBpcyBzdGlsbCBub3QgZnVsbHkgZmluaXNoZWQgb24gdGhpcyBzdGFnZSwgc28gcmV0cnlcbiAgICBhd2FpdCByZXRyeUludGVydmFsKDUsIDIwMDAsIGFzeW5jICgpID0+IGF3YWl0IHRoaXMuYWRiRXhlYyhbJ3JlbW91bnQnXSkpO1xuICAgIGxvZy5kZWJ1ZyhgVXBsb2FkaW5nIHRoZSBnZW5lcmF0ZWQgY2VydGlmaWNhdGUgZnJvbSAnJHtkc3RDZXJ0fScgdG8gJyR7Q0VSVFNfUk9PVH0nYCk7XG4gICAgYXdhaXQgdGhpcy5wdXNoKGRzdENlcnQsIENFUlRTX1JPT1QpO1xuICAgIGxvZy5kZWJ1ZygnUmVtb3VudGluZyAvc3lzdGVtIHRvIGNvbmZpcm0gY2hhbmdlcycpO1xuICAgIGF3YWl0IHRoaXMuYWRiRXhlYyhbJ3JlbW91bnQnXSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGluamVjdCB0aGUgY3VzdG9tIGNlcnRpZmljYXRlLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYElzIHRoZSBjZXJ0aWZpY2F0ZSBwcm9wZXJseSBlbmNvZGVkIGludG8gYmFzZTY0LXN0cmluZz8gYCArXG4gICAgICAgICAgICAgICAgICAgIGBEbyB5b3UgaGF2ZSByb290IHBlcm1pc3Npb25zIG9uIHRoZSBkZXZpY2U/IGAgK1xuICAgICAgICAgICAgICAgICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgZnMucmltcmFmKHRtcFJvb3QpO1xuICB9XG59O1xuXG4vKipcbiAqIFZlcmlmaWVzIGlmIHRoZSBnaXZlbiByb290IGNlcnRpZmljYXRlIGlzIGFscmVhZHkgaW5zdGFsbGVkIG9uIHRoZSBkZXZpY2UuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ8c3RyaW5nfSBjZXJ0IC0gYmFzZTY0LWRlY29kZWQgY29udGVudCBvZiB0aGUgYWN0dWFsIGNlcnRpZmljYXRlXG4gKiByZXByZXNlbnRlZCBhcyBhIHN0cmluZyBvciBhIGJ1ZmZlclxuICogQHRocm93cyB7RXJyb3J9IElmIG9wZW5zc2wgdG9vbCBpcyBub3QgYXZhaWxhYmxlIG9uIHRoZSBkZXN0aW5hdGlvbiBzeXN0ZW1cbiAqIG9yIGlmIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBjaGVja2luZyB0aGUgY2VydGlmaWNhdGVcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBnaXZlbiBjZXJ0aWZpY2F0ZSBpcyBhbHJlYWR5IGluc3RhbGxlZFxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5pc01pdG1DZXJ0aWZpY2F0ZUluc3RhbGxlZCA9IGFzeW5jIGZ1bmN0aW9uIGlzTWl0bUNlcnRpZmljYXRlSW5zdGFsbGVkIChjZXJ0KSB7XG4gIGNvbnN0IG9wZW5Tc2wgPSBhd2FpdCBnZXRPcGVuU3NsRm9yT3MoKTtcblxuICBpZiAoIV8uaXNCdWZmZXIoY2VydCkpIHtcbiAgICBjZXJ0ID0gQnVmZmVyLmZyb20oY2VydCwgJ2Jhc2U2NCcpO1xuICB9XG5cbiAgY29uc3QgdG1wUm9vdCA9IGF3YWl0IHRlbXBEaXIub3BlbkRpcigpO1xuICBsZXQgY2VydEhhc2g7XG4gIHRyeSB7XG4gICAgY29uc3QgdG1wQ2VydCA9IHBhdGgucmVzb2x2ZSh0bXBSb290LCAnc291cmNlLmNlcicpO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZSh0bXBDZXJ0LCBjZXJ0KTtcbiAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMob3BlblNzbCwgWyd4NTA5JywgJy1ub291dCcsICctaGFzaCcsICctaW4nLCB0bXBDZXJ0XSk7XG4gICAgY2VydEhhc2ggPSBzdGRvdXQudHJpbSgpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZXRyaWV2ZSB0aGUgY2VydGlmaWNhdGUgaGFzaC4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBJcyB0aGUgY2VydGlmaWNhdGUgcHJvcGVybHkgZW5jb2RlZCBpbnRvIGJhc2U2NC1zdHJpbmc/IGAgK1xuICAgICAgICAgICAgICAgICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgZnMucmltcmFmKHRtcFJvb3QpO1xuICB9XG4gIGNvbnN0IGRzdFBhdGggPSBwYXRoLnBvc2l4LnJlc29sdmUoQ0VSVFNfUk9PVCwgYCR7Y2VydEhhc2h9LjBgKTtcbiAgbG9nLmRlYnVnKGBDaGVja2luZyBpZiB0aGUgY2VydGlmaWNhdGUgaXMgYWxyZWFkeSBpbnN0YWxsZWQgYXQgJyR7ZHN0UGF0aH0nYCk7XG4gIHJldHVybiBhd2FpdCB0aGlzLmZpbGVFeGlzdHMoZHN0UGF0aCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzeXN0ZW1DYWxsTWV0aG9kcztcbmV4cG9ydCB7IERFRkFVTFRfQURCX0VYRUNfVElNRU9VVCwgZ2V0QW5kcm9pZEJpbmFyeVBhdGggfTtcbiJdLCJmaWxlIjoibGliL3Rvb2xzL3N5c3RlbS1jYWxscy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
