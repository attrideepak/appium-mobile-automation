"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _path = _interopRequireDefault(require("path"));

const OSASCRIPT = 'osascript';
const APPLE_SCRIPT_FEATURE = 'apple_script';
const commands = {};
exports.commands = commands;

commands.macosExecAppleScript = async function macosExecAppleScript(opts = {}) {
  this.ensureFeatureEnabled(APPLE_SCRIPT_FEATURE);
  const {
    script,
    command,
    cwd,
    timeout
  } = opts;

  if (!script && !command) {
    _logger.default.errorAndThrow('AppleScript script/command must not be empty');
  }

  if (/\n/.test(command)) {
    _logger.default.errorAndThrow('AppleScript commands cannot contain line breaks');
  }

  const shouldRunScript = !command;
  let tmpRoot;

  try {
    const args = [];

    if (shouldRunScript) {
      tmpRoot = await _appiumSupport.tempDir.openDir();

      const tmpScriptPath = _path.default.resolve(tmpRoot, 'appium_script.scpt');

      await _appiumSupport.fs.writeFile(tmpScriptPath, script, 'utf8');
      args.push(tmpScriptPath);
    } else {
      args.push('-e', command);
    }

    _logger.default.info(`Running ${OSASCRIPT} with arguments: ${_appiumSupport.util.quote(args)}`);

    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(OSASCRIPT, args, {
        cwd,
        timeout
      });
      return stdout;
    } catch (e) {
      throw new Error(e.stderr || e.message);
    }
  } finally {
    if (tmpRoot) {
      await _appiumSupport.fs.rimraf(tmpRoot);
    }
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9hcHBsZXNjcmlwdC5qcyJdLCJuYW1lcyI6WyJPU0FTQ1JJUFQiLCJBUFBMRV9TQ1JJUFRfRkVBVFVSRSIsImNvbW1hbmRzIiwibWFjb3NFeGVjQXBwbGVTY3JpcHQiLCJvcHRzIiwiZW5zdXJlRmVhdHVyZUVuYWJsZWQiLCJzY3JpcHQiLCJjb21tYW5kIiwiY3dkIiwidGltZW91dCIsImxvZyIsImVycm9yQW5kVGhyb3ciLCJ0ZXN0Iiwic2hvdWxkUnVuU2NyaXB0IiwidG1wUm9vdCIsImFyZ3MiLCJ0ZW1wRGlyIiwib3BlbkRpciIsInRtcFNjcmlwdFBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsImZzIiwid3JpdGVGaWxlIiwicHVzaCIsImluZm8iLCJ1dGlsIiwicXVvdGUiLCJzdGRvdXQiLCJlIiwiRXJyb3IiLCJzdGRlcnIiLCJtZXNzYWdlIiwicmltcmFmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFNBQVMsR0FBRyxXQUFsQjtBQUNBLE1BQU1DLG9CQUFvQixHQUFHLGNBQTdCO0FBRUEsTUFBTUMsUUFBUSxHQUFHLEVBQWpCOzs7QUE0QkFBLFFBQVEsQ0FBQ0Msb0JBQVQsR0FBZ0MsZUFBZUEsb0JBQWYsQ0FBcUNDLElBQUksR0FBRyxFQUE1QyxFQUFnRDtBQUM5RSxPQUFLQyxvQkFBTCxDQUEwQkosb0JBQTFCO0FBRUEsUUFBTTtBQUNKSyxJQUFBQSxNQURJO0FBRUpDLElBQUFBLE9BRkk7QUFHSkMsSUFBQUEsR0FISTtBQUlKQyxJQUFBQTtBQUpJLE1BS0ZMLElBTEo7O0FBTUEsTUFBSSxDQUFDRSxNQUFELElBQVcsQ0FBQ0MsT0FBaEIsRUFBeUI7QUFDdkJHLG9CQUFJQyxhQUFKLENBQWtCLDhDQUFsQjtBQUNEOztBQUNELE1BQUksS0FBS0MsSUFBTCxDQUFVTCxPQUFWLENBQUosRUFBd0I7QUFDdEJHLG9CQUFJQyxhQUFKLENBQWtCLGlEQUFsQjtBQUNEOztBQUVELFFBQU1FLGVBQWUsR0FBRyxDQUFDTixPQUF6QjtBQUVBLE1BQUlPLE9BQUo7O0FBQ0EsTUFBSTtBQUNGLFVBQU1DLElBQUksR0FBRyxFQUFiOztBQUNBLFFBQUlGLGVBQUosRUFBcUI7QUFDbkJDLE1BQUFBLE9BQU8sR0FBRyxNQUFNRSx1QkFBUUMsT0FBUixFQUFoQjs7QUFDQSxZQUFNQyxhQUFhLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYU4sT0FBYixFQUFzQixvQkFBdEIsQ0FBdEI7O0FBQ0EsWUFBTU8sa0JBQUdDLFNBQUgsQ0FBYUosYUFBYixFQUE0QlosTUFBNUIsRUFBb0MsTUFBcEMsQ0FBTjtBQUNBUyxNQUFBQSxJQUFJLENBQUNRLElBQUwsQ0FBVUwsYUFBVjtBQUNELEtBTEQsTUFLTztBQUNMSCxNQUFBQSxJQUFJLENBQUNRLElBQUwsQ0FBVSxJQUFWLEVBQWdCaEIsT0FBaEI7QUFDRDs7QUFDREcsb0JBQUljLElBQUosQ0FBVSxXQUFVeEIsU0FBVSxvQkFBbUJ5QixvQkFBS0MsS0FBTCxDQUFXWCxJQUFYLENBQWlCLEVBQWxFOztBQUNBLFFBQUk7QUFDRixZQUFNO0FBQUNZLFFBQUFBO0FBQUQsVUFBVyxNQUFNLHdCQUFLM0IsU0FBTCxFQUFnQmUsSUFBaEIsRUFBc0I7QUFBQ1AsUUFBQUEsR0FBRDtBQUFNQyxRQUFBQTtBQUFOLE9BQXRCLENBQXZCO0FBQ0EsYUFBT2tCLE1BQVA7QUFDRCxLQUhELENBR0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsWUFBTSxJQUFJQyxLQUFKLENBQVVELENBQUMsQ0FBQ0UsTUFBRixJQUFZRixDQUFDLENBQUNHLE9BQXhCLENBQU47QUFDRDtBQUNGLEdBakJELFNBaUJVO0FBQ1IsUUFBSWpCLE9BQUosRUFBYTtBQUNYLFlBQU1PLGtCQUFHVyxNQUFILENBQVVsQixPQUFWLENBQU47QUFDRDtBQUNGO0FBQ0YsQ0F6Q0Q7O2VBNENlWixRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnMsIHRlbXBEaXIsIHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBPU0FTQ1JJUFQgPSAnb3Nhc2NyaXB0JztcbmNvbnN0IEFQUExFX1NDUklQVF9GRUFUVVJFID0gJ2FwcGxlX3NjcmlwdCc7XG5cbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRXhlY0FwcGxlU2NyaXB0T3B0aW9uc1xuICogQHByb3BlcnR5IHs/c3RyaW5nfSBzY3JpcHQgQSB2YWxpZCBBcHBsZVNjcmlwdCB0byBleGVjdXRlXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IGNvbW1hbmQgQSB2YWxpZCBBcHBsZVNjcmlwdCBhcyBhIHNpbmdsZSBjb21tYW5kIChubyBsaW5lIGJyZWFrcykgdG8gZXhlY3V0ZVxuICogQHByb3BlcnR5IHs/bnVtYmVyfSB0aW1lb3V0IFsyMDAwMF0gVGhlIG51bWJlciBvZiBzZWNvbmRzIHRvIHdhaXQgdW50aWwgYSBsb25nLXJ1bm5pbmcgY29tbWFuZCBpc1xuICogZmluaXNoZWQuIEFuIGVycm9yIGlzIHRocm93biBpZiB0aGUgY29tbWFuZCBpcyBzdGlsbCBydW5uaW5nIGFmdGVyIHRoaXMgdGltZW91dCBleHBpcmVzLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBjd2QgVGhlIHBhdGggdG8gYW4gZXhpc3RpbmcgZm9sZGVyLCB3aGljaCBpcyBnb2luZyB0byBiZSBzZXQgYXMgdGhlXG4gKiB3b3JraW5nIGRpcmVjdG9yeSBmb3IgdGhlIGNvbW1hbmQvc2NyaXB0IGJlaW5nIGV4ZWN1dGVkLlxuICovXG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIGdpdmVuIEFwcGxlU2NyaXB0IGNvbW1hbmQgb3IgYSB3aG9sZSBzY3JpcHQgYmFzZWQgb24gdGhlXG4gKiBnaXZlbiBvcHRpb25zLiBFaXRoZXIgb2YgdGhlc2Ugb3B0aW9ucyBtdXN0IGJlIHByb3ZpZGVkLiBJZiBib3RoIGFyZSBwcm92aWRlZFxuICogdGhlbiB0aGUgYGNvbW1hbmRgIG9uZSBnZXRzIHRoZSBwcmlvcml0eS5cbiAqIE5vdGUgdGhhdCBBcHBsZVNjcmlwdCBjb21tYW5kIGNhbm5vdCBjb250YWluIGxpbmUgYnJlYWtzLiBDb25zaWRlciBtYWtpbmcgaXRcbiAqIHRvIGEgc2NyaXB0IGluIHN1Y2ggY2FzZS5cbiAqIE5vdGUgdGhhdCBieSBkZWZhdWx0IEFwcGxlU2NyaXB0IGVuZ2luZSBibG9ja3MgY29tbWFuZHMvc2NyaXB0cyBleGVjdXRpb24gaWYgeW91ciBzY3JpcHRcbiAqIGlzIHRyeWluZyB0byBhY2Nlc3Mgc29tZSBwcml2YXRlIGVudGl0aWVzLCBsaWtlIGNhbWVyYXMgb3IgdGhlIGRlc2t0b3Agc2NyZWVuXG4gKiBhbmQgbm8gcGVybWlzc2lvbnMgdG8gZG8gaXQgYXJlIGdpdmVuIHRvIHRoZSBwYXJlbnQgKGZvciBleGFtcGxlLCBBcHBpdW0gb3IgVGVybWluYWwpXG4gKiBwcm9jZXNzIGluIFN5c3RlbSBQcmVmZXJlbmNlcyAtPiBQcml2YWN5IGxpc3QuXG4gKlxuICogQHBhcmFtIHshRXhlY0FwcGxlU2NyaXB0T3B0aW9uc30gb3B0c1xuICogQHJldHVybnMge3N0cmluZ30gVGhlIGFjdHVhbCBzdGRvdXQgb2YgdGhlIGdpdmVuIGNvbW1hbmQvc2NyaXB0XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGV4aXQgY29kZSBvZiB0aGUgZ2l2ZW4gY29tbWFuZC9zY3JpcHQgaXMgbm90IHplcm8uXG4gKiBUaGUgYWN0dWFsIHN0ZGVyciBvdXRwdXQgaXMgc2V0IHRvIHRoZSBlcnJvciBtZXNzYWdlIHZhbHVlLlxuICovXG5jb21tYW5kcy5tYWNvc0V4ZWNBcHBsZVNjcmlwdCA9IGFzeW5jIGZ1bmN0aW9uIG1hY29zRXhlY0FwcGxlU2NyaXB0IChvcHRzID0ge30pIHtcbiAgdGhpcy5lbnN1cmVGZWF0dXJlRW5hYmxlZChBUFBMRV9TQ1JJUFRfRkVBVFVSRSk7XG5cbiAgY29uc3Qge1xuICAgIHNjcmlwdCxcbiAgICBjb21tYW5kLFxuICAgIGN3ZCxcbiAgICB0aW1lb3V0LFxuICB9ID0gb3B0cztcbiAgaWYgKCFzY3JpcHQgJiYgIWNvbW1hbmQpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdygnQXBwbGVTY3JpcHQgc2NyaXB0L2NvbW1hbmQgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxuICBpZiAoL1xcbi8udGVzdChjb21tYW5kKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KCdBcHBsZVNjcmlwdCBjb21tYW5kcyBjYW5ub3QgY29udGFpbiBsaW5lIGJyZWFrcycpO1xuICB9XG4gIC8vICdjb21tYW5kJyBoYXMgcHJpb3JpdHkgb3ZlciAnc2NyaXB0J1xuICBjb25zdCBzaG91bGRSdW5TY3JpcHQgPSAhY29tbWFuZDtcblxuICBsZXQgdG1wUm9vdDtcbiAgdHJ5IHtcbiAgICBjb25zdCBhcmdzID0gW107XG4gICAgaWYgKHNob3VsZFJ1blNjcmlwdCkge1xuICAgICAgdG1wUm9vdCA9IGF3YWl0IHRlbXBEaXIub3BlbkRpcigpO1xuICAgICAgY29uc3QgdG1wU2NyaXB0UGF0aCA9IHBhdGgucmVzb2x2ZSh0bXBSb290LCAnYXBwaXVtX3NjcmlwdC5zY3B0Jyk7XG4gICAgICBhd2FpdCBmcy53cml0ZUZpbGUodG1wU2NyaXB0UGF0aCwgc2NyaXB0LCAndXRmOCcpO1xuICAgICAgYXJncy5wdXNoKHRtcFNjcmlwdFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmdzLnB1c2goJy1lJywgY29tbWFuZCk7XG4gICAgfVxuICAgIGxvZy5pbmZvKGBSdW5uaW5nICR7T1NBU0NSSVBUfSB3aXRoIGFyZ3VtZW50czogJHt1dGlsLnF1b3RlKGFyZ3MpfWApO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoT1NBU0NSSVBULCBhcmdzLCB7Y3dkLCB0aW1lb3V0fSk7XG4gICAgICByZXR1cm4gc3Rkb3V0O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlLnN0ZGVyciB8fCBlLm1lc3NhZ2UpO1xuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAodG1wUm9vdCkge1xuICAgICAgYXdhaXQgZnMucmltcmFmKHRtcFJvb3QpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvYXBwbGVzY3JpcHQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
