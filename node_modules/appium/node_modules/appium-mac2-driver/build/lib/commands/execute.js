"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("../logger"));

const commands = {};
const EXTENSION_COMMANDS_MAPPING = {
  setValue: 'macosSetValue',
  click: 'macosClick',
  scroll: 'macosScroll',
  rightClick: 'macosRightClick',
  hover: 'macosHover',
  doubleClick: 'macosDoubleClick',
  clickAndDrag: 'macosClickAndDrag',
  clickAndDragAndHold: 'macosClickAndDragAndHold',
  clickAndHold: 'macosClickAndHold',
  keys: 'macosKeys',
  source: 'macosSource',
  launchApp: 'macosLaunchApp',
  activateApp: 'macosActivateApp',
  terminateApp: 'macosTerminateApp',
  queryAppState: 'macosQueryAppState',
  appleScript: 'macosExecAppleScript',
  startRecordingScreen: 'startRecordingScreen',
  stopRecordingScreen: 'stopRecordingScreen'
};

commands.execute = async function execute(script, args) {
  if (script.match(/^macos:/)) {
    _logger.default.info(`Executing extension command '${script}'`);

    script = script.replace(/^macos:/, '').trim();
    return await this.executeMacosCommand(script, _lodash.default.isArray(args) ? args[0] : args);
  }

  throw new _appiumBaseDriver.errors.NotImplementedError();
};

commands.executeMacosCommand = async function executeMacosCommand(command, opts = {}) {
  if (!_lodash.default.has(EXTENSION_COMMANDS_MAPPING, command)) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown extension command "${command}". ` + `Only ${_lodash.default.keys(EXTENSION_COMMANDS_MAPPING)} commands are supported.`);
  }

  return await this[EXTENSION_COMMANDS_MAPPING[command]](opts);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkciLCJzZXRWYWx1ZSIsImNsaWNrIiwic2Nyb2xsIiwicmlnaHRDbGljayIsImhvdmVyIiwiZG91YmxlQ2xpY2siLCJjbGlja0FuZERyYWciLCJjbGlja0FuZERyYWdBbmRIb2xkIiwiY2xpY2tBbmRIb2xkIiwia2V5cyIsInNvdXJjZSIsImxhdW5jaEFwcCIsImFjdGl2YXRlQXBwIiwidGVybWluYXRlQXBwIiwicXVlcnlBcHBTdGF0ZSIsImFwcGxlU2NyaXB0Iiwic3RhcnRSZWNvcmRpbmdTY3JlZW4iLCJzdG9wUmVjb3JkaW5nU2NyZWVuIiwiZXhlY3V0ZSIsInNjcmlwdCIsImFyZ3MiLCJtYXRjaCIsImxvZyIsImluZm8iLCJyZXBsYWNlIiwidHJpbSIsImV4ZWN1dGVNYWNvc0NvbW1hbmQiLCJfIiwiaXNBcnJheSIsImVycm9ycyIsIk5vdEltcGxlbWVudGVkRXJyb3IiLCJjb21tYW5kIiwib3B0cyIsImhhcyIsIlVua25vd25Db21tYW5kRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsUUFBUSxHQUFHLEVBQWpCO0FBRUEsTUFBTUMsMEJBQTBCLEdBQUc7QUFDakNDLEVBQUFBLFFBQVEsRUFBRSxlQUR1QjtBQUVqQ0MsRUFBQUEsS0FBSyxFQUFFLFlBRjBCO0FBR2pDQyxFQUFBQSxNQUFNLEVBQUUsYUFIeUI7QUFJakNDLEVBQUFBLFVBQVUsRUFBRSxpQkFKcUI7QUFLakNDLEVBQUFBLEtBQUssRUFBRSxZQUwwQjtBQU1qQ0MsRUFBQUEsV0FBVyxFQUFFLGtCQU5vQjtBQU9qQ0MsRUFBQUEsWUFBWSxFQUFFLG1CQVBtQjtBQVFqQ0MsRUFBQUEsbUJBQW1CLEVBQUUsMEJBUlk7QUFTakNDLEVBQUFBLFlBQVksRUFBRSxtQkFUbUI7QUFVakNDLEVBQUFBLElBQUksRUFBRSxXQVYyQjtBQVlqQ0MsRUFBQUEsTUFBTSxFQUFFLGFBWnlCO0FBY2pDQyxFQUFBQSxTQUFTLEVBQUUsZ0JBZHNCO0FBZWpDQyxFQUFBQSxXQUFXLEVBQUUsa0JBZm9CO0FBZ0JqQ0MsRUFBQUEsWUFBWSxFQUFFLG1CQWhCbUI7QUFpQmpDQyxFQUFBQSxhQUFhLEVBQUUsb0JBakJrQjtBQW1CakNDLEVBQUFBLFdBQVcsRUFBRSxzQkFuQm9CO0FBcUJqQ0MsRUFBQUEsb0JBQW9CLEVBQUUsc0JBckJXO0FBc0JqQ0MsRUFBQUEsbUJBQW1CLEVBQUU7QUF0QlksQ0FBbkM7O0FBeUJBbkIsUUFBUSxDQUFDb0IsT0FBVCxHQUFtQixlQUFlQSxPQUFmLENBQXdCQyxNQUF4QixFQUFnQ0MsSUFBaEMsRUFBc0M7QUFDdkQsTUFBSUQsTUFBTSxDQUFDRSxLQUFQLENBQWEsU0FBYixDQUFKLEVBQTZCO0FBQzNCQyxvQkFBSUMsSUFBSixDQUFVLGdDQUErQkosTUFBTyxHQUFoRDs7QUFDQUEsSUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNLLE9BQVAsQ0FBZSxTQUFmLEVBQTBCLEVBQTFCLEVBQThCQyxJQUE5QixFQUFUO0FBQ0EsV0FBTyxNQUFNLEtBQUtDLG1CQUFMLENBQXlCUCxNQUF6QixFQUFpQ1EsZ0JBQUVDLE9BQUYsQ0FBVVIsSUFBVixJQUFrQkEsSUFBSSxDQUFDLENBQUQsQ0FBdEIsR0FBNEJBLElBQTdELENBQWI7QUFDRDs7QUFDRCxRQUFNLElBQUlTLHlCQUFPQyxtQkFBWCxFQUFOO0FBQ0QsQ0FQRDs7QUFTQWhDLFFBQVEsQ0FBQzRCLG1CQUFULEdBQStCLGVBQWVBLG1CQUFmLENBQW9DSyxPQUFwQyxFQUE2Q0MsSUFBSSxHQUFHLEVBQXBELEVBQXdEO0FBQ3JGLE1BQUksQ0FBQ0wsZ0JBQUVNLEdBQUYsQ0FBTWxDLDBCQUFOLEVBQWtDZ0MsT0FBbEMsQ0FBTCxFQUFpRDtBQUMvQyxVQUFNLElBQUlGLHlCQUFPSyxtQkFBWCxDQUFnQyw4QkFBNkJILE9BQVEsS0FBdEMsR0FDbEMsUUFBT0osZ0JBQUVsQixJQUFGLENBQU9WLDBCQUFQLENBQW1DLDBCQUR2QyxDQUFOO0FBRUQ7O0FBQ0QsU0FBTyxNQUFNLEtBQUtBLDBCQUEwQixDQUFDZ0MsT0FBRCxDQUEvQixFQUEwQ0MsSUFBMUMsQ0FBYjtBQUNELENBTkQ7O2VBUWVsQyxRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5cbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbmNvbnN0IEVYVEVOU0lPTl9DT01NQU5EU19NQVBQSU5HID0ge1xuICBzZXRWYWx1ZTogJ21hY29zU2V0VmFsdWUnLFxuICBjbGljazogJ21hY29zQ2xpY2snLFxuICBzY3JvbGw6ICdtYWNvc1Njcm9sbCcsXG4gIHJpZ2h0Q2xpY2s6ICdtYWNvc1JpZ2h0Q2xpY2snLFxuICBob3ZlcjogJ21hY29zSG92ZXInLFxuICBkb3VibGVDbGljazogJ21hY29zRG91YmxlQ2xpY2snLFxuICBjbGlja0FuZERyYWc6ICdtYWNvc0NsaWNrQW5kRHJhZycsXG4gIGNsaWNrQW5kRHJhZ0FuZEhvbGQ6ICdtYWNvc0NsaWNrQW5kRHJhZ0FuZEhvbGQnLFxuICBjbGlja0FuZEhvbGQ6ICdtYWNvc0NsaWNrQW5kSG9sZCcsXG4gIGtleXM6ICdtYWNvc0tleXMnLFxuXG4gIHNvdXJjZTogJ21hY29zU291cmNlJyxcblxuICBsYXVuY2hBcHA6ICdtYWNvc0xhdW5jaEFwcCcsXG4gIGFjdGl2YXRlQXBwOiAnbWFjb3NBY3RpdmF0ZUFwcCcsXG4gIHRlcm1pbmF0ZUFwcDogJ21hY29zVGVybWluYXRlQXBwJyxcbiAgcXVlcnlBcHBTdGF0ZTogJ21hY29zUXVlcnlBcHBTdGF0ZScsXG5cbiAgYXBwbGVTY3JpcHQ6ICdtYWNvc0V4ZWNBcHBsZVNjcmlwdCcsXG5cbiAgc3RhcnRSZWNvcmRpbmdTY3JlZW46ICdzdGFydFJlY29yZGluZ1NjcmVlbicsXG4gIHN0b3BSZWNvcmRpbmdTY3JlZW46ICdzdG9wUmVjb3JkaW5nU2NyZWVuJyxcbn07XG5cbmNvbW1hbmRzLmV4ZWN1dGUgPSBhc3luYyBmdW5jdGlvbiBleGVjdXRlIChzY3JpcHQsIGFyZ3MpIHtcbiAgaWYgKHNjcmlwdC5tYXRjaCgvXm1hY29zOi8pKSB7XG4gICAgbG9nLmluZm8oYEV4ZWN1dGluZyBleHRlbnNpb24gY29tbWFuZCAnJHtzY3JpcHR9J2ApO1xuICAgIHNjcmlwdCA9IHNjcmlwdC5yZXBsYWNlKC9ebWFjb3M6LywgJycpLnRyaW0oKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlTWFjb3NDb21tYW5kKHNjcmlwdCwgXy5pc0FycmF5KGFyZ3MpID8gYXJnc1swXSA6IGFyZ3MpO1xuICB9XG4gIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xufTtcblxuY29tbWFuZHMuZXhlY3V0ZU1hY29zQ29tbWFuZCA9IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVNYWNvc0NvbW1hbmQgKGNvbW1hbmQsIG9wdHMgPSB7fSkge1xuICBpZiAoIV8uaGFzKEVYVEVOU0lPTl9DT01NQU5EU19NQVBQSU5HLCBjb21tYW5kKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkNvbW1hbmRFcnJvcihgVW5rbm93biBleHRlbnNpb24gY29tbWFuZCBcIiR7Y29tbWFuZH1cIi4gYCArXG4gICAgICBgT25seSAke18ua2V5cyhFWFRFTlNJT05fQ09NTUFORFNfTUFQUElORyl9IGNvbW1hbmRzIGFyZSBzdXBwb3J0ZWQuYCk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXNbRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkdbY29tbWFuZF1dKG9wdHMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
