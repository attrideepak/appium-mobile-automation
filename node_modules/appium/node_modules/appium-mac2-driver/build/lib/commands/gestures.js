"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

const commands = {};

commands.macosSetValue = async function macosSetValue(opts = {}) {
  const uuid = _appiumSupport.util.unwrapElement(opts.element);

  const {
    value,
    text,
    keyModifierFlags
  } = opts;
  return await this.wda.proxy.command(`/element/${uuid}/value`, 'POST', {
    value,
    text,
    keyModifierFlags
  });
};

commands.macosClick = async function macosClick(opts = {}) {
  const uuid = _appiumSupport.util.unwrapElement(opts.element);

  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/element/${uuid}/click` : '/wda/click';
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    keyModifierFlags
  });
};

commands.macosClickAndHold = async function macosClickAndHold(opts = {}) {
  const uuid = _appiumSupport.util.unwrapElement(opts.element);

  const {
    x,
    y,
    duration,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/element/${uuid}/clickAndHold` : '/wda/clickAndHold';
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    duration,
    keyModifierFlags
  });
};

commands.macosScroll = async function macosScroll(opts = {}) {
  const uuid = _appiumSupport.util.unwrapElement(opts.element);

  const {
    x,
    y,
    deltaX,
    deltaY,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/scroll` : '/wda/scroll';
  return await this.wda.proxy.command(url, 'POST', {
    deltaX,
    deltaY,
    x,
    y,
    keyModifierFlags
  });
};

commands.macosRightClick = async function macosRightClick(opts = {}) {
  const uuid = _appiumSupport.util.unwrapElement(opts.element);

  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/rightClick` : '/wda/rightClick';
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    keyModifierFlags
  });
};

commands.macosHover = async function macosHover(opts = {}) {
  const uuid = _appiumSupport.util.unwrapElement(opts.element);

  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/hover` : '/wda/hover';
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    keyModifierFlags
  });
};

commands.macosDoubleClick = async function macosDoubleClick(opts = {}) {
  const uuid = _appiumSupport.util.unwrapElement(opts.element);

  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/doubleClick` : '/wda/doubleClick';
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    keyModifierFlags
  });
};

commands.macosClickAndDrag = async function macosClickAndDrag(opts = {}) {
  const sourceUuid = _appiumSupport.util.unwrapElement(opts.sourceElement);

  const destUuid = _appiumSupport.util.unwrapElement(opts.destinationElement);

  const {
    startX,
    startY,
    endX,
    endY,
    duration,
    keyModifierFlags
  } = opts;
  const url = sourceUuid && destUuid ? `/wda/element/${sourceUuid}/clickAndDrag` : '/wda/clickAndDrag';

  const dest = destUuid && _appiumSupport.util.wrapElement(destUuid);

  return await this.wda.proxy.command(url, 'POST', {
    startX,
    startY,
    endX,
    endY,
    duration,
    dest,
    keyModifierFlags
  });
};

commands.macosClickDragAndHold = async function macosClickDragAndHold(opts = {}) {
  const sourceUuid = _appiumSupport.util.unwrapElement(opts.sourceElement);

  const destUuid = _appiumSupport.util.unwrapElement(opts.destinationElement);

  const {
    startX,
    startY,
    endX,
    endY,
    duration,
    holdDuration,
    velocity,
    keyModifierFlags
  } = opts;
  const url = sourceUuid && destUuid ? `/wda/element/${sourceUuid}/clickDragAndHold` : '/wda/clickDragAndHold';

  const dest = destUuid && _appiumSupport.util.wrapElement(destUuid);

  return await this.wda.proxy.command(url, 'POST', {
    startX,
    startY,
    endX,
    endY,
    duration,
    holdDuration,
    velocity,
    dest,
    keyModifierFlags
  });
};

commands.macosKeys = async function macosKeys(opts = {}) {
  const uuid = _appiumSupport.util.unwrapElement(opts.element);

  const {
    keys
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/keys` : '/wda/keys';
  return await this.wda.proxy.command(url, 'POST', {
    keys
  });
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZXN0dXJlcy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsIm1hY29zU2V0VmFsdWUiLCJvcHRzIiwidXVpZCIsInV0aWwiLCJ1bndyYXBFbGVtZW50IiwiZWxlbWVudCIsInZhbHVlIiwidGV4dCIsImtleU1vZGlmaWVyRmxhZ3MiLCJ3ZGEiLCJwcm94eSIsImNvbW1hbmQiLCJtYWNvc0NsaWNrIiwieCIsInkiLCJ1cmwiLCJtYWNvc0NsaWNrQW5kSG9sZCIsImR1cmF0aW9uIiwibWFjb3NTY3JvbGwiLCJkZWx0YVgiLCJkZWx0YVkiLCJtYWNvc1JpZ2h0Q2xpY2siLCJtYWNvc0hvdmVyIiwibWFjb3NEb3VibGVDbGljayIsIm1hY29zQ2xpY2tBbmREcmFnIiwic291cmNlVXVpZCIsInNvdXJjZUVsZW1lbnQiLCJkZXN0VXVpZCIsImRlc3RpbmF0aW9uRWxlbWVudCIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwiZGVzdCIsIndyYXBFbGVtZW50IiwibWFjb3NDbGlja0RyYWdBbmRIb2xkIiwiaG9sZER1cmF0aW9uIiwidmVsb2NpdHkiLCJtYWNvc0tleXMiLCJrZXlzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7O0FBbUJBQSxRQUFRLENBQUNDLGFBQVQsR0FBeUIsZUFBZUEsYUFBZixDQUE4QkMsSUFBSSxHQUFHLEVBQXJDLEVBQXlDO0FBQ2hFLFFBQU1DLElBQUksR0FBR0Msb0JBQUtDLGFBQUwsQ0FBbUJILElBQUksQ0FBQ0ksT0FBeEIsQ0FBYjs7QUFDQSxRQUFNO0FBQUVDLElBQUFBLEtBQUY7QUFBU0MsSUFBQUEsSUFBVDtBQUFlQyxJQUFBQTtBQUFmLE1BQW9DUCxJQUExQztBQUNBLFNBQU8sTUFBTSxLQUFLUSxHQUFMLENBQVNDLEtBQVQsQ0FBZUMsT0FBZixDQUF3QixZQUFXVCxJQUFLLFFBQXhDLEVBQWlELE1BQWpELEVBQXlEO0FBQ3BFSSxJQUFB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QUFPLE1BQU0sS0FBS08sR0FBTCxDQUFTQyxLQUFULENBQWVDLE9BQWYsQ0FBdUJJLEdBQXZCLEVBQTRCLE1BQTVCLEVBQW9DO0FBQUV3QixJQUFBQTtBQUFGLEdBQXBDLENBQWI7QUFDRCxDQUxEOztlQU9leEMsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU2V0VmFsdWVPcHRpb25zXG4gKiBAcHJvcGVydHkgeyFzdHJpbmd9IGVsZW1lbnQgdXVpZCBvZiB0aGUgZWxlbWVudCB0byBzZXQgdmFsdWUgZm9yXG4gKiBAcHJvcGVydHkgeyp9IHZhbHVlIHZhbHVlIHRvIHNldC4gQ291bGQgYWxzbyBiZSBhbiBhcnJheVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHRleHQgdGV4dCB0byBzZXQuIElmIGJvdGggdmFsdWUgYW5kIHRleHQgYXJlIHNldFxuICogdGhlbiBgdmFsdWVgIGlzIHByZWZlcnJlZFxuICogQHByb3BlcnR5IHs/bnVtYmVyfSBrZXlNb2RpZmllckZsYWdzIGlmIHNldCB0aGVuIHRoZSBnaXZlbiBrZXkgbW9kaWZpZXJzIHdpbGwgYmVcbiAqIGFwcGxpZWQgd2hpbGUgdGhlIGVsZW1lbnQgdmFsdWUgaXMgYmVpbmcgc2V0LiBTZWVcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL3hjdGVzdC94Y3Vpa2V5bW9kaWZpZXJmbGFnc1xuICogZm9yIG1vcmUgZGV0YWlsc1xuICovXG5cbi8qKlxuICogU2V0IHZhbHVlIHRvIHRoZSBnaXZlbiBlbGVtZW50XG4gKlxuICogQHBhcmFtIHtTZXRWYWx1ZU9wdGlvbnN9IG9wdHNcbiAqL1xuY29tbWFuZHMubWFjb3NTZXRWYWx1ZSA9IGFzeW5jIGZ1bmN0aW9uIG1hY29zU2V0VmFsdWUgKG9wdHMgPSB7fSkge1xuICBjb25zdCB1dWlkID0gdXRpbC51bndyYXBFbGVtZW50KG9wdHMuZWxlbWVudCk7XG4gIGNvbnN0IHsgdmFsdWUsIHRleHQsIGtleU1vZGlmaWVyRmxhZ3MgfSA9IG9wdHM7XG4gIHJldHVybiBhd2FpdCB0aGlzLndkYS5wcm94eS5jb21tYW5kKGAvZWxlbWVudC8ke3V1aWR9L3ZhbHVlYCwgJ1BPU1QnLCB7XG4gICAgdmFsdWUsIHRleHQsXG4gICAga2V5TW9kaWZpZXJGbGFncyxcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENsaWNrT3B0aW9uc1xuICogQHByb3BlcnR5IHs/c3RyaW5nfSBlbGVtZW50IHV1aWQgb2YgdGhlIGVsZW1lbnQgdG8gY2xpY2suIEVpdGhlciB0aGlzIHByb3BlcnR5XG4gKiBvci9hbmQgeCBhbmQgeSBtdXN0IGJlIHNldC4gSWYgYm90aCBhcmUgc2V0IHRoZW4geCBhbmQgeSBhcmUgY29uc2lkZXJlZCBhcyByZWxhdGl2ZVxuICogZWxlbWVudCBjb29yZGluYXRlcy4gSWYgb25seSB4IGFuZCB5IGFyZSBzZXQgdGhlbiB0aGVzZSBhcmUgcGFyc2VkIGFzXG4gKiBhYnNvbHV0ZSBjb29yZGluYXRlcy5cbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0geCBjbGljayBYIGNvb3JkaW5hdGVcbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0geSBjbGljayBZIGNvb3JkaW5hdGVcbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0ga2V5TW9kaWZpZXJGbGFncyBpZiBzZXQgdGhlbiB0aGUgZ2l2ZW4ga2V5IG1vZGlmaWVycyB3aWxsIGJlXG4gKiBhcHBsaWVkIHdoaWxlIGNsaWNrIGlzIHBlcmZvcm1lZC4gU2VlXG4gKiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi94Y3Rlc3QveGN1aWtleW1vZGlmaWVyZmxhZ3NcbiAqIGZvciBtb3JlIGRldGFpbHNcbiAqL1xuXG4vKipcbiAqIFBlcmZvcm0gY2xpY2sgZ2VzdHVyZSBvbiBhbiBlbGVtZW50IG9yIGJ5IHJlbGF0aXZlL2Fic29sdXRlIGNvb3JkaW5hdGVzXG4gKlxuICogQHBhcmFtIHtDbGlja09wdGlvbnN9IG9wdHNcbiAqL1xuY29tbWFuZHMubWFjb3NDbGljayA9IGFzeW5jIGZ1bmN0aW9uIG1hY29zQ2xpY2sgKG9wdHMgPSB7fSkge1xuICBjb25zdCB1dWlkID0gdXRpbC51bndyYXBFbGVtZW50KG9wdHMuZWxlbWVudCk7XG4gIGNvbnN0IHsgeCwgeSwga2V5TW9kaWZpZXJGbGFncyB9ID0gb3B0cztcbiAgY29uc3QgdXJsID0gdXVpZCA/IGAvZWxlbWVudC8ke3V1aWR9L2NsaWNrYCA6ICcvd2RhL2NsaWNrJztcbiAgcmV0dXJuIGF3YWl0IHRoaXMud2RhLnByb3h5LmNvbW1hbmQodXJsLCAnUE9TVCcsIHtcbiAgICB4LCB5LFxuICAgIGtleU1vZGlmaWVyRmxhZ3MsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDbGlja0FuZEhvbGRPcHRpb25zXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IGVsZW1lbnQgdXVpZCBvZiB0aGUgZWxlbWVudCB0byBiZSBsb25nIGNsaWNrZWQuIEVpdGhlciB0aGlzIHByb3BlcnR5XG4gKiBvci9hbmQgeCBhbmQgeSBtdXN0IGJlIHNldC4gSWYgYm90aCBhcmUgc2V0IHRoZW4geCBhbmQgeSBhcmUgY29uc2lkZXJlZCBhcyByZWxhdGl2ZVxuICogZWxlbWVudCBjb29yZGluYXRlcy4gSWYgb25seSB4IGFuZCB5IGFyZSBzZXQgdGhlbiB0aGVzZSBhcmUgcGFyc2VkIGFzXG4gKiBhYnNvbHV0ZSBjb29yZGluYXRlcy5cbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0geCBsb25nIGNsaWNrIFggY29vcmRpbmF0ZVxuICogQHByb3BlcnR5IHs/bnVtYmVyfSB5IGxvbmcgY2xpY2sgWSBjb29yZGluYXRlXG4gKiBAcHJvcGVydHkgeyFudW1iZXJ9IGR1cmF0aW9uIHRoZSBudW1iZXIgb2YgZmxvYXQgc2Vjb25kcyB0byBob2xkIHRoZSBtb3VzZSBidXR0b25cbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0ga2V5TW9kaWZpZXJGbGFncyBpZiBzZXQgdGhlbiB0aGUgZ2l2ZW4ga2V5IG1vZGlmaWVycyB3aWxsIGJlXG4gKiBhcHBsaWVkIHdoaWxlIGNsaWNrIGlzIHBlcmZvcm1lZC4gU2VlXG4gKiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi94Y3Rlc3QveGN1aWtleW1vZGlmaWVyZmxhZ3NcbiAqIGZvciBtb3JlIGRldGFpbHNcbiAqL1xuXG4vKipcbiAqIFBlcmZvcm0gbG9uZyBjbGljayBnZXN0dXJlIG9uIGFuIGVsZW1lbnQgb3IgYnkgcmVsYXRpdmUvYWJzb2x1dGUgY29vcmRpbmF0ZXNcbiAqXG4gKiBAcGFyYW0ge0NsaWNrQW5kSG9sZE9wdGlvbnN9IG9wdHNcbiAqL1xuY29tbWFuZHMubWFjb3NDbGlja0FuZEhvbGQgPSBhc3luYyBmdW5jdGlvbiBtYWNvc0NsaWNrQW5kSG9sZCAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHV1aWQgPSB1dGlsLnVud3JhcEVsZW1lbnQob3B0cy5lbGVtZW50KTtcbiAgY29uc3QgeyB4LCB5LCBkdXJhdGlvbiwga2V5TW9kaWZpZXJGbGFncyB9ID0gb3B0cztcbiAgY29uc3QgdXJsID0gdXVpZCA/IGAvZWxlbWVudC8ke3V1aWR9L2NsaWNrQW5kSG9sZGAgOiAnL3dkYS9jbGlja0FuZEhvbGQnO1xuICByZXR1cm4gYXdhaXQgdGhpcy53ZGEucHJveHkuY29tbWFuZCh1cmwsICdQT1NUJywge1xuICAgIHgsIHksXG4gICAgZHVyYXRpb24sXG4gICAga2V5TW9kaWZpZXJGbGFncyxcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNjcm9sbE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gZWxlbWVudCB1dWlkIG9mIHRoZSBlbGVtZW50IHRvIGJlIHNjcm9sbGVkLiBFaXRoZXIgdGhpcyBwcm9wZXJ0eVxuICogb3IvYW5kIHggYW5kIHkgbXVzdCBiZSBzZXQuIElmIGJvdGggYXJlIHNldCB0aGVuIHggYW5kIHkgYXJlIGNvbnNpZGVyZWQgYXMgcmVsYXRpdmVcbiAqIGVsZW1lbnQgY29vcmRpbmF0ZXMuIElmIG9ubHkgeCBhbmQgeSBhcmUgc2V0IHRoZW4gdGhlc2UgYXJlIHBhcnNlZCBhc1xuICogYWJzb2x1dGUgY29vcmRpbmF0ZXMuXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHggc2Nyb2xsIFggY29vcmRpbmF0ZVxuICogQHByb3BlcnR5IHs/bnVtYmVyfSB5IHNjcm9sbCBZIGNvb3JkaW5hdGVcbiAqIEBwcm9wZXJ0eSB7IW51bWJlcn0gZGVsdGFYIGhvcml6b250YWwgZGVsdGEgYXMgZmxvYXQgbnVtYmVyXG4gKiBAcHJvcGVydHkgeyFudW1iZXJ9IGRlbHRhWSB2ZXJ0aWNhbCBkZWx0YSBhcyBmbG9hdCBudW1iZXJcbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0ga2V5TW9kaWZpZXJGbGFncyBpZiBzZXQgdGhlbiB0aGUgZ2l2ZW4ga2V5IG1vZGlmaWVycyB3aWxsIGJlXG4gKiBhcHBsaWVkIHdoaWxlIHNjcm9sbCBpcyBwZXJmb3JtZWQuIFNlZVxuICogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24veGN0ZXN0L3hjdWlrZXltb2RpZmllcmZsYWdzXG4gKiBmb3IgbW9yZSBkZXRhaWxzXG4gKi9cblxuLyoqXG4gKiBQZXJmb3JtIHNjcm9sbCBnZXN0dXJlIG9uIGFuIGVsZW1lbnQgb3IgYnkgcmVsYXRpdmUvYWJzb2x1dGUgY29vcmRpbmF0ZXNcbiAqXG4gKiBAcGFyYW0ge1Njcm9sbE9wdGlvbnN9IG9wdHNcbiAqL1xuY29tbWFuZHMubWFjb3NTY3JvbGwgPSBhc3luYyBmdW5jdGlvbiBtYWNvc1Njcm9sbCAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHV1aWQgPSB1dGlsLnVud3JhcEVsZW1lbnQob3B0cy5lbGVtZW50KTtcbiAgY29uc3Qge1xuICAgIHgsIHksXG4gICAgZGVsdGFYLCBkZWx0YVksXG4gICAga2V5TW9kaWZpZXJGbGFncyxcbiAgfSA9IG9wdHM7XG4gIGNvbnN0IHVybCA9IHV1aWQgPyBgL3dkYS9lbGVtZW50LyR7dXVpZH0vc2Nyb2xsYCA6ICcvd2RhL3Njcm9sbCc7XG4gIHJldHVybiBhd2FpdCB0aGlzLndkYS5wcm94eS5jb21tYW5kKHVybCwgJ1BPU1QnLCB7XG4gICAgZGVsdGFYLCBkZWx0YVksXG4gICAgeCwgeSxcbiAgICBrZXlNb2RpZmllckZsYWdzLFxuICB9KTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUmlnaHRDbGlja09wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gZWxlbWVudCB1dWlkIG9mIHRoZSBlbGVtZW50IHRvIGNsaWNrLiBFaXRoZXIgdGhpcyBwcm9wZXJ0eVxuICogb3IvYW5kIHggYW5kIHkgbXVzdCBiZSBzZXQuIElmIGJvdGggYXJlIHNldCB0aGVuIHggYW5kIHkgYXJlIGNvbnNpZGVyZWQgYXMgcmVsYXRpdmVcbiAqIGVsZW1lbnQgY29vcmRpbmF0ZXMuIElmIG9ubHkgeCBhbmQgeSBhcmUgc2V0IHRoZW4gdGhlc2UgYXJlIHBhcnNlZCBhc1xuICogYWJzb2x1dGUgY29vcmRpbmF0ZXMuXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHggY2xpY2sgWCBjb29yZGluYXRlXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHkgY2xpY2sgWSBjb29yZGluYXRlXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IGtleU1vZGlmaWVyRmxhZ3MgaWYgc2V0IHRoZW4gdGhlIGdpdmVuIGtleSBtb2RpZmllcnMgd2lsbCBiZVxuICogYXBwbGllZCB3aGlsZSBjbGljayBpcyBwZXJmb3JtZWQuIFNlZVxuICogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24veGN0ZXN0L3hjdWlrZXltb2RpZmllcmZsYWdzXG4gKiBmb3IgbW9yZSBkZXRhaWxzXG4gKi9cblxuLyoqXG4gKiBQZXJmb3JtIHJpZ2h0IGNsaWNrIGdlc3R1cmUgb24gYW4gZWxlbWVudCBvciBieSByZWxhdGl2ZS9hYnNvbHV0ZSBjb29yZGluYXRlc1xuICpcbiAqIEBwYXJhbSB7UmlnaHRDbGlja09wdGlvbnN9IG9wdHNcbiAqL1xuY29tbWFuZHMubWFjb3NSaWdodENsaWNrID0gYXN5bmMgZnVuY3Rpb24gbWFjb3NSaWdodENsaWNrIChvcHRzID0ge30pIHtcbiAgY29uc3QgdXVpZCA9IHV0aWwudW53cmFwRWxlbWVudChvcHRzLmVsZW1lbnQpO1xuICBjb25zdCB7IHgsIHksIGtleU1vZGlmaWVyRmxhZ3MgfSA9IG9wdHM7XG4gIGNvbnN0IHVybCA9IHV1aWQgPyBgL3dkYS9lbGVtZW50LyR7dXVpZH0vcmlnaHRDbGlja2AgOiAnL3dkYS9yaWdodENsaWNrJztcbiAgcmV0dXJuIGF3YWl0IHRoaXMud2RhLnByb3h5LmNvbW1hbmQodXJsLCAnUE9TVCcsIHtcbiAgICB4LCB5LFxuICAgIGtleU1vZGlmaWVyRmxhZ3MsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBIb3Zlck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gZWxlbWVudCB1dWlkIG9mIHRoZSBlbGVtZW50IHRvIGhvdmVyLiBFaXRoZXIgdGhpcyBwcm9wZXJ0eVxuICogb3IvYW5kIHggYW5kIHkgbXVzdCBiZSBzZXQuIElmIGJvdGggYXJlIHNldCB0aGVuIHggYW5kIHkgYXJlIGNvbnNpZGVyZWQgYXMgcmVsYXRpdmVcbiAqIGVsZW1lbnQgY29vcmRpbmF0ZXMuIElmIG9ubHkgeCBhbmQgeSBhcmUgc2V0IHRoZW4gdGhlc2UgYXJlIHBhcnNlZCBhc1xuICogYWJzb2x1dGUgY29vcmRpbmF0ZXMuXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHggY2xpY2sgWCBjb29yZGluYXRlXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHkgY2xpY2sgWSBjb29yZGluYXRlXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IGtleU1vZGlmaWVyRmxhZ3MgaWYgc2V0IHRoZW4gdGhlIGdpdmVuIGtleSBtb2RpZmllcnMgd2lsbCBiZVxuICogYXBwbGllZCB3aGlsZSBob3ZlciBpcyBwZXJmb3JtZWQuIFNlZVxuICogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24veGN0ZXN0L3hjdWlrZXltb2RpZmllcmZsYWdzXG4gKiBmb3IgbW9yZSBkZXRhaWxzXG4gKi9cblxuLyoqXG4gKiBQZXJmb3JtIGhvdmVyIGdlc3R1cmUgb24gYW4gZWxlbWVudCBvciBieSByZWxhdGl2ZS9hYnNvbHV0ZSBjb29yZGluYXRlc1xuICpcbiAqIEBwYXJhbSB7SG92ZXJPcHRpb25zfSBvcHRzXG4gKi9cbmNvbW1hbmRzLm1hY29zSG92ZXIgPSBhc3luYyBmdW5jdGlvbiBtYWNvc0hvdmVyIChvcHRzID0ge30pIHtcbiAgY29uc3QgdXVpZCA9IHV0aWwudW53cmFwRWxlbWVudChvcHRzLmVsZW1lbnQpO1xuICBjb25zdCB7IHgsIHksIGtleU1vZGlmaWVyRmxhZ3MgfSA9IG9wdHM7XG4gIGNvbnN0IHVybCA9IHV1aWQgPyBgL3dkYS9lbGVtZW50LyR7dXVpZH0vaG92ZXJgIDogJy93ZGEvaG92ZXInO1xuICByZXR1cm4gYXdhaXQgdGhpcy53ZGEucHJveHkuY29tbWFuZCh1cmwsICdQT1NUJywge1xuICAgIHgsIHksXG4gICAga2V5TW9kaWZpZXJGbGFncyxcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IERvdWJsZUNsaWNrT3B0aW9uc1xuICogQHByb3BlcnR5IHs/c3RyaW5nfSBlbGVtZW50IHV1aWQgb2YgdGhlIGVsZW1lbnQgdG8gZG91YmxlIGNsaWNrLiBFaXRoZXIgdGhpcyBwcm9wZXJ0eVxuICogb3IvYW5kIHggYW5kIHkgbXVzdCBiZSBzZXQuIElmIGJvdGggYXJlIHNldCB0aGVuIHggYW5kIHkgYXJlIGNvbnNpZGVyZWQgYXMgcmVsYXRpdmVcbiAqIGVsZW1lbnQgY29vcmRpbmF0ZXMuIElmIG9ubHkgeCBhbmQgeSBhcmUgc2V0IHRoZW4gdGhlc2UgYXJlIHBhcnNlZCBhc1xuICogYWJzb2x1dGUgY29vcmRpbmF0ZXMuXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHggY2xpY2sgWCBjb29yZGluYXRlXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHkgY2xpY2sgWSBjb29yZGluYXRlXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IGtleU1vZGlmaWVyRmxhZ3MgaWYgc2V0IHRoZW4gdGhlIGdpdmVuIGtleSBtb2RpZmllcnMgd2lsbCBiZVxuICogYXBwbGllZCB3aGlsZSBkb3VibGUgY2xpY2sgaXMgcGVyZm9ybWVkLiBTZWVcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL3hjdGVzdC94Y3Vpa2V5bW9kaWZpZXJmbGFnc1xuICogZm9yIG1vcmUgZGV0YWlsc1xuICovXG5cbi8qKlxuICogUGVyZm9ybSBkb3VibGUgY2xpY2sgZ2VzdHVyZSBvbiBhbiBlbGVtZW50IG9yIGJ5IHJlbGF0aXZlL2Fic29sdXRlIGNvb3JkaW5hdGVzXG4gKlxuICogQHBhcmFtIHtEb3VibGVDbGlja09wdGlvbnN9IG9wdHNcbiAqL1xuY29tbWFuZHMubWFjb3NEb3VibGVDbGljayA9IGFzeW5jIGZ1bmN0aW9uIG1hY29zRG91YmxlQ2xpY2sgKG9wdHMgPSB7fSkge1xuICBjb25zdCB1dWlkID0gdXRpbC51bndyYXBFbGVtZW50KG9wdHMuZWxlbWVudCk7XG4gIGNvbnN0IHsgeCwgeSwga2V5TW9kaWZpZXJGbGFncyB9ID0gb3B0cztcbiAgY29uc3QgdXJsID0gdXVpZCA/IGAvd2RhL2VsZW1lbnQvJHt1dWlkfS9kb3VibGVDbGlja2AgOiAnL3dkYS9kb3VibGVDbGljayc7XG4gIHJldHVybiBhd2FpdCB0aGlzLndkYS5wcm94eS5jb21tYW5kKHVybCwgJ1BPU1QnLCB7XG4gICAgeCwgeSxcbiAgICBrZXlNb2RpZmllckZsYWdzLFxuICB9KTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQ2xpY2tBbmREcmFnT3B0aW9uc1xuICogQHByb3BlcnR5IHs/c3RyaW5nfSBzb3VyY2VFbGVtZW50IHV1aWQgb2YgdGhlIGVsZW1lbnQgdG8gc3RhcnQgdGhlIGRyYWcgZnJvbS4gRWl0aGVyIHRoaXMgcHJvcGVydHlcbiAqIGFuZCBgZGVzdGluYXRpb25FbGVtZW50YCBtdXN0IGJlIHByb3ZpZGVkIG9yIGBzdGFydFhgLCBgc3RhcnRZYCwgYGVuZFhgLCBgZW5kWWAgY29vcmRpbmF0ZXNcbiAqIG11c3QgYmUgc2V0LlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBkZXN0aW5hdGlvbkVsZW1lbnQgdXVpZCBvZiB0aGUgZWxlbWVudCB0byBlbmQgdGhlIGRyYWcgb24uIEVpdGhlciB0aGlzIHByb3BlcnR5XG4gKiBhbmQgYHNvdXJjZUVsZW1lbnRgIG11c3QgYmUgcHJvdmlkZWQgb3IgYHN0YXJ0WGAsIGBzdGFydFlgLCBgZW5kWGAsIGBlbmRZYCBjb29yZGluYXRlc1xuICogbXVzdCBiZSBzZXQuXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHN0YXJ0WCBzdGFydGluZyBYIGNvb3JkaW5hdGVcbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0gc3RhcnRZIHN0YXJ0aW5nIFkgY29vcmRpbmF0ZVxuICogQHByb3BlcnR5IHs/bnVtYmVyfSBlbmRYIGVuZGluZyBYIGNvb3JkaW5hdGVcbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0gZW5kWSBlbmRpbmcgWSBjb29yZGluYXRlXG4gKiBAcHJvcGVydHkgeyFudW1iZXJ9IGR1cmF0aW9uIGxvbmcgY2xpY2sgZHVyYXRpb24gaW4gZmxvYXQgc2Vjb25kc1xuICogQHByb3BlcnR5IHs/bnVtYmVyfSBrZXlNb2RpZmllckZsYWdzIGlmIHNldCB0aGVuIHRoZSBnaXZlbiBrZXkgbW9kaWZpZXJzIHdpbGwgYmVcbiAqIGFwcGxpZWQgd2hpbGUgZHJhZyBpcyBwZXJmb3JtZWQuIFNlZVxuICogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24veGN0ZXN0L3hjdWlrZXltb2RpZmllcmZsYWdzXG4gKiBmb3IgbW9yZSBkZXRhaWxzXG4gKi9cblxuLyoqXG4gKiBQZXJmb3JtIGxvbmcgY2xpY2sgYW5kIGRyYWcgZ2VzdHVyZSBvbiBhbiBlbGVtZW50IG9yIGJ5IGFic29sdXRlIGNvb3JkaW5hdGVzXG4gKlxuICogQHBhcmFtIHtDbGlja0FuZERyYWdPcHRpb25zfSBvcHRzXG4gKi9cbmNvbW1hbmRzLm1hY29zQ2xpY2tBbmREcmFnID0gYXN5bmMgZnVuY3Rpb24gbWFjb3NDbGlja0FuZERyYWcgKG9wdHMgPSB7fSkge1xuICBjb25zdCBzb3VyY2VVdWlkID0gdXRpbC51bndyYXBFbGVtZW50KG9wdHMuc291cmNlRWxlbWVudCk7XG4gIGNvbnN0IGRlc3RVdWlkID0gdXRpbC51bndyYXBFbGVtZW50KG9wdHMuZGVzdGluYXRpb25FbGVtZW50KTtcbiAgY29uc3Qge1xuICAgIHN0YXJ0WCwgc3RhcnRZLFxuICAgIGVuZFgsIGVuZFksXG4gICAgZHVyYXRpb24sXG4gICAga2V5TW9kaWZpZXJGbGFnc1xuICB9ID0gb3B0cztcbiAgY29uc3QgdXJsID0gc291cmNlVXVpZCAmJiBkZXN0VXVpZFxuICAgID8gYC93ZGEvZWxlbWVudC8ke3NvdXJjZVV1aWR9L2NsaWNrQW5kRHJhZ2BcbiAgICA6ICcvd2RhL2NsaWNrQW5kRHJhZyc7XG4gIGNvbnN0IGRlc3QgPSBkZXN0VXVpZCAmJiB1dGlsLndyYXBFbGVtZW50KGRlc3RVdWlkKTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMud2RhLnByb3h5LmNvbW1hbmQodXJsLCAnUE9TVCcsIHtcbiAgICBzdGFydFgsIHN0YXJ0WSxcbiAgICBlbmRYLCBlbmRZLFxuICAgIGR1cmF0aW9uLFxuICAgIGRlc3QsXG4gICAga2V5TW9kaWZpZXJGbGFncyxcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENsaWNrRHJhZ0FuZEhvbGRPcHRpb25zXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHNvdXJjZUVsZW1lbnQgdXVpZCBvZiB0aGUgZWxlbWVudCB0byBzdGFydCB0aGUgZHJhZyBmcm9tLiBFaXRoZXIgdGhpcyBwcm9wZXJ0eVxuICogYW5kIGBkZXN0aW5hdGlvbkVsZW1lbnRgIG11c3QgYmUgcHJvdmlkZWQgb3IgYHN0YXJ0WGAsIGBzdGFydFlgLCBgZW5kWGAsIGBlbmRZYCBjb29yZGluYXRlc1xuICogbXVzdCBiZSBzZXQuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IGRlc3RpbmF0aW9uRWxlbWVudCB1dWlkIG9mIHRoZSBlbGVtZW50IHRvIGVuZCB0aGUgZHJhZyBvbi4gRWl0aGVyIHRoaXMgcHJvcGVydHlcbiAqIGFuZCBgc291cmNlRWxlbWVudGAgbXVzdCBiZSBwcm92aWRlZCBvciBgc3RhcnRYYCwgYHN0YXJ0WWAsIGBlbmRYYCwgYGVuZFlgIGNvb3JkaW5hdGVzXG4gKiBtdXN0IGJlIHNldC5cbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0gc3RhcnRYIHN0YXJ0aW5nIFggY29vcmRpbmF0ZVxuICogQHByb3BlcnR5IHs/bnVtYmVyfSBzdGFydFkgc3RhcnRpbmcgWSBjb29yZGluYXRlXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IGVuZFggZW5kaW5nIFggY29vcmRpbmF0ZVxuICogQHByb3BlcnR5IHs/bnVtYmVyfSBlbmRZIGVuZGluZyBZIGNvb3JkaW5hdGVcbiAqIEBwcm9wZXJ0eSB7IW51bWJlcn0gZHVyYXRpb24gbG9uZyBjbGljayBkdXJhdGlvbiBpbiBmbG9hdCBzZWNvbmRzXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHZlbG9jaXR5IGRyYWdnaW5nIHZlbG9jaXR5IGluIHBpeGVscyBwZXIgc2Vjb25kLlxuICogSWYgbm90IHByb3ZpZGVkIHRoZW4gdGhlIGRlZmF1bHQgdmVsb2NpdHkgaXMgdXNlZC4gU2VlXG4gKiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi94Y3Rlc3QveGN1aWdlc3R1cmV2ZWxvY2l0eVxuICogZm9yIG1vcmUgZGV0YWlsc1xuICogQHByb3BlcnR5IHs/bnVtYmVyfSBrZXlNb2RpZmllckZsYWdzIGlmIHNldCB0aGVuIHRoZSBnaXZlbiBrZXkgbW9kaWZpZXJzIHdpbGwgYmVcbiAqIGFwcGxpZWQgd2hpbGUgZHJhZyBpcyBwZXJmb3JtZWQuIFNlZVxuICogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24veGN0ZXN0L3hjdWlrZXltb2RpZmllcmZsYWdzXG4gKiBmb3IgbW9yZSBkZXRhaWxzXG4gKi9cblxuLyoqXG4gKiBQZXJmb3JtIGxvbmcgY2xpY2ssIGRyYWcgYW5kIGhvbGQgZ2VzdHVyZSBvbiBhbiBlbGVtZW50IG9yIGJ5IGFic29sdXRlIGNvb3JkaW5hdGVzXG4gKlxuICogQHBhcmFtIHtDbGlja0RyYWdBbmRIb2xkT3B0aW9uc30gb3B0c1xuICovXG5jb21tYW5kcy5tYWNvc0NsaWNrRHJhZ0FuZEhvbGQgPSBhc3luYyBmdW5jdGlvbiBtYWNvc0NsaWNrRHJhZ0FuZEhvbGQgKG9wdHMgPSB7fSkge1xuICBjb25zdCBzb3VyY2VVdWlkID0gdXRpbC51bndyYXBFbGVtZW50KG9wdHMuc291cmNlRWxlbWVudCk7XG4gIGNvbnN0IGRlc3RVdWlkID0gdXRpbC51bndyYXBFbGVtZW50KG9wdHMuZGVzdGluYXRpb25FbGVtZW50KTtcbiAgY29uc3Qge1xuICAgIHN0YXJ0WCwgc3RhcnRZLFxuICAgIGVuZFgsIGVuZFksXG4gICAgZHVyYXRpb24sIGhvbGREdXJhdGlvbixcbiAgICB2ZWxvY2l0eSxcbiAgICBrZXlNb2RpZmllckZsYWdzXG4gIH0gPSBvcHRzO1xuICBjb25zdCB1cmwgPSBzb3VyY2VVdWlkICYmIGRlc3RVdWlkXG4gICAgPyBgL3dkYS9lbGVtZW50LyR7c291cmNlVXVpZH0vY2xpY2tEcmFnQW5kSG9sZGBcbiAgICA6ICcvd2RhL2NsaWNrRHJhZ0FuZEhvbGQnO1xuICBjb25zdCBkZXN0ID0gZGVzdFV1aWQgJiYgdXRpbC53cmFwRWxlbWVudChkZXN0VXVpZCk7XG4gIHJldHVybiBhd2FpdCB0aGlzLndkYS5wcm94eS5jb21tYW5kKHVybCwgJ1BPU1QnLCB7XG4gICAgc3RhcnRYLCBzdGFydFksXG4gICAgZW5kWCwgZW5kWSxcbiAgICBkdXJhdGlvbiwgaG9sZER1cmF0aW9uLFxuICAgIHZlbG9jaXR5LFxuICAgIGRlc3QsXG4gICAga2V5TW9kaWZpZXJGbGFncyxcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEtleU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30ga2V5IGEgc3RyaW5nLCB0aGF0IHJlcHJlc2VudHMgYSBrZXkgdG8gdHlwZSAoc2VlXG4gKiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi94Y3Rlc3QveGN1aWVsZW1lbnQvMTUwMDYwNC10eXBla2V5P2xhbmd1YWdlPW9iamNcbiAqIGFuZCBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi94Y3Rlc3QveGN1aWtleWJvYXJka2V5P2xhbmd1YWdlPW9iamMpXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IG1vZGlmaWVyRmxhZ3MgYSBzZXQgb2YgbW9kaWZpZXIgZmxhZ3NcbiAqIChodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi94Y3Rlc3QveGN1aWtleW1vZGlmaWVyZmxhZ3M/bGFuZ3VhZ2U9b2JqYylcbiAqIHRvIHVzZSB3aGVuIHR5cGluZyB0aGUga2V5LlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gS2V5c09wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gZWxlbWVudCB1dWlkIG9mIHRoZSBlbGVtZW50IHRvIHNlbmQga2V5cyB0by5cbiAqIElmIHRoZSBlbGVtZW50IGlzIG5vdCBwcm92aWRlZCB0aGVuIHRoZSBrZXlzIHdpbGwgYmUgc2VudCB0byB0aGUgY3VycmVudCBhcHBsaWNhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7IUFycmF5PEtleU9wdGlvbnN8c3RyaW5nPn0ga2V5cyBBcnJheSBvZiBrZXlzIHRvIHR5cGUuXG4gKiBFYWNoIGl0ZW0gY291bGQgZWl0aGVyIGJlIGEgc3RyaW5nLCB0aGF0IHJlcHJlc2VudHMgYSBrZXkgaXRzZWxmIChzZWVcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL3hjdGVzdC94Y3VpZWxlbWVudC8xNTAwNjA0LXR5cGVrZXk/bGFuZ3VhZ2U9b2JqY1xuICogYW5kIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL3hjdGVzdC94Y3Vpa2V5Ym9hcmRrZXk/bGFuZ3VhZ2U9b2JqYylcbiAqIG9yIGEgZGljdGlvbmFyeSwgaWYgdGhlIGtleSBzaG91bGQgYWxzbyBiZSBlbnRlcmVkIHdpdGggbW9kaWZpZXJzLlxuICovXG5cbi8qKlxuICogU2VuZCBrZXlzIHRvIHRoZSBnaXZlbiBlbGVtZW50IG9yIHRvIHRoZSBhcHBsaWNhdGlvbiB1bmRlciB0ZXN0XG4gKlxuICogQHBhcmFtIHtLZXlzT3B0aW9uc30gb3B0c1xuICovXG5jb21tYW5kcy5tYWNvc0tleXMgPSBhc3luYyBmdW5jdGlvbiBtYWNvc0tleXMgKG9wdHMgPSB7fSkge1xuICBjb25zdCB1dWlkID0gdXRpbC51bndyYXBFbGVtZW50KG9wdHMuZWxlbWVudCk7XG4gIGNvbnN0IHsga2V5cyB9ID0gb3B0cztcbiAgY29uc3QgdXJsID0gdXVpZCA/IGAvd2RhL2VsZW1lbnQvJHt1dWlkfS9rZXlzYCA6ICcvd2RhL2tleXMnO1xuICByZXR1cm4gYXdhaXQgdGhpcy53ZGEucHJveHkuY29tbWFuZCh1cmwsICdQT1NUJywgeyBrZXlzIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9nZXN0dXJlcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
